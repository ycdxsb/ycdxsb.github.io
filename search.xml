<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>pwnable.kr —— bof</title>
    <url>/a4584c42.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 输入密码错误.请重新输入." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder>
    <label for="hbePass">请输入密码查看.若无反应.请使用firefox浏览器</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="0f122b85357b2a84e85fd618ff7bc9627853055f40f476bf3753de9633a6d3c0"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CTF</category>
        <category>pwn</category>
        <category>pwnable.kr</category>
        <category>Toddler&#39;sBottle</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
        <tag>pwnable.kr</tag>
        <tag>Toddler&#39;s Bottle</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr —— collision</title>
    <url>/90653887.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 输入密码错误.请重新输入." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder>
    <label for="hbePass">请输入密码查看.若无反应.请使用firefox浏览器</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="c326803513db0e45dbdd7b71ebc0b9e5198aab443bff8b4df5d7ab7e3ca83cef"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CTF</category>
        <category>pwn</category>
        <category>pwnable.kr</category>
        <category>Toddler&#39;sBottle</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
        <tag>pwnable.kr</tag>
        <tag>Toddler&#39;s Bottle</tag>
      </tags>
  </entry>
  <entry>
    <title>The Art, Science, and Engineering of Fuzzing(TSE 2019)</title>
    <url>/92a4b7cb.html</url>
    <content><![CDATA[<h2><span id="pabstract">Abstract</span><a href="#pabstract" class="header-anchor">#</a></h2><blockquote><p>Fuzzing三大优点：部署简单、门槛低、已有的大量经验证明了它的有效性。</p></blockquote><p>前人研究已经很多了，本文主要是做了一个系统的梳理blabla套话，目的是系统地探索模型模糊器各个阶段的设计决策，使我们的fuzzing设计更加行之有效。</p><a id="more"></a><h2><span id="pintroduction">Introduction</span><a href="#pintroduction" class="header-anchor">#</a></h2><p>对于hacker来说，fuzzing可以用来进行渗透测试和编写exp，而白帽则想利用fuzzing在被hacker攻击前找到漏洞所在。</p><p>此前已经有很多成功的研究和经典的fuzzing案例了，但不行的是，fuzzing好像遇到了瓶颈。后面的话没用了，大意就是不同论文表意不一致云云等原因搞的fuzzing领域的研究有点乱了。</p><p>所以，本文需要对前面的所有fuzzing研究进行提炼和升华。</p><p><strong>章节安排：</strong></p><p>第2节统一fuzzing术语和核心fuzzing框架，3-7节讲fuzzing每个阶段，调查相关文献，解释设计选择，讨论重要的权衡，并强调许多了不起的工程努力，有助于使现代fuzzing有效地完成其任务。</p><h2><span id="psystemization-taxonomy-and-test-programs">Systemization, Taxonomy, and Test Programs</span><a href="#psystemization-taxonomy-and-test-programs" class="header-anchor">#</a></h2><h3><span id="pfuzzing-amp-fuzzing-testing">fuzzing &amp; fuzzing testing</span><a href="#pfuzzing-amp-fuzzing-testing" class="header-anchor">#</a></h3><blockquote><p>Fuzzing：对可能的输入进行采样，得到对应的输出，类似于x-&gt;f(x)</p><p>Fuzzi testing: 目标是为了寻找bug和漏洞的fuzzing</p><p>Fuzzer：进行fuzz testing的程序</p><p>Fuzz Campaign：有一定安全策略的运行一个fuzzer</p><p>Bug Oracle：待检测的样本</p><p>Fuzz Configuration：fuzz的算法和策略，例如种子如何生成等</p></blockquote><h3><span id="ppaper-selection-criteria">Paper Selection Criteria</span><a href="#ppaper-selection-criteria" class="header-anchor">#</a></h3><p>选了哪些会议的文章云云</p><h3><span id="pfuzz-testing-algorithm">Fuzz Testing Algorithm</span><a href="#pfuzz-testing-algorithm" class="header-anchor">#</a></h3><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gd5h2obcfdj30po0eudic.jpg" alt="image-20200325001530872"></p><blockquote><p>模糊测试的算法目的是：在有限的时间，一定的约束条件下找到有限的bugs</p></blockquote><p>算法可以分为两个部分：Preprocess部分和 n轮的循环，循环包含五个部分（但在实际中有的可以不要）：schedule、inputgen、inputeval、confupdate、continue，从名字上可以很显然的看出来都是在做什么。一次循环在本文中称为fuzz iteration，简单理解就相当于编译里面的一个pass吧。一次inputeval称为fuzz run。</p><ul><li>$\text{PREPROCESS}(\mathbb{C}) \rightarrow \mathbb{C}$ ：根据用户的fuzzing configuration 进行一些可能的修改和获取一些fuzz中需要信息，比如插装，样本运行时间等</li><li>$\text { SCHEDULE (} \mathbb{C}, \left.t_{\text {elapsed }}, t_{\text {limit }}\right) \rightarrow \text { conf }$ ：根据当前时间和截止时间从当前的fuzzing configure里选取一个待测configure</li><li>$\text { INPUTGEN (conf) } \rightarrow \text { tcs }$ ：根据configure生成待测用例</li><li>$\text { Inpureval (conf, }\left. \text { tcs, } O_{\text {bug }}\right) \rightarrow \mathbb{B}^{\prime} , execinfos$ : 以生成用例和configure，并嵌入bug oracle（检查是否为bug）输入，得到bug和执行信息</li><li>$\text { CONFUPDATE (} \mathbb{C}, conf, execinfos) \rightarrow \mathbb{C}$ ：更新策略</li><li>$\text { CONTINUE }(\mathbb{C}) \rightarrow{\text { True, False }}$ ：判断是否退出</li></ul><h3><span id="ptaxonomy-of-fuzzers">Taxonomy of Fuzzers</span><a href="#ptaxonomy-of-fuzzers" class="header-anchor">#</a></h3><p>黑盒、白盒、灰盒</p><h3><span id="pfuzzer-genealogy-and-overview">Fuzzer Genealogy and Overview</span><a href="#pfuzzer-genealogy-and-overview" class="header-anchor">#</a></h3><p>不得不说汇总的真详细，直接po图了，各个研究的时间线，黑白灰，以及侧重方向一览无余</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdca4wf3u7j30u00xvtev.jpg" alt="image-20200330213421085"></p><p>以及一个整理好的表</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdca5cldlbj30u011f7g6.jpg" alt="image-20200330213449440"></p><h2><span id="ppreprocess">PreProcess</span><a href="#ppreprocess" class="header-anchor">#</a></h2><h3><span id="pinstrumentation">Instrumentation</span><a href="#pinstrumentation" class="header-anchor">#</a></h3><p>通过插桩来获取在fuzz过程中的有用信息，可以是静态的插桩，也可以是动态的插桩</p><p>静态插桩需要的开销要小，但是需要找同版本的依赖库编译，除了源代码级别的静态插桩，也有二进制级别的静态插桩</p><p>动态插桩需要的开销要大，不过好处是更容易检测动态链接库，工具有：DynInst , DynamoRIO , Pin , Valgrind, and QEMU.</p><p>有的fuzzer可以静态插桩也可以动态插桩</p><ul><li>Execution Feedback：<ul><li>路径覆盖：AFL及其衍生、CollAFL</li><li>结点覆盖：LibFuzzer、Syzkaller</li><li>可选：Honggfuzz</li></ul></li><li>In-Memory Fuzzing：对于一些应用，例如有GUI的程序，初始化绘制GUI什么会浪费时间，这个时候可以dump下初始化后的内存空间来节约时间。有的fuzzer在内存中对一个函数反复fuzzing，称为API fuzzing。缺点：1.不好重建bug产生时的上下文进行复现。2.对于跨函数调用的fuzz可能会出问题。</li><li>Thread Scheduling：条件竞争很难触发，因为它们依赖于不确定的行为，这种行为可能很少发生。但是，通过显式地控制线程的调度方式，插桩也可以用来触发不同的非确定性程序行为已有的研究表明，即使随机调度线程也可以有效地发现竞争条件错误。</li></ul><h3><span id="pseed-selection">Seed Selection</span><a href="#pseed-selection" class="header-anchor">#</a></h3><p>有的情况下fuzzing的取值域会很广，例如MP3文件等。</p><p>因此如何选择最小的初始化种子集合称为种子选择问题，目的是：找到最小的初始种子集合，使得在fuzzing过程中覆盖率最大化。也就是使得fuzzing的效率更高。</p><p>例如我们有种子s1，它能覆盖到{10,20}，以及s2-&gt;{20,30}，那么如果这个时候种子s3-&gt;{10,20,30}，则显然以s3作为初始种子更加高效。</p><h3><span id="pseed-trimming">Seed Trimming</span><a href="#pseed-trimming" class="header-anchor">#</a></h3><p>较小的种子集合可能会消耗较少的内存并引发更高的吞吐量，所以一些fuzzers在fuzz之前减小种子集合的大小，这便是种子集合的修剪。</p><p>一般发生在PREPROCESS或者CONFUPDATE之中</p><h3><span id="ppreparing-a-driver-application">Preparing a Driver Application</span><a href="#ppreparing-a-driver-application" class="header-anchor">#</a></h3><p>对于一些没法直接fuzzing的情况，可能需要自己写一个driver程序。</p><h2><span id="pscheduling">SCHEDULING</span><a href="#pscheduling" class="header-anchor">#</a></h2><p>调度是只选择一个fuzz configuration，然后进入下一轮的fuzz。对于简单的fuzzer，例如zzuf，则没有这个步骤。已有的研究中，ADLFast，BFF等的亮点就在于他们使用的调度策略。</p><p>本节只讨论黑盒和灰盒 fuzzing中的调度策略。</p><h3><span id="pthe-fuzz-configuration-scheduling-fcs-problem">The Fuzz Configuration Scheduling (FCS) Problem</span><a href="#pthe-fuzz-configuration-scheduling-fcs-problem" class="header-anchor">#</a></h3><p>调度的目标：</p><ul><li>分析当前configure信息</li><li>找到可能有最好结果的输入：bugs最多或者覆盖面最大</li><li>…</li></ul><p>还有一些算法1中的解释，很明白</p><h3><span id="pblack-box-fcs-algorithms">Black-box FCS Algorithms</span><a href="#pblack-box-fcs-algorithms" class="header-anchor">#</a></h3><p>对于黑盒fuzzing来说，能够用于FCS的只有：已有的crashes和bugs信息+执行时间</p><p>举例</p><ul><li>HouseHolder、Foote提出成功率指标：#bugs / #runs</li><li>MAB 算法：faster to fuzz allows a fuzzer to either collect more unique bugs with it, or decrease the upperbound on its future success probability more rapidly.</li></ul><h3><span id="pgrey-box-fcs-algorithms">Grey-box FCS Algorithms</span><a href="#pgrey-box-fcs-algorithms" class="header-anchor">#</a></h3><p>灰盒fuzzing能获取的信息比黑盒更多，例如覆盖率等信息</p><p>AFL提出EA算法，EA算法维护了一系列的configuration，从中间选取fit的configurations用来生成待测用例</p><p>疑问三连：</p><ul><li>what makes a configuration fit？</li><li>how configurations are selected</li><li>how a selected configu- ration is used.</li></ul><p>大部分fuzzers都会考虑控制流关系。</p><ul><li><p>AFL的策略是选取最快最小的输入，称为fit（favorite）的</p></li><li><p>AFLfast优化了AFL，快7倍，发现了3个AFL没发现的bug</p><ul><li><p>选择路径频率最小的来探索稀有路径</p></li><li><p>基于优先级来选择configuration，而不是循环选择</p></li><li><p>使用power schedul</p></li></ul></li><li><p>AFLGo进一步优化了优先级策略</p></li></ul><h2><span id="pinput-generation">INPUT GENERATION</span><a href="#pinput-generation" class="header-anchor">#</a></h2><p>有的fuzzer通过在原有seed上突变来产生下一次的输入，而有的基于model产生下一次的输入</p><h3><span id="pmodel-based-generation-based-fuzzers">Model-based (Generation-based) Fuzzers</span><a href="#pmodel-based-generation-based-fuzzers" class="header-anchor">#</a></h3><ul><li><p>predefined model 预定义模型：1.在使用前由user定义模型；2. 模型由fuzzer通过预定义的语法等来自动构建</p></li><li><p>Inferred Model 推断模型：发生在PREPROCESS和CONFUPDATE阶段，通过数据驱动、状态机等实现推断</p></li><li><p>Encoder Model：常用于有固定格式的文件的fuzzer</p></li></ul><h3><span id="pmodel-less-mutation-based-fuzzers">Model-Less （Mutation-based）Fuzzers</span><a href="#pmodel-less-mutation-based-fuzzers" class="header-anchor">#</a></h3><p>这个很常见</p><ul><li>比特位翻转</li><li>算数变异</li><li>基于块的变异</li><li>基于字典的变异</li></ul><h3><span id="pwhite-box-fuzzers">White-box Fuzzers</span><a href="#pwhite-box-fuzzers" class="header-anchor">#</a></h3><ul><li>动态符号执行</li><li>启发式fuzzing</li><li>输入变异</li></ul><h2><span id="pinput-evaluation">INPUT EVALUATION</span><a href="#pinput-evaluation" class="header-anchor">#</a></h2><p>是对输入进行执行以及分析的过程</p><h3><span id="pbug-oracles">Bug Oracles</span><a href="#pbug-oracles" class="header-anchor">#</a></h3><p>用于判断是否有crash 或者有bug的policy，分类举例如下</p><ul><li><p>Memory and Type Safety：Address Sanitizer、SoftBounf/CETS、CFI</p></li><li><p>Undefined Behaviors：Memory Sanitizer 、Undefined Behavior Sanitizer、Thread Sanitizer</p></li><li><p>Input Validation：KameleonFuzz、μ4SQLi</p></li><li><p>Semantic Difference：black-box differential fuzz</p></li></ul><h3><span id="pexecution-optimizations">Execution Optimizations</span><a href="#pexecution-optimizations" class="header-anchor">#</a></h3><p>由于需要频繁运行程序，所以需要进行执行优化。例如函数级别的fuzz、通过fork已有的进程来免去加载时间等等</p><h3><span id="ptriage">Triage</span><a href="#ptriage" class="header-anchor">#</a></h3><p>分类是分析和报告导致违反策略的测试用例的过程。分类可以分为三个步骤：重复数据消除、优先级划分和测试用例最小化。</p><ul><li>重复数据消除方法：Stack Backtrace Hashing、Coverage-based Deduplication、Semantics-aware Deduplication</li><li>Prioritization and Exploitability：著名的有WinDbg的自动检测能够被利用!expoitable</li><li>Test case minimization：例如BFF、AFL等fuzzer使用的策略</li></ul><h2><span id="pconfiguration-updating">CONFIGURATION UPDATING</span><a href="#pconfiguration-updating" class="header-anchor">#</a></h2><p>黑盒、白盒、灰盒fuzzing在这一个步骤上区别很大</p><ul><li>Evolutionary Algorithm：维护seed pool，使其尽可能到达更多的路径</li><li>Maintaining a Minset：最小化测试用例集合，最大化覆盖率</li></ul><h2><span id="pge-ren-gan-jue">个人感觉</span><a href="#pge-ren-gan-jue" class="header-anchor">#</a></h2><p>整体上写了很多，并且分类也十分细致，抽取出了一个fuzzer的框架，但东西太多，点到为止。</p><p>看完其他的fuzzing paper再回来看这篇论文收获会更大。</p>]]></content>
      <categories>
        <category>papers</category>
        <category>security</category>
        <category>fuzz</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>security</tag>
        <tag>fuzz</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable.kr —— fd</title>
    <url>/98f1adad.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 输入密码错误.请重新输入." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder>
    <label for="hbePass">请输入密码查看.若无反应.请使用firefox浏览器</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="f3421f46265a7ca0ee2b0187993337890c8e4d213e51f2f1935f1c57f64f6694"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CTF</category>
        <category>pwn</category>
        <category>pwnable.kr</category>
        <category>Toddler&#39;sBottle</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
        <tag>pwnable.kr</tag>
        <tag>Toddler&#39;s Bottle</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5+Scapy实现网络嗅探器CloudSniffer</title>
    <url>/e6624f61.html</url>
    <content><![CDATA[<h1><span id="cloudsniffer">CloudSniffer</span><a href="#cloudsniffer" class="header-anchor">#</a></h1><blockquote><p>课程实验，使用Scapy和PyQt5 实现了 一款Mac上的网络嗅探工具</p></blockquote><p><a href="https://github.com/ycdxsb/CloudSniffer" target="_blank" rel="noopener">CloudSniffer的Github链接</a></p><a id="more"></a><h4><span id="pgong-neng">功能</span><a href="#pgong-neng" class="header-anchor">#</a></h4><p><strong>基本功能</strong>：</p><ul><li>网卡选择</li><li>开始、停止抓包</li><li>清除数据</li><li>保存数据</li><li>读取数据</li><li>退出程序</li><li>流量包基本信息显示</li><li>协议分析</li><li>hexdump内容</li></ul><p><strong>统计功能</strong></p><ul><li><p>流量协议统计（帧数、字节数）</p></li><li><p>流入流量统计（帧数、字节数）</p></li><li><p>流出流量统计（帧数、字节数）</p></li><li><p>流量时间统计（字节数）</p></li><li><p>IP所在地查询</p></li></ul><p><strong>其他功能</strong></p><ul><li>嗅探前过滤、嗅探后过滤</li><li>html内容提取</li><li>日志记录</li></ul><h4><span id="pxiao-guo-zhan-shi">效果展示</span><a href="#pxiao-guo-zhan-shi" class="header-anchor">#</a></h4><p><strong>基本界面</strong></p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdd61b42pej30zq0u0kak.jpg" alt="basic"></p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdd61tgcwzg30m80i67ws.gif" alt="basic"></p><p><strong>统计功能</strong></p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdd628yoh9j31cy0u0b29.jpg" alt="statistics"></p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdd62v3bvxg30m80i8x6v.gif" alt="statistics"></p><p><strong>提取html内容</strong></p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdd633t246j31oz0u0kjl.jpg" alt="extractHTML"></p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdd63vvu4ug30m80i3hdz.gif" alt="extractHTML"></p><h4><span id="pan-zhuang-shi-yong">安装使用</span><a href="#pan-zhuang-shi-yong" class="header-anchor">#</a></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/ycdxsb/CloudSniffer.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ./CloudSniffer</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip3 install requirements.txt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> python3 CloudSniffer.py</span></span><br></pre></td></tr></table></figure><h4><span id="pcan-kao">参考</span><a href="#pcan-kao" class="header-anchor">#</a></h4><ul><li><a href="https://github.com/invernizzi/scapy-http" target="_blank" rel="noopener">scapy-http</a></li><li><a href="https://github.com/HatBoy/Pcap-Analyzer" target="_blank" rel="noopener">Pcap-Analyser</a></li></ul>]]></content>
      <categories>
        <category>PyQt5</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>PyQt5</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5搭建图书馆管理系统（11）——窗口信号与槽以及主窗口循环(项目完)</title>
    <url>/9f815f0d.html</url>
    <content><![CDATA[<h2><span id="pguan-li-yuan-zhu-ye-xin-hao-yu-cao">管理员主页信号与槽</span><a href="#pguan-li-yuan-zhu-ye-xin-hao-yu-cao" class="header-anchor">#</a></h2><h3><span id="pchuang-kou-nei-xin-hao-yu-cao">窗口内信号与槽</span><a href="#pchuang-kou-nei-xin-hao-yu-cao" class="header-anchor">#</a></h3><p>在管理员主页代码的<code>setUpUI</code>中，可以看到如下代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self.addBookButton.clicked.connect(self.addBookButtonClicked)</span><br><span class="line">        self.dropBookButton.clicked.connect(self.dropBookButtonClicked)</span><br><span class="line">        self.userManageButton.clicked.connect(self.userManage)</span><br></pre></td></tr></table></figure><p>这是Qt自带的信号与槽机制，也就是<code>QPushButton</code>点击触发，分别是</p><ul><li>添加书籍按钮点击触发弹出添加书籍对话框</li><li>淘汰书籍按钮点击触发弹出淘汰书籍对话框</li><li>用户管理按钮点击弹出用户管理对话框</li></ul><a id="more"></a><h3><span id="pchuang-kou-jian-xin-hao-yu-cao">窗口间信号与槽</span><a href="#pchuang-kou-jian-xin-hao-yu-cao" class="header-anchor">#</a></h3><p>在管理员主页代码中的<code>addBookButtonClicked</code>和<code>dropBookButtonClicked</code>函数中，可以看到这样两行代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">addDialog.add_book_success_signal.connect(self.storageView.searchButtonClicked)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dropDialog.drop_book_successful_signal.connect(self.storageView.searchButtonClicked)</span><br></pre></td></tr></table></figure><p>同样的，我们找一下发送信号方的信号定义<br>在<code>borrowBookDialog</code>中有<code>borrow_book_success_signal = pyqtSignal()</code><br>同时可以在<code>borrowButtonClicked</code>函数中看到，当成功添加书籍时会发送信号<br>而我们在管理员主页中，将这个信号与库存查询组件的的<code>searchButtonClicked</code>连接，也就是实现了当书籍添加时，动态刷新库存。<br>UI交互良好</p><p>另一个也是一样，就不赘述了</p><h2><span id="pxue-sheng-yong-hu-zhu-ye-xin-hao-yu-cao">学生用户主页信号与槽</span><a href="#pxue-sheng-yong-hu-zhu-ye-xin-hao-yu-cao" class="header-anchor">#</a></h2><h3><span id="pchuang-kou-nei-xin-hao-yu-cao">窗口内信号与槽</span><a href="#pchuang-kou-nei-xin-hao-yu-cao" class="header-anchor">#</a></h3><p>与管理员主页一样，可以找到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self.borrowBookButton.clicked.connect(self.borrowBookButtonClicked)</span><br><span class="line">       self.returnBookButton.clicked.connect(self.returnBookButtonClicked)</span><br><span class="line">       self.myBookStatus.clicked.connect(self.myBookStatusClicked)</span><br><span class="line">       self.allBookButton.clicked.connect(self.allBookButtonClicked)</span><br></pre></td></tr></table></figure><h3><span id="pchuang-kou-jian-xin-hao-yu-cao">窗口间信号与槽</span><a href="#pchuang-kou-jian-xin-hao-yu-cao" class="header-anchor">#</a></h3><p>在<code>borrowBookButtonClicked</code>函数可以找到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">borrowDialog.borrow_book_success_signal.connect(self.borrowStatusView.borrowedQuery)</span><br><span class="line">        borrowDialog.borrow_book_success_signal.connect(self.storageView.searchButtonClicked)</span><br></pre></td></tr></table></figure><p>这里既要刷新库存显示，同时也要刷新借书状态显示</p><p>在<code>returnBookButtonClicked</code>函数可以找到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">returnDialog.return_book_success_signal.connect(self.borrowStatusView.returnedQuery)</span><br><span class="line">       returnDialog.return_book_success_signal.connect(self.borrowStatusView.borrowedQuery)</span><br><span class="line">       returnDialog.return_book_success_signal.connect(self.storageView.searchButtonClicked)</span><br></pre></td></tr></table></figure><p>效果也是一样</p><h2><span id="pzhu-chuang-kou-xun-huan">主窗口循环</span><a href="#pzhu-chuang-kou-xun-huan" class="header-anchor">#</a></h2><p>在菜单栏中，有注册、修改密码、登录账户、退出登录、退出可以点击<br>当然其能否点击需要根据当前窗口决定，比如如果已登录，当然就不能点击登录和修改密码了<br>至于窗口的<code>setCentralWidget</code>调用，比如输入密码，是切换到用户主页还是到管理员主页，当然是看发射的信号是什么啦</p><h3><span id="pshi-xian-dai-ma">实现代码</span><a href="#pshi-xian-dai-ma" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtGui import QIcon, QFont</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">import qdarkstyle</span><br><span class="line">from SignIn import SignInWidget</span><br><span class="line">from SignUp import SignUpWidget</span><br><span class="line">import sip</span><br><span class="line">from AdminHome import AdminHome</span><br><span class="line">from StudentHome import StudentHome</span><br><span class="line">from changePasswordDialog import changePasswordDialog</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Main(QMainWindow):</span><br><span class="line">    def __init__(self, parent&#x3D;None):</span><br><span class="line">        super(Main, self).__init__(parent)</span><br><span class="line">        self.layout &#x3D; QHBoxLayout()</span><br><span class="line">        self.widget &#x3D; SignInWidget()</span><br><span class="line">        self.resize(900, 600)</span><br><span class="line">        self.setWindowTitle(&quot;欢迎登陆图书馆管理系统&quot;)</span><br><span class="line">        self.setCentralWidget(self.widget)</span><br><span class="line">        bar &#x3D; self.menuBar()</span><br><span class="line">        self.Menu &#x3D; bar.addMenu(&quot;菜单栏&quot;)</span><br><span class="line">        self.signUpAction &#x3D; QAction(&quot;注册&quot;, self)</span><br><span class="line">        self.changePasswordAction &#x3D;QAction(&quot;修改密码&quot;,self)</span><br><span class="line">        self.signInAction &#x3D; QAction(&quot;登录&quot;, self)</span><br><span class="line">        self.quitSignInAction &#x3D; QAction(&quot;退出登录&quot;, self)</span><br><span class="line">        self.quitAction &#x3D; QAction(&quot;退出&quot;, self)</span><br><span class="line">        self.Menu.addAction(self.signUpAction)</span><br><span class="line">        self.Menu.addAction(self.changePasswordAction)</span><br><span class="line">        self.Menu.addAction(self.signInAction)</span><br><span class="line">        self.Menu.addAction(self.quitSignInAction)</span><br><span class="line">        self.Menu.addAction(self.quitAction)</span><br><span class="line">        self.signUpAction.setEnabled(True)</span><br><span class="line">        self.changePasswordAction.setEnabled(True)</span><br><span class="line">        self.signInAction.setEnabled(False)</span><br><span class="line">        self.quitSignInAction.setEnabled(False)</span><br><span class="line">        self.widget.is_admin_signal.connect(self.adminSignIn)</span><br><span class="line">        self.widget.is_student_signal[str].connect(self.studentSignIn)</span><br><span class="line">        self.Menu.triggered[QAction].connect(self.menuTriggered)</span><br><span class="line"></span><br><span class="line">    def adminSignIn(self):</span><br><span class="line">        sip.delete(self.widget)</span><br><span class="line">        self.widget &#x3D; AdminHome()</span><br><span class="line">        self.setCentralWidget(self.widget)</span><br><span class="line">        self.changePasswordAction.setEnabled(False)</span><br><span class="line">        self.signUpAction.setEnabled(True)</span><br><span class="line">        self.signInAction.setEnabled(False)</span><br><span class="line">        self.quitSignInAction.setEnabled(True)</span><br><span class="line"></span><br><span class="line">    def studentSignIn(self, studentId):</span><br><span class="line">        sip.delete(self.widget)</span><br><span class="line">        self.widget &#x3D; StudentHome(studentId)</span><br><span class="line">        self.setCentralWidget(self.widget)</span><br><span class="line">        self.changePasswordAction.setEnabled(False)</span><br><span class="line">        self.signUpAction.setEnabled(True)</span><br><span class="line">        self.signInAction.setEnabled(False)</span><br><span class="line">        self.quitSignInAction.setEnabled(True)</span><br><span class="line"></span><br><span class="line">    def menuTriggered(self, q):</span><br><span class="line">        if(q.text()&#x3D;&#x3D;&quot;修改密码&quot;):</span><br><span class="line">            changePsdDialog&#x3D;changePasswordDialog(self)</span><br><span class="line">            changePsdDialog.show()</span><br><span class="line">            changePsdDialog.exec_()</span><br><span class="line">        if (q.text() &#x3D;&#x3D; &quot;注册&quot;):</span><br><span class="line">            sip.delete(self.widget)</span><br><span class="line">            self.widget &#x3D; SignUpWidget()</span><br><span class="line">            self.setCentralWidget(self.widget)</span><br><span class="line">            self.widget.student_signup_signal[str].connect(self.studentSignIn)</span><br><span class="line">            self.signUpAction.setEnabled(False)</span><br><span class="line">            self.changePasswordAction.setEnabled(True)</span><br><span class="line">            self.signInAction.setEnabled(True)</span><br><span class="line">            self.quitSignInAction.setEnabled(False)</span><br><span class="line">        if (q.text() &#x3D;&#x3D; &quot;退出登录&quot;):</span><br><span class="line">            sip.delete(self.widget)</span><br><span class="line">            self.widget &#x3D; SignInWidget()</span><br><span class="line">            self.setCentralWidget(self.widget)</span><br><span class="line">            self.widget.is_admin_signal.connect(self.adminSignIn)</span><br><span class="line">            self.widget.is_student_signal[str].connect(self.studentSignIn)</span><br><span class="line">            self.signUpAction.setEnabled(True)</span><br><span class="line">            self.changePasswordAction.setEnabled(True)</span><br><span class="line">            self.signInAction.setEnabled(False)</span><br><span class="line">            self.quitSignInAction.setEnabled(False)</span><br><span class="line">        if (q.text() &#x3D;&#x3D; &quot;登录&quot;):</span><br><span class="line">            sip.delete(self.widget)</span><br><span class="line">            self.widget &#x3D; SignInWidget()</span><br><span class="line">            self.setCentralWidget(self.widget)</span><br><span class="line">            self.widget.is_admin_signal.connect(self.adminSignIn)</span><br><span class="line">            self.widget.is_student_signal[str].connect(self.studentSignIn)</span><br><span class="line">            self.signUpAction.setEnabled(True)</span><br><span class="line">            self.changePasswordAction.setEnabled(True)</span><br><span class="line">            self.signInAction.setEnabled(False)</span><br><span class="line">            self.quitSignInAction.setEnabled(False)</span><br><span class="line">        if (q.text() &#x3D;&#x3D; &quot;退出&quot;):</span><br><span class="line">            qApp &#x3D; QApplication.instance()</span><br><span class="line">            qApp.quit()</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app &#x3D; QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(&quot;.&#x2F;images&#x2F;MainWindow_1.png&quot;))</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    mainMindow &#x3D; Main()</span><br><span class="line">    mainMindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3><span id="pshi-xian-xiao-guo">实现效果</span><a href="#pshi-xian-xiao-guo" class="header-anchor">#</a></h3><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9kfmjqjj30p40hr74n.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9kegp9cj30p60hht97.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9kf9sjmj30p90hmab8.jpg" alt="这里写图片描述"></p><h2><span id="pfu-shang-lian-jie">附上链接</span><a href="#pfu-shang-lian-jie" class="header-anchor">#</a></h2><p>项目地址：<a href="https://github.com/ycdxsb/LibraryManageDesktopApp" target="_blank" rel="noopener">github仓库链接</a></p><h2><span id="pyi-xie-gan-xiang">一些感想</span><a href="#pyi-xie-gan-xiang" class="header-anchor">#</a></h2><blockquote><p>这个项目写了大概四天的样子，同时也是第一次使用Qt，很多机制其实自己都不太熟悉，像主窗口的切换，都处理的很潦草，移出控件都强行使用<code>sip.delete</code>删除。</p><p>Qt东西很多，但使用的时候去查阅一下就好了，前几天的大作业评比，感觉自己做的还是不够好，主要是功能不够全面。</p><p>一开始想先写完再说，到时候重构就是了，但最后又没有心思重构 。</p><p>希望下次做项目的时候，自己可以想好了再出发</p></blockquote>]]></content>
      <categories>
        <category>PyQt5</category>
        <category>图书馆管理系统</category>
      </categories>
      <tags>
        <tag>PyQt5</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5搭建图书馆管理系统（10）—— 学生主页以及修改代码</title>
    <url>/77aca64.html</url>
    <content><![CDATA[<h2><span id="pxue-sheng-zhu-ye-she-ji">学生主页设计</span><a href="#pxue-sheng-zhu-ye-she-ji" class="header-anchor">#</a></h2><h3><span id="pfen-xi">分析</span><a href="#pfen-xi" class="header-anchor">#</a></h3><p>在学生主页，主要实现以下功能：<br>1、借阅书籍<br>2、归还书籍<br>3、借阅状态查询<br>4、书籍库存查询<br>使用四个<code>QPushButton</code>，分别用于弹出借阅书籍对话框、归还书籍对话框 、切换到借阅状态查询、切换到书籍库存查询</p><a id="more"></a><h3><span id="pshi-xian-dai-ma">实现代码</span><a href="#pshi-xian-dai-ma" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtGui import QIcon, QFont</span><br><span class="line">from PyQt5.QtCore import Qt</span><br><span class="line">import sip</span><br><span class="line">import qdarkstyle</span><br><span class="line">from BookStorageViewer import BookStorageViewer</span><br><span class="line">from borrowBookDialog import borrowBookDialog</span><br><span class="line">from returnBookDialog import returnBookDialog</span><br><span class="line">from BorrowStatusViewer import BorrowStatusViewer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class StudentHome(QWidget):</span><br><span class="line">    def __init__(self, studentId):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.StudentId &#x3D; studentId</span><br><span class="line">        self.resize(900, 600)</span><br><span class="line">        self.setWindowTitle(&quot;欢迎使用图书馆管理系统&quot;)</span><br><span class="line">        self.setUpUI()</span><br><span class="line"></span><br><span class="line">    def setUpUI(self):</span><br><span class="line">        # 总布局</span><br><span class="line">        self.layout &#x3D; QHBoxLayout(self)</span><br><span class="line">        # 按钮布局</span><br><span class="line">        self.buttonLayout &#x3D; QVBoxLayout()</span><br><span class="line">        # 按钮</span><br><span class="line">        self.borrowBookButton &#x3D; QPushButton(&quot;借书&quot;)</span><br><span class="line">        self.returnBookButton &#x3D; QPushButton(&quot;还书&quot;)</span><br><span class="line">        self.myBookStatus &#x3D; QPushButton(&quot;借阅状态&quot;)</span><br><span class="line">        self.allBookButton &#x3D; QPushButton(&quot;所有书籍&quot;)</span><br><span class="line">        self.buttonLayout.addWidget(self.borrowBookButton)</span><br><span class="line">        self.buttonLayout.addWidget(self.returnBookButton)</span><br><span class="line">        self.buttonLayout.addWidget(self.myBookStatus)</span><br><span class="line">        self.buttonLayout.addWidget(self.allBookButton)</span><br><span class="line">        self.borrowBookButton.setFixedWidth(100)</span><br><span class="line">        self.borrowBookButton.setFixedHeight(42)</span><br><span class="line">        self.returnBookButton.setFixedWidth(100)</span><br><span class="line">        self.returnBookButton.setFixedHeight(42)</span><br><span class="line">        self.myBookStatus.setFixedWidth(100)</span><br><span class="line">        self.myBookStatus.setFixedHeight(42)</span><br><span class="line">        self.allBookButton.setFixedWidth(100)</span><br><span class="line">        self.allBookButton.setFixedHeight(42)</span><br><span class="line">        font &#x3D; QFont()</span><br><span class="line">        font.setPixelSize(16)</span><br><span class="line">        self.borrowBookButton.setFont(font)</span><br><span class="line">        self.returnBookButton.setFont(font)</span><br><span class="line">        self.myBookStatus.setFont(font)</span><br><span class="line">        self.allBookButton.setFont(font)</span><br><span class="line"></span><br><span class="line">        self.storageView &#x3D; BookStorageViewer()</span><br><span class="line">        self.borrowStatusView&#x3D;BorrowStatusViewer(self.StudentId)</span><br><span class="line">        self.allBookButton.setEnabled(False)</span><br><span class="line"></span><br><span class="line">        self.layout.addLayout(self.buttonLayout)</span><br><span class="line">        self.layout.addWidget(self.storageView)</span><br><span class="line">        self.borrowBookButton.clicked.connect(self.borrowBookButtonClicked)</span><br><span class="line">        self.returnBookButton.clicked.connect(self.returnBookButtonClicked)</span><br><span class="line">        self.myBookStatus.clicked.connect(self.myBookStatusClicked)</span><br><span class="line">        self.allBookButton.clicked.connect(self.allBookButtonClicked)</span><br><span class="line"></span><br><span class="line">    def borrowBookButtonClicked(self):</span><br><span class="line">        borrowDialog &#x3D; borrowBookDialog(self.StudentId,self)</span><br><span class="line">        borrowDialog.borrow_book_success_signal.connect(self.borrowStatusView.borrowedQuery)</span><br><span class="line">        borrowDialog.borrow_book_success_signal.connect(self.storageView.searchButtonClicked)</span><br><span class="line">        borrowDialog.show()</span><br><span class="line">        borrowDialog.exec_()</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    def returnBookButtonClicked(self):</span><br><span class="line">        returnDialog &#x3D; returnBookDialog(self.StudentId,self)</span><br><span class="line">        returnDialog.return_book_success_signal.connect(self.borrowStatusView.returnedQuery)</span><br><span class="line">        returnDialog.return_book_success_signal.connect(self.borrowStatusView.borrowedQuery)</span><br><span class="line">        returnDialog.return_book_success_signal.connect(self.storageView.searchButtonClicked)</span><br><span class="line">        returnDialog.show()</span><br><span class="line">        returnDialog.exec_()</span><br><span class="line"></span><br><span class="line">    def myBookStatusClicked(self):</span><br><span class="line">        self.layout.removeWidget(self.storageView)</span><br><span class="line">        sip.delete(self.storageView)</span><br><span class="line">        self.storageView &#x3D; BookStorageViewer()</span><br><span class="line">        self.borrowStatusView &#x3D; BorrowStatusViewer(self.StudentId)</span><br><span class="line">        self.layout.addWidget(self.borrowStatusView)</span><br><span class="line">        self.allBookButton.setEnabled(True)</span><br><span class="line">        self.myBookStatus.setEnabled(False)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    def allBookButtonClicked(self):</span><br><span class="line">        self.layout.removeWidget(self.borrowStatusView)</span><br><span class="line">        sip.delete(self.borrowStatusView)</span><br><span class="line">        self.borrowStatusView &#x3D; BorrowStatusViewer(self.StudentId)</span><br><span class="line">        self.storageView &#x3D; BookStorageViewer()</span><br><span class="line">        self.layout.addWidget(self.storageView)</span><br><span class="line">        self.allBookButton.setEnabled(False)</span><br><span class="line">        self.myBookStatus.setEnabled(True)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app &#x3D; QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(&quot;.&#x2F;images&#x2F;MainWindow_1.png&quot;))</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    mainMindow &#x3D; StudentHome(&quot;PB15000135&quot;)</span><br><span class="line">    mainMindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3><span id="pshi-xian-xiao-guo">实现效果</span><a href="#pshi-xian-xiao-guo" class="header-anchor">#</a></h3><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9he6lrej30p20hlgmp.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9hejm84j30p10hlmy8.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9hf008bj30p50hpq3m.jpg" alt="这里写图片描述"></p><h2><span id="pxiu-gai-mi-ma-gong-neng">修改密码功能</span><a href="#pxiu-gai-mi-ma-gong-neng" class="header-anchor">#</a></h2><blockquote><p>修改密码功能使用菜单栏<code>QAction</code>点击启动</p></blockquote><h3><span id="pfen-xi">分析</span><a href="#pfen-xi" class="header-anchor">#</a></h3><p>修改密码，主要需要用户输入学号， 原密码，新密码，确认密码实现<br>代码逻辑如下：</p><ul><li>确认学号与原密码对应，否则报错</li><li>输入新密码与确认密码 ，如果相同，则md5加密后放入数据库中</li><li>注意设置输入校验</li></ul><p>使用对话框实现</p><h3><span id="pdai-ma-shi-xian">代码实现</span><a href="#pdai-ma-shi-xian" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">import qdarkstyle</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class changePasswordDialog(QDialog):</span><br><span class="line">    def __init__(self, parent&#x3D;None):</span><br><span class="line">        super(changePasswordDialog, self).__init__(parent)</span><br><span class="line">        self.setWindowModality(Qt.WindowModal)</span><br><span class="line">        self.setWindowTitle(&quot;修改密码&quot;)</span><br><span class="line">        self.setUpUI()</span><br><span class="line"></span><br><span class="line">    def setUpUI(self):</span><br><span class="line">        self.resize(300, 280)</span><br><span class="line">        self.layout &#x3D; QFormLayout()</span><br><span class="line">        self.setLayout(self.layout)</span><br><span class="line"></span><br><span class="line">        self.titlelabel &#x3D; QLabel(&quot; 修改密码&quot;)</span><br><span class="line">        self.studentIdLabel &#x3D; QLabel(&quot;学    号：&quot;)</span><br><span class="line">        # self.studentNameLabel&#x3D;QLabel(&quot;姓    名：&quot;)</span><br><span class="line">        self.oldPasswordLabel &#x3D; QLabel(&quot;旧 密 码：&quot;)</span><br><span class="line">        self.passwordLabel &#x3D; QLabel(&quot;新 密 码：&quot;)</span><br><span class="line">        self.confirmPasswordLabel &#x3D; QLabel(&quot;确认密码：&quot;)</span><br><span class="line"></span><br><span class="line">        self.studentIdEdit &#x3D; QLineEdit()</span><br><span class="line">        # self.studentNameEdit&#x3D;QLineEdit()</span><br><span class="line">        self.oldPasswordEdit &#x3D; QLineEdit()</span><br><span class="line">        self.passwordEdit &#x3D; QLineEdit()</span><br><span class="line">        self.confirmPasswordEdit &#x3D; QLineEdit()</span><br><span class="line"></span><br><span class="line">        self.changePasswordButton &#x3D; QPushButton(&quot;确认修改&quot;)</span><br><span class="line">        self.changePasswordButton.setFixedWidth(140)</span><br><span class="line">        self.changePasswordButton.setFixedHeight(32)</span><br><span class="line"></span><br><span class="line">        self.layout.addRow(&quot;&quot;, self.titlelabel)</span><br><span class="line">        self.layout.addRow(self.studentIdLabel, self.studentIdEdit)</span><br><span class="line">        # self.layout.addRow(self.studentNameLabel,self.studentNameEdit)</span><br><span class="line">        self.layout.addRow(self.oldPasswordLabel, self.oldPasswordEdit)</span><br><span class="line">        self.layout.addRow(self.passwordLabel, self.passwordEdit)</span><br><span class="line">        self.layout.addRow(self.confirmPasswordLabel, self.confirmPasswordEdit)</span><br><span class="line">        self.layout.addRow(&quot;&quot;, self.changePasswordButton)</span><br><span class="line"></span><br><span class="line">        font &#x3D; QFont()</span><br><span class="line">        font.setPixelSize(20)</span><br><span class="line">        self.titlelabel.setFont(font)</span><br><span class="line">        font.setPixelSize(16)</span><br><span class="line">        self.studentIdLabel.setFont(font)</span><br><span class="line">        # self.studentNameLabel.setFont(font)</span><br><span class="line">        self.oldPasswordLabel.setFont(font)</span><br><span class="line">        self.passwordLabel.setFont(font)</span><br><span class="line">        self.confirmPasswordLabel.setFont(font)</span><br><span class="line"></span><br><span class="line">        font.setPixelSize(16)</span><br><span class="line">        self.studentIdEdit.setFont(font)</span><br><span class="line">        self.changePasswordButton.setFont(font)</span><br><span class="line">        # self.studentNameEdit.setFont(font)</span><br><span class="line">        font.setPixelSize(10)</span><br><span class="line">        self.oldPasswordEdit.setFont(font)</span><br><span class="line">        self.passwordEdit.setFont(font)</span><br><span class="line">        self.confirmPasswordEdit.setFont(font)</span><br><span class="line"></span><br><span class="line">        self.titlelabel.setMargin(8)</span><br><span class="line">        self.layout.setVerticalSpacing(10)</span><br><span class="line"></span><br><span class="line">        # 设置长度</span><br><span class="line">        self.studentIdEdit.setMaxLength(10)</span><br><span class="line">        self.oldPasswordEdit.setMaxLength(16)</span><br><span class="line">        self.passwordEdit.setMaxLength(16)</span><br><span class="line">        self.confirmPasswordEdit.setMaxLength(16)</span><br><span class="line">        # 设置密码掩膜</span><br><span class="line">        self.oldPasswordEdit.setEchoMode(QLineEdit.Password)</span><br><span class="line">        self.passwordEdit.setEchoMode(QLineEdit.Password)</span><br><span class="line">        self.confirmPasswordEdit.setEchoMode(QLineEdit.Password)</span><br><span class="line"></span><br><span class="line">        # 设置校验</span><br><span class="line">        reg &#x3D; QRegExp(&quot;PB[0~9]&#123;8&#125;&quot;)</span><br><span class="line">        pValidator &#x3D; QRegExpValidator(self)</span><br><span class="line">        pValidator.setRegExp(reg)</span><br><span class="line">        self.studentIdEdit.setValidator(pValidator)</span><br><span class="line"></span><br><span class="line">        reg &#x3D; QRegExp(&quot;[a-zA-z0-9]+$&quot;)</span><br><span class="line">        pValidator.setRegExp(reg)</span><br><span class="line">        self.oldPasswordEdit.setValidator(pValidator)</span><br><span class="line">        self.passwordEdit.setValidator(pValidator)</span><br><span class="line">        self.confirmPasswordEdit.setValidator(pValidator)</span><br><span class="line"></span><br><span class="line">        # 设置信号与槽</span><br><span class="line">        self.changePasswordButton.clicked.connect(self.changePasswordButtonClicked)</span><br><span class="line"></span><br><span class="line">    def changePasswordButtonClicked(self):</span><br><span class="line">        studentId &#x3D; self.studentIdEdit.text()</span><br><span class="line">        oldPassword &#x3D; self.oldPasswordEdit.text()</span><br><span class="line">        password &#x3D; self.passwordEdit.text()</span><br><span class="line">        confirmPassword &#x3D; self.confirmPasswordEdit.text()</span><br><span class="line">        if (studentId &#x3D;&#x3D; &quot;&quot; or oldPassword &#x3D;&#x3D; &quot;&quot; or password &#x3D;&#x3D; &quot;&quot; or confirmPassword &#x3D;&#x3D; &quot;&quot;):</span><br><span class="line">            print(QMessageBox.warning(self, &quot;警告&quot;, &quot;输入不可为空，请重新输入&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">            return</span><br><span class="line">        db &#x3D; QSqlDatabase.addDatabase(&quot;QSQLITE&quot;)</span><br><span class="line">        db.setDatabaseName(&#39;.&#x2F;db&#x2F;LibraryManagement.db&#39;)</span><br><span class="line">        db.open()</span><br><span class="line">        query &#x3D; QSqlQuery()</span><br><span class="line">        sql &#x3D; &quot;SELECT * FROM User WHERE StudentId&#x3D;&#39;%s&#39;&quot; % studentId</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        # 如果用户不存在</span><br><span class="line">        if (not query.next()):</span><br><span class="line">            print(QMessageBox.warning(self, &quot;警告&quot;, &quot;该用户不存在，请重新输入&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">            self.studentIdEdit.clear()</span><br><span class="line">            return</span><br><span class="line">            # 如果密码错误</span><br><span class="line">        hl &#x3D; hashlib.md5()</span><br><span class="line">        hl.update(oldPassword.encode(encoding&#x3D;&#39;utf-8&#39;))</span><br><span class="line">        md5password &#x3D; hl.hexdigest()</span><br><span class="line">        sql &#x3D; &quot;SELECT * FROM User WHERE Password&#x3D;&#39;%s&#39; AND StudentId&#x3D;&#39;%s&#39;&quot; %(md5password,studentId)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        if (not query.next()):</span><br><span class="line">            print(QMessageBox.warning(self, &quot;警告&quot;, &quot;原密码输入错误,请重新输入&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">            self.oldPasswordEdit.clear()</span><br><span class="line">            return</span><br><span class="line">        # 密码与确认密码不同</span><br><span class="line">        if(password!&#x3D;confirmPassword):</span><br><span class="line">            print(QMessageBox.warning(self,&quot;警告&quot;,&quot;两次输入密码不同,请确认输入&quot;,QMessageBox.Yes,QMessageBox.Yes))</span><br><span class="line">            self.passwordEdit.clear()</span><br><span class="line">            self.confirmPasswordEdit.clear()</span><br><span class="line">            return</span><br><span class="line">        # 修改密码</span><br><span class="line">        hl &#x3D; hashlib.md5()</span><br><span class="line">        hl.update(password.encode(encoding&#x3D;&#39;utf-8&#39;))</span><br><span class="line">        md5password &#x3D; hl.hexdigest()</span><br><span class="line">        sql&#x3D;&quot;UPDATE User SET Password&#x3D;&#39;%s&#39; WHERE StudentId&#x3D;&#39;%s&#39;&quot;%(md5password,studentId)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        db.commit()</span><br><span class="line">        QMessageBox.information(self,&quot;提醒&quot;,&quot;修改密码成功，请登录系统!&quot;,QMessageBox.Yes,QMessageBox.Yes)</span><br><span class="line">        self.close()</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app &#x3D; QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(&quot;.&#x2F;images&#x2F;MainWindow_1.png&quot;))</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    mainMindow &#x3D; changePasswordDialog()</span><br><span class="line">    mainMindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3><span id="pshi-xian-xiao-guo">实现效果</span><a href="#pshi-xian-xiao-guo" class="header-anchor">#</a></h3><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9hdmznij308e08rq2u.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9hd0pdgj308d08s3yj.jpg" alt="这里写图片描述"></p><h2><span id="pzui-hou-fu-shang-lian-jie">最后附上链接</span><a href="#pzui-hou-fu-shang-lian-jie" class="header-anchor">#</a></h2><p>项目地址：<a href="https://github.com/ycdxsb/LibraryManageDesktopApp" target="_blank" rel="noopener">github仓库链接</a></p>]]></content>
      <categories>
        <category>PyQt5</category>
        <category>图书馆管理系统</category>
      </categories>
      <tags>
        <tag>PyQt5</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5搭建图书馆管理系统（9）——借阅状态查询</title>
    <url>/5ec72e4f.html</url>
    <content><![CDATA[<h2><span id="pfen-xi">分析</span><a href="#pfen-xi" class="header-anchor">#</a></h2><p>这个可以说是实现的最简单的一个功能了，只需要结合一下<code>QTableView</code>和<code>QSqlQueryModel</code>对<code>User_Book</code>表和<code>Book</code>表做一个联查即可，直接贴上代码如下</p><a id="more"></a><h2><span id="pdai-ma">代码</span><a href="#pdai-ma" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import Qt</span><br><span class="line">import qdarkstyle</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BorrowStatusViewer(QWidget):</span><br><span class="line">    def __init__(self, studentId):</span><br><span class="line">        super(BorrowStatusViewer, self).__init__()</span><br><span class="line">        self.resize(700, 500)</span><br><span class="line">        self.studentId &#x3D; studentId</span><br><span class="line">        self.setWindowTitle(&quot;欢迎使用图书馆管理系统&quot;)</span><br><span class="line">        self.setUpUI()</span><br><span class="line"></span><br><span class="line">    def setUpUI(self):</span><br><span class="line">        self.db &#x3D; QSqlDatabase.addDatabase(&quot;QSQLITE&quot;)</span><br><span class="line">        self.db.setDatabaseName(&#39;.&#x2F;db&#x2F;LibraryManagement.db&#39;)</span><br><span class="line">        self.db.open()</span><br><span class="line">        # 分为两块，上方是已借未归还书，下方是已归还书</span><br><span class="line">        self.layout &#x3D; QVBoxLayout(self)</span><br><span class="line">        # Label设置</span><br><span class="line">        self.borrowedLabel &#x3D; QLabel(&quot;未归还:&quot;)</span><br><span class="line">        self.returnedLabel &#x3D; QLabel(&quot;已归还:&quot;)</span><br><span class="line">        self.borrowedLabel.setFixedHeight(32)</span><br><span class="line">        self.borrowedLabel.setFixedWidth(60)</span><br><span class="line">        self.returnedLabel.setFixedHeight(32)</span><br><span class="line">        self.returnedLabel.setFixedWidth(60)</span><br><span class="line">        font &#x3D; QFont()</span><br><span class="line">        font.setPixelSize(18)</span><br><span class="line">        self.borrowedLabel.setFont(font)</span><br><span class="line">        self.returnedLabel.setFont(font)</span><br><span class="line"></span><br><span class="line">        # Table和Model</span><br><span class="line">        self.borrowedTableView &#x3D; QTableView()</span><br><span class="line">        self.borrowedTableView.horizontalHeader().setStretchLastSection(True)</span><br><span class="line">        self.borrowedTableView.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)</span><br><span class="line">        self.borrowedTableView.setEditTriggers(QAbstractItemView.NoEditTriggers)</span><br><span class="line">        self.returnedTableView &#x3D; QTableView()</span><br><span class="line">        self.returnedTableView.horizontalHeader().setStretchLastSection(True)</span><br><span class="line">        self.returnedTableView.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)</span><br><span class="line">        self.returnedTableView.setEditTriggers(QAbstractItemView.NoEditTriggers)</span><br><span class="line"></span><br><span class="line">        self.borrowedQueryModel &#x3D; QSqlQueryModel()</span><br><span class="line">        self.returnedQueryModel &#x3D; QSqlQueryModel()</span><br><span class="line">        self.borrowedTableView.setModel(self.borrowedQueryModel)</span><br><span class="line">        self.returnedTableView.setModel(self.returnedQueryModel)</span><br><span class="line">        self.borrowedQuery()</span><br><span class="line">        self.borrowedQueryModel.setHeaderData(0, Qt.Horizontal, &quot;书名&quot;)</span><br><span class="line">        self.borrowedQueryModel.setHeaderData(1, Qt.Horizontal, &quot;书号&quot;)</span><br><span class="line">        self.borrowedQueryModel.setHeaderData(2, Qt.Horizontal, &quot;作者&quot;)</span><br><span class="line">        self.borrowedQueryModel.setHeaderData(3, Qt.Horizontal, &quot;分类&quot;)</span><br><span class="line">        self.borrowedQueryModel.setHeaderData(4, Qt.Horizontal, &quot;出版社&quot;)</span><br><span class="line">        self.borrowedQueryModel.setHeaderData(5, Qt.Horizontal, &quot;出版时间&quot;)</span><br><span class="line">        self.borrowedQueryModel.setHeaderData(6, Qt.Horizontal, &quot;借出时间&quot;)</span><br><span class="line"></span><br><span class="line">        self.returnedQuery()</span><br><span class="line">        self.returnedQueryModel.setHeaderData(0, Qt.Horizontal, &quot;书名&quot;)</span><br><span class="line">        self.returnedQueryModel.setHeaderData(1, Qt.Horizontal, &quot;书号&quot;)</span><br><span class="line">        self.returnedQueryModel.setHeaderData(2, Qt.Horizontal, &quot;作者&quot;)</span><br><span class="line">        self.returnedQueryModel.setHeaderData(3, Qt.Horizontal, &quot;分类&quot;)</span><br><span class="line">        self.returnedQueryModel.setHeaderData(4, Qt.Horizontal, &quot;出版社&quot;)</span><br><span class="line">        self.returnedQueryModel.setHeaderData(5, Qt.Horizontal, &quot;出版时间&quot;)</span><br><span class="line">        self.returnedQueryModel.setHeaderData(6, Qt.Horizontal, &quot;借阅时间&quot;)</span><br><span class="line">        self.returnedQueryModel.setHeaderData(7, Qt.Horizontal, &quot;归还时间&quot;)</span><br><span class="line"></span><br><span class="line">        self.layout.addWidget(self.borrowedLabel)</span><br><span class="line">        self.layout.addWidget(self.borrowedTableView)</span><br><span class="line">        self.layout.addWidget(self.returnedLabel)</span><br><span class="line">        self.layout.addWidget(self.returnedTableView)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    def borrowedQuery(self):</span><br><span class="line">        sql &#x3D; &quot;SELECT Book.BookName,Book.BookId,Auth,Category,Publisher,PublishTime,BorrowTime  FROM Book,User_Book WHERE Book.BookId&#x3D;User_Book.BookId AND User_Book.BorrowState&#x3D;1 AND StudentId&#x3D;&#39;%s&#39;&quot; % self.studentId</span><br><span class="line">        self.borrowedQueryModel.setQuery(sql)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    def returnedQuery(self):</span><br><span class="line">        sql &#x3D; &quot;SELECT Book.BookName,Book.BookId,Auth,Category,Publisher,PublishTime,BorrowTime,ReturnTime  FROM Book,User_Book WHERE Book.BookId&#x3D;User_Book.BookId AND User_Book.BorrowState&#x3D;0 AND StudentId&#x3D;&#39;%s&#39;&quot; % self.studentId</span><br><span class="line">        self.returnedQueryModel.setQuery(sql)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app &#x3D; QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(&quot;.&#x2F;images&#x2F;MainWindow_1.png&quot;))</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    mainMindow &#x3D; BorrowStatusViewer(&quot;PB15000135&quot;)</span><br><span class="line">    mainMindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2><span id="pshi-xian-xiao-guo">实现效果</span><a href="#pshi-xian-xiao-guo" class="header-anchor">#</a></h2><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9e92wkxj30jl0etaan.jpg" alt="Alt text"></p><h2><span id="pzui-hou-fu-shang-lian-jie">最后附上链接</span><a href="#pzui-hou-fu-shang-lian-jie" class="header-anchor">#</a></h2><p>项目地址：<a href="https://github.com/ycdxsb/LibraryManageDesktopApp" target="_blank" rel="noopener">github仓库链接</a></p>]]></content>
      <categories>
        <category>PyQt5</category>
        <category>图书馆管理系统</category>
      </categories>
      <tags>
        <tag>PyQt5</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5搭建图书馆管理系统（8）——借书/还书功能</title>
    <url>/8effeb9b.html</url>
    <content><![CDATA[<h2><span id="pjie-shu-gong-neng-shi-xian">借书功能实现</span><a href="#pjie-shu-gong-neng-shi-xian" class="header-anchor">#</a></h2><h3><span id="pfen-xi">分析</span><a href="#pfen-xi" class="header-anchor">#</a></h3><p>本来借书的信息都是应该有RFID识别得到的，但是作为大作业，只能让用户输入信息了，但是书名之类的都不唯一，所以采取了与淘汰书籍一样的操作——让用户输入书号，自动匹配书本信息，然后确认借阅</p><p>借阅时，需要处理的逻辑如下：</p><ul><li>用户输入的书号存在，就匹配信息给用户</li><li>不存在就点击借阅，给出警告</li><li>借阅书籍数已经达到上限5本 ，给出警告</li><li>不允许借阅同样的书</li><li>更新<code>Book</code>表信息的借阅次数，剩余可借阅书数</li><li>在<code>User_Book</code>表插入记录</li><li>借阅成功给出提示</li></ul><a id="more"></a><h3><span id="pdai-ma-shi-xian">代码实现</span><a href="#pdai-ma-shi-xian" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">import qdarkstyle</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class borrowBookDialog(QDialog):</span><br><span class="line">    borrow_book_success_signal &#x3D; pyqtSignal()</span><br><span class="line"></span><br><span class="line">    def __init__(self, StudentId, parent&#x3D;None):</span><br><span class="line">        super(borrowBookDialog, self).__init__(parent)</span><br><span class="line">        self.studentId &#x3D; StudentId</span><br><span class="line">        self.setUpUI()</span><br><span class="line">        self.setWindowModality(Qt.WindowModal)</span><br><span class="line">        self.setWindowTitle(&quot;借阅书籍&quot;)</span><br><span class="line"></span><br><span class="line">    def setUpUI(self):</span><br><span class="line">        # 书名，书号，作者，分类，添加数量.出版社,出版日期</span><br><span class="line">        # 书籍分类：哲学类、社会科学类、政治类、法律类、军事类、经济类、文化类、教育类、体育类、语言文字类、艺术类、历史类、地理类、天文学类、生物学类、医学卫生类、农业类</span><br><span class="line">        BookCategory &#x3D; [&quot;哲学&quot;, &quot;社会科学&quot;, &quot;政治&quot;, &quot;法律&quot;, &quot;军事&quot;, &quot;经济&quot;, &quot;文化&quot;, &quot;教育&quot;, &quot;体育&quot;, &quot;语言文字&quot;, &quot;艺术&quot;, &quot;历史&quot;</span><br><span class="line">            , &quot;地理&quot;, &quot;天文学&quot;, &quot;生物学&quot;, &quot;医学卫生&quot;, &quot;农业&quot;]</span><br><span class="line">        self.resize(300, 400)</span><br><span class="line">        self.layout &#x3D; QFormLayout()</span><br><span class="line">        self.setLayout(self.layout)</span><br><span class="line"></span><br><span class="line">        # Label控件</span><br><span class="line">        self.borrowStudentLabel &#x3D; QLabel(&quot;借 阅 人:&quot;)</span><br><span class="line">        self.borrowStudentIdLabel &#x3D; QLabel(self.studentId)</span><br><span class="line">        self.titlelabel &#x3D; QLabel(&quot;  借阅书籍&quot;)</span><br><span class="line">        self.bookNameLabel &#x3D; QLabel(&quot;书    名:&quot;)</span><br><span class="line">        self.bookIdLabel &#x3D; QLabel(&quot;书    号:&quot;)</span><br><span class="line">        self.authNameLabel &#x3D; QLabel(&quot;作    者:&quot;)</span><br><span class="line">        self.categoryLabel &#x3D; QLabel(&quot;分    类:&quot;)</span><br><span class="line">        self.publisherLabel &#x3D; QLabel(&quot;出 版 社:&quot;)</span><br><span class="line">        self.publishDateLabel &#x3D; QLabel(&quot;出版日期:&quot;)</span><br><span class="line"></span><br><span class="line">        # button控件</span><br><span class="line">        self.borrowBookButton &#x3D; QPushButton(&quot;确认借阅&quot;)</span><br><span class="line"></span><br><span class="line">        # lineEdit控件</span><br><span class="line">        self.bookNameEdit &#x3D; QLineEdit()</span><br><span class="line">        self.bookIdEdit &#x3D; QLineEdit()</span><br><span class="line">        self.authNameEdit &#x3D; QLineEdit()</span><br><span class="line">        self.categoryComboBox &#x3D; QComboBox()</span><br><span class="line">        self.categoryComboBox.addItems(BookCategory)</span><br><span class="line">        self.publisherEdit &#x3D; QLineEdit()</span><br><span class="line">        self.publishTime &#x3D; QLineEdit()</span><br><span class="line"></span><br><span class="line">        self.bookNameEdit.setMaxLength(10)</span><br><span class="line">        self.bookIdEdit.setMaxLength(6)</span><br><span class="line">        self.authNameEdit.setMaxLength(10)</span><br><span class="line">        self.publisherEdit.setMaxLength(10)</span><br><span class="line"></span><br><span class="line">        # 添加进formlayout</span><br><span class="line">        self.layout.addRow(&quot;&quot;, self.titlelabel)</span><br><span class="line">        self.layout.addRow(self.borrowStudentLabel, self.borrowStudentIdLabel)</span><br><span class="line">        self.layout.addRow(self.bookNameLabel, self.bookNameEdit)</span><br><span class="line">        self.layout.addRow(self.bookIdLabel, self.bookIdEdit)</span><br><span class="line">        self.layout.addRow(self.authNameLabel, self.authNameEdit)</span><br><span class="line">        self.layout.addRow(self.categoryLabel, self.categoryComboBox)</span><br><span class="line">        self.layout.addRow(self.publisherLabel, self.publisherEdit)</span><br><span class="line">        self.layout.addRow(self.publishDateLabel, self.publishTime)</span><br><span class="line">        self.layout.addRow(&quot;&quot;, self.borrowBookButton)</span><br><span class="line"></span><br><span class="line">        # 设置字体</span><br><span class="line">        font &#x3D; QFont()</span><br><span class="line">        font.setPixelSize(20)</span><br><span class="line">        self.titlelabel.setFont(font)</span><br><span class="line">        font.setPixelSize(16)</span><br><span class="line">        self.borrowStudentIdLabel.setFont(font)</span><br><span class="line">        font.setPixelSize(14)</span><br><span class="line">        self.borrowStudentLabel.setFont(font)</span><br><span class="line">        self.bookNameLabel.setFont(font)</span><br><span class="line">        self.bookIdLabel.setFont(font)</span><br><span class="line">        self.authNameLabel.setFont(font)</span><br><span class="line">        self.categoryLabel.setFont(font)</span><br><span class="line">        self.publisherLabel.setFont(font)</span><br><span class="line">        self.publishDateLabel.setFont(font)</span><br><span class="line"></span><br><span class="line">        self.bookNameEdit.setFont(font)</span><br><span class="line">        self.bookNameEdit.setReadOnly(True)</span><br><span class="line">        self.bookNameEdit.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line">        self.bookIdEdit.setFont(font)</span><br><span class="line">        self.authNameEdit.setFont(font)</span><br><span class="line">        self.authNameEdit.setReadOnly(True)</span><br><span class="line">        self.authNameEdit.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line">        self.publisherEdit.setFont(font)</span><br><span class="line">        self.publisherEdit.setReadOnly(True)</span><br><span class="line">        self.publisherEdit.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line">        self.publishTime.setFont(font)</span><br><span class="line">        self.publishTime.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line">        self.categoryComboBox.setFont(font)</span><br><span class="line">        self.categoryComboBox.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line"></span><br><span class="line">        # button设置</span><br><span class="line">        font.setPixelSize(16)</span><br><span class="line">        self.borrowBookButton.setFont(font)</span><br><span class="line">        self.borrowBookButton.setFixedHeight(32)</span><br><span class="line">        self.borrowBookButton.setFixedWidth(140)</span><br><span class="line"></span><br><span class="line">        # 设置间距</span><br><span class="line">        self.titlelabel.setMargin(8)</span><br><span class="line">        self.layout.setVerticalSpacing(10)</span><br><span class="line">        self.borrowBookButton.clicked.connect(self.borrowButtonClicked)</span><br><span class="line">        self.bookIdEdit.textChanged.connect(self.bookIdEditChanged)</span><br><span class="line">        self.bookIdEdit.returnPressed.connect(self.borrowButtonClicked)</span><br><span class="line"></span><br><span class="line">    def borrowButtonClicked(self):</span><br><span class="line">        # 获取书号，书号为空或不存在库中，则弹出错误</span><br><span class="line">        # 向Book_User表插入记录，更新User表以及Book表</span><br><span class="line">        BookId &#x3D; self.bookIdEdit.text()</span><br><span class="line">        # BookId为空的处理</span><br><span class="line">        if (BookId &#x3D;&#x3D; &quot;&quot;):</span><br><span class="line">            print(QMessageBox.warning(self, &quot;警告&quot;, &quot;你所要借的书不存在，请查看输入&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">            return</span><br><span class="line">        # 打开数据库</span><br><span class="line">        db &#x3D; db &#x3D; QSqlDatabase.addDatabase(&quot;QSQLITE&quot;)</span><br><span class="line">        db.setDatabaseName(&#39;.&#x2F;db&#x2F;LibraryManagement.db&#39;)</span><br><span class="line">        db.open()</span><br><span class="line">        query &#x3D; QSqlQuery()</span><br><span class="line">        # 如果BookId不存在</span><br><span class="line">        sql &#x3D; &quot;SELECT * FROM Book WHERE BookId&#x3D;&#39;%s&#39;&quot; % BookId</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        if (not query.next()):</span><br><span class="line">            print(QMessageBox.warning(self, &quot;警告&quot;, &quot;你所要借的书不存在，请查看输入&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        # 借书上限5本</span><br><span class="line">        sql &#x3D; &quot;SELECT COUNT(StudentId) FROM User_Book WHERE StudentId&#x3D;&#39;%s&#39; AND BorrowState&#x3D;1&quot; % (</span><br><span class="line">            self.studentId)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        if (query.next()):</span><br><span class="line">            borrowNum &#x3D; query.value(0)</span><br><span class="line">            if (borrowNum &#x3D;&#x3D; 5):</span><br><span class="line">                QMessageBox.warning(self, &quot;警告&quot;, &quot;您借阅的书达到上限（5本）,借书失败！&quot;, QMessageBox.Yes, QMessageBox.Yes)</span><br><span class="line">                return</span><br><span class="line">        # 不允许重复借书</span><br><span class="line">        sql &#x3D; &quot;SELECT COUNT(StudentId) FROM User_Book WHERE  StudentId&#x3D;&#39;%s&#39; AND BookId&#x3D;&#39;%s&#39; AND BorrowState&#x3D;1&quot; % (</span><br><span class="line">        self.studentId, BookId)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        if (query.next() and query.value(0)):</span><br><span class="line">            QMessageBox.warning(self, &quot;警告&quot;, &quot;您已经借阅了本书并尚未归还，借阅失败！&quot;, QMessageBox.Yes, QMessageBox.Yes)</span><br><span class="line">            return</span><br><span class="line">        # 更新User表</span><br><span class="line">        sql &#x3D; &quot;UPDATE User SET TimesBorrowed&#x3D;TimesBorrowed+1,NumBorrowed&#x3D;NumBorrowed+1 WHERE StudentId&#x3D;&#39;%s&#39;&quot; % self.studentId</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        db.commit()</span><br><span class="line">        # 更新Book表</span><br><span class="line">        sql &#x3D; &quot;UPDATE Book SET NumCanBorrow&#x3D;NumCanBorrow-1,NumBorrowed&#x3D;NumBorrowed+1 WHERE BookId&#x3D;&#39;%s&#39;&quot; % BookId</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        db.commit()</span><br><span class="line">        # 插入User_Book表</span><br><span class="line">        timenow &#x3D; time.strftime(&#39;%Y-%m-%d&#39;, time.localtime(time.time()))</span><br><span class="line">        sql &#x3D; &quot;INSERT INTO User_Book VALUES (&#39;%s&#39;,&#39;%s&#39;,&#39;%s&#39;,NULL,1)&quot; % (self.studentId, BookId, timenow)</span><br><span class="line">        print(sql)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        db.commit()</span><br><span class="line">        print(QMessageBox.information(self, &quot;提示&quot;, &quot;借阅成功!&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">        self.borrow_book_success_signal.emit()</span><br><span class="line">        self.close()</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    def bookIdEditChanged(self):</span><br><span class="line">        bookId &#x3D; self.bookIdEdit.text()</span><br><span class="line">        if (bookId &#x3D;&#x3D; &quot;&quot;):</span><br><span class="line">            self.bookNameEdit.clear()</span><br><span class="line">            self.publisherEdit.clear()</span><br><span class="line">            self.authNameEdit.clear()</span><br><span class="line">            self.publishTime.clear()</span><br><span class="line">        db &#x3D; QSqlDatabase.addDatabase(&quot;QSQLITE&quot;)</span><br><span class="line">        db.setDatabaseName(&#39;.&#x2F;db&#x2F;LibraryManagement.db&#39;)</span><br><span class="line">        db.open()</span><br><span class="line">        query &#x3D; QSqlQuery()</span><br><span class="line">        sql &#x3D; &quot;SELECT * FROM Book WHERE BookId&#x3D;&#39;%s&#39;&quot; % (bookId)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        # 查询对应书号，如果存在就更新form</span><br><span class="line">        if (query.next()):</span><br><span class="line">            self.bookNameEdit.setText(query.value(0))</span><br><span class="line">            self.authNameEdit.setText(query.value(2))</span><br><span class="line">            self.categoryComboBox.setCurrentText(query.value(3))</span><br><span class="line">            self.publisherEdit.setText(query.value(4))</span><br><span class="line">            self.publishTime.setText(query.value(5))</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app &#x3D; QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(&quot;.&#x2F;images&#x2F;MainWindow_1.png&quot;))</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    mainMindow &#x3D; borrowBookDialog(&quot;PB15000135&quot;)</span><br><span class="line">    mainMindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3><span id="pshi-xian-xiao-guo">实现效果</span><a href="#pshi-xian-xiao-guo" class="header-anchor">#</a></h3><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9bj1uvej308h0c40so.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9blcsuij308e0c7mx4.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9bkucgkj308f0c43yk.jpg" alt="这里写图片描述"></p><h2><span id="pgui-huan-shu-ji-gong-neng-shi-xian">归还书籍功能实现</span><a href="#pgui-huan-shu-ji-gong-neng-shi-xian" class="header-anchor">#</a></h2><h3><span id="pfen-xi">分析</span><a href="#pfen-xi" class="header-anchor">#</a></h3><p>一开始的时候被借书功能带偏了，依旧使用了让用户输入书号的方式，但其实使用<code>QComboBox</code>列出已借阅图书让用户选择更好，大家可以自己试试</p><p>实现逻辑如下:</p><ul><li>如果存在借阅记录，就自动匹配书籍信息</li><li>如果输入为空，给出警告</li><li>并未借阅，给出提示</li><li>更新<code>User</code>表，<code>Book</code>表以及<code>User_Book</code>表</li></ul><h3><span id="pshi-xian-dai-ma">实现代码</span><a href="#pshi-xian-dai-ma" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">import qdarkstyle</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class returnBookDialog(QDialog):</span><br><span class="line">    return_book_success_signal&#x3D;pyqtSignal()</span><br><span class="line">    def __init__(self, StudentId, parent&#x3D;None):</span><br><span class="line">        super(returnBookDialog, self).__init__(parent)</span><br><span class="line">        self.studentId &#x3D; StudentId</span><br><span class="line">        self.setUpUI()</span><br><span class="line">        self.setWindowModality(Qt.WindowModal)</span><br><span class="line">        self.setWindowTitle(&quot;归还书籍&quot;)</span><br><span class="line"></span><br><span class="line">    def setUpUI(self):</span><br><span class="line">        # 书名，书号，作者，分类，添加数量.出版社,出版日期</span><br><span class="line">        # 书籍分类：哲学类、社会科学类、政治类、法律类、军事类、经济类、文化类、教育类、体育类、语言文字类、艺术类、历史类、地理类、天文学类、生物学类、医学卫生类、农业类</span><br><span class="line">        BookCategory &#x3D; [&quot;哲学&quot;, &quot;社会科学&quot;, &quot;政治&quot;, &quot;法律&quot;, &quot;军事&quot;, &quot;经济&quot;, &quot;文化&quot;, &quot;教育&quot;, &quot;体育&quot;, &quot;语言文字&quot;, &quot;艺术&quot;, &quot;历史&quot;</span><br><span class="line">            , &quot;地理&quot;, &quot;天文学&quot;, &quot;生物学&quot;, &quot;医学卫生&quot;, &quot;农业&quot;]</span><br><span class="line">        self.resize(300, 400)</span><br><span class="line">        self.layout &#x3D; QFormLayout()</span><br><span class="line">        self.setLayout(self.layout)</span><br><span class="line"></span><br><span class="line">        # Label控件</span><br><span class="line">        self.returnStudentLabel &#x3D; QLabel(&quot;还 书 人:&quot;)</span><br><span class="line">        self.returnStudentIdLabel &#x3D; QLabel(self.studentId)</span><br><span class="line">        self.titlelabel &#x3D; QLabel(&quot;  归还书籍&quot;)</span><br><span class="line">        self.bookNameLabel &#x3D; QLabel(&quot;书    名:&quot;)</span><br><span class="line">        self.bookIdLabel &#x3D; QLabel(&quot;书    号:&quot;)</span><br><span class="line">        self.authNameLabel &#x3D; QLabel(&quot;作    者:&quot;)</span><br><span class="line">        self.categoryLabel &#x3D; QLabel(&quot;分    类:&quot;)</span><br><span class="line">        self.publisherLabel &#x3D; QLabel(&quot;出 版 社:&quot;)</span><br><span class="line">        self.publishDateLabel &#x3D; QLabel(&quot;出版日期:&quot;)</span><br><span class="line"></span><br><span class="line">        # button控件</span><br><span class="line">        self.returnBookButton &#x3D; QPushButton(&quot;确认归还&quot;)</span><br><span class="line"></span><br><span class="line">        # lineEdit控件</span><br><span class="line">        self.bookNameEdit &#x3D; QLineEdit()</span><br><span class="line">        self.bookIdEdit &#x3D; QLineEdit()</span><br><span class="line">        self.authNameEdit &#x3D; QLineEdit()</span><br><span class="line">        self.categoryComboBox &#x3D; QComboBox()</span><br><span class="line">        self.categoryComboBox.addItems(BookCategory)</span><br><span class="line">        self.publisherEdit &#x3D; QLineEdit()</span><br><span class="line">        self.publishTime &#x3D; QLineEdit()</span><br><span class="line"></span><br><span class="line">        self.bookNameEdit.setMaxLength(10)</span><br><span class="line">        self.bookIdEdit.setMaxLength(6)</span><br><span class="line">        self.authNameEdit.setMaxLength(10)</span><br><span class="line">        self.publisherEdit.setMaxLength(10)</span><br><span class="line"></span><br><span class="line">        # 添加进formlayout</span><br><span class="line">        self.layout.addRow(&quot;&quot;, self.titlelabel)</span><br><span class="line">        self.layout.addRow(self.returnStudentLabel, self.returnStudentIdLabel)</span><br><span class="line">        self.layout.addRow(self.bookNameLabel, self.bookNameEdit)</span><br><span class="line">        self.layout.addRow(self.bookIdLabel, self.bookIdEdit)</span><br><span class="line">        self.layout.addRow(self.authNameLabel, self.authNameEdit)</span><br><span class="line">        self.layout.addRow(self.categoryLabel, self.categoryComboBox)</span><br><span class="line">        self.layout.addRow(self.publisherLabel, self.publisherEdit)</span><br><span class="line">        self.layout.addRow(self.publishDateLabel, self.publishTime)</span><br><span class="line">        self.layout.addRow(&quot;&quot;, self.returnBookButton)</span><br><span class="line"></span><br><span class="line">        # 设置字体</span><br><span class="line">        font &#x3D; QFont()</span><br><span class="line">        font.setPixelSize(20)</span><br><span class="line">        self.titlelabel.setFont(font)</span><br><span class="line">        font.setPixelSize(16)</span><br><span class="line">        self.returnStudentIdLabel.setFont(font)</span><br><span class="line">        font.setPixelSize(14)</span><br><span class="line">        self.returnStudentLabel.setFont(font)</span><br><span class="line">        self.bookNameLabel.setFont(font)</span><br><span class="line">        self.bookIdLabel.setFont(font)</span><br><span class="line">        self.authNameLabel.setFont(font)</span><br><span class="line">        self.categoryLabel.setFont(font)</span><br><span class="line">        self.publisherLabel.setFont(font)</span><br><span class="line">        self.publishDateLabel.setFont(font)</span><br><span class="line"></span><br><span class="line">        self.bookNameEdit.setFont(font)</span><br><span class="line">        self.bookNameEdit.setReadOnly(True)</span><br><span class="line">        self.bookNameEdit.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line">        self.bookIdEdit.setFont(font)</span><br><span class="line">        self.authNameEdit.setFont(font)</span><br><span class="line">        self.authNameEdit.setReadOnly(True)</span><br><span class="line">        self.authNameEdit.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line">        self.publisherEdit.setFont(font)</span><br><span class="line">        self.publisherEdit.setReadOnly(True)</span><br><span class="line">        self.publisherEdit.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line">        self.publishTime.setFont(font)</span><br><span class="line">        self.publishTime.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line">        self.categoryComboBox.setFont(font)</span><br><span class="line">        self.categoryComboBox.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line"></span><br><span class="line">        # button设置</span><br><span class="line">        font.setPixelSize(16)</span><br><span class="line">        self.returnBookButton.setFont(font)</span><br><span class="line">        self.returnBookButton.setFixedHeight(32)</span><br><span class="line">        self.returnBookButton.setFixedWidth(140)</span><br><span class="line"></span><br><span class="line">        # 设置间距</span><br><span class="line">        self.titlelabel.setMargin(8)</span><br><span class="line">        self.layout.setVerticalSpacing(10)</span><br><span class="line">        self.returnBookButton.clicked.connect(self.returnButtonClicked)</span><br><span class="line">        self.bookIdEdit.textChanged.connect(self.bookIdEditChanged)</span><br><span class="line"></span><br><span class="line">    def returnButtonClicked(self):</span><br><span class="line">        # 获取书号，书号为空或并未借阅，则弹出错误</span><br><span class="line">        # 更新Book_User表User表以及Book表</span><br><span class="line">        BookId &#x3D; self.bookIdEdit.text()</span><br><span class="line">        # BookId为空的处理</span><br><span class="line">        if (BookId &#x3D;&#x3D; &quot;&quot;):</span><br><span class="line">            print(QMessageBox.warning(self, &quot;警告&quot;, &quot;你所要还的书不存在，请查看输入&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">            return</span><br><span class="line">        # 打开数据库</span><br><span class="line">        db &#x3D; db &#x3D; QSqlDatabase.addDatabase(&quot;QSQLITE&quot;)</span><br><span class="line">        db.setDatabaseName(&#39;.&#x2F;db&#x2F;LibraryManagement.db&#39;)</span><br><span class="line">        db.open()</span><br><span class="line">        query &#x3D; QSqlQuery()</span><br><span class="line">        # 如果未借阅</span><br><span class="line">        sql &#x3D; &quot;SELECT * FROM User_Book WHERE StudentId&#x3D;&#39;%s&#39; AND BookId&#x3D;&#39;%s&#39; AND BorrowState&#x3D;1&quot; %(self.studentId,BookId)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        if (not query.next()):</span><br><span class="line">            print(QMessageBox.information(self, &quot;提示&quot;, &quot;您并未借阅此书，故无需归还&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">            return</span><br><span class="line">        # 更新User表</span><br><span class="line">        sql &#x3D; &quot;UPDATE User SET NumBorrowed&#x3D;NumBorrowed-1 WHERE StudentId&#x3D;&#39;%s&#39;&quot; % self.studentId</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        db.commit()</span><br><span class="line">        # 更新Book表</span><br><span class="line">        sql &#x3D; &quot;UPDATE Book SET NumCanBorrow&#x3D;NumCanBorrow+1 WHERE BookId&#x3D;&#39;%s&#39;&quot; % BookId</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        db.commit()</span><br><span class="line">        # 更新User_Book表</span><br><span class="line">        timenow &#x3D; time.strftime(&#39;%Y-%m-%d&#39;, time.localtime(time.time()))</span><br><span class="line">        sql &#x3D; &quot;UPDATE User_Book SET ReturnTime&#x3D;&#39;%s&#39;,BorrowState&#x3D;0 WHERE StudentId&#x3D;&#39;%s&#39; AND BookId&#x3D;&#39;%s&#39; AND BorrowState&#x3D;1&quot; % (timenow,self.studentId,BookId)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        db.commit()</span><br><span class="line">        print(QMessageBox.information(self, &quot;提示&quot;, &quot;归还成功!&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">        self.return_book_success_signal.emit()</span><br><span class="line">        self.close()</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    def bookIdEditChanged(self):</span><br><span class="line">        bookId &#x3D; self.bookIdEdit.text()</span><br><span class="line">        if (bookId &#x3D;&#x3D; &quot;&quot;):</span><br><span class="line">            self.bookNameEdit.clear()</span><br><span class="line">            self.publisherEdit.clear()</span><br><span class="line">            self.authNameEdit.clear()</span><br><span class="line">            self.publishTime.clear()</span><br><span class="line">        db &#x3D; QSqlDatabase.addDatabase(&quot;QSQLITE&quot;)</span><br><span class="line">        db.setDatabaseName(&#39;.&#x2F;db&#x2F;LibraryManagement.db&#39;)</span><br><span class="line">        db.open()</span><br><span class="line">        query &#x3D; QSqlQuery()</span><br><span class="line">        # 在User_Book表中找借阅记录，如果存在借阅，则更新form内容</span><br><span class="line">        sql &#x3D; &quot;SELECT * FROM User_Book WHERE StudentId&#x3D;&#39;%s&#39; AND BookId&#x3D;&#39;%s&#39; AND BorrowState&#x3D;1&quot; % (</span><br><span class="line">            self.studentId, bookId)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        if (query.next()):</span><br><span class="line">            # 更新form内容</span><br><span class="line">            sql &#x3D; &quot;SELECT * FROM Book WHERE BookId&#x3D;&#39;%s&#39;&quot; % (bookId)</span><br><span class="line">            query.exec_(sql)</span><br><span class="line">            # 查询对应书号，如果存在就更新form</span><br><span class="line">            if (query.next()):</span><br><span class="line">                self.bookNameEdit.setText(query.value(0))</span><br><span class="line">                self.authNameEdit.setText(query.value(2))</span><br><span class="line">                self.categoryComboBox.setCurrentText(query.value(3))</span><br><span class="line">                self.publisherEdit.setText(query.value(4))</span><br><span class="line">                self.publishTime.setText(query.value(5))</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app &#x3D; QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(&quot;.&#x2F;images&#x2F;MainWindow_1.png&quot;))</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    mainMindow &#x3D; returnBookDialog(&quot;PB15000135&quot;)</span><br><span class="line">    mainMindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h3><span id="pshi-xian-xiao-guo">实现效果</span><a href="#pshi-xian-xiao-guo" class="header-anchor">#</a></h3><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9blse4aj308e0c5748.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9bkdbcgj308e0bz3yh.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb9bjfb6vj308g0c6glq.jpg" alt="这里写图片描述"></p><h2><span id="pzui-hou-fu-shang-lian-jie">最后附上链接</span><a href="#pzui-hou-fu-shang-lian-jie" class="header-anchor">#</a></h2><p>项目地址：<a href="https://github.com/ycdxsb/LibraryManageDesktopApp" target="_blank" rel="noopener">github仓库链接</a></p>]]></content>
      <categories>
        <category>PyQt5</category>
        <category>图书馆管理系统</category>
      </categories>
      <tags>
        <tag>PyQt5</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5搭建图书馆管理系统（7）——用户管理</title>
    <url>/f6234a21.html</url>
    <content><![CDATA[<h2><span id="pfen-xi">分析</span><a href="#pfen-xi" class="header-anchor">#</a></h2><p>对于用户管理，本来应该包含添加用户，删除用户等操作的，但是为了实现简单，添加用户就用注册代替了，所以所谓用户管理，只是实现了用户的删除操作</p><p>为了删除用户的同时保护数据库的完整性和约束，需要进行以下操作</p><ul><li>从<code>User</code>表删除该用户</li><li>将该用户所借阅的所有书籍全部归还</li></ul><a id="more"></a><h2><span id="pdai-ma-shi-xian">代码实现</span><a href="#pdai-ma-shi-xian" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">import qdarkstyle</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">import time</span><br><span class="line">import sip</span><br><span class="line"></span><br><span class="line">class UserManage(QDialog):</span><br><span class="line">    def __init__(self,parent&#x3D;None):</span><br><span class="line">        super(UserManage, self).__init__(parent)</span><br><span class="line">        self.resize(280, 400)</span><br><span class="line">        self.layout &#x3D; QVBoxLayout()</span><br><span class="line">        self.setLayout(self.layout)</span><br><span class="line">        self.setWindowTitle(&quot;管理用户&quot;)</span><br><span class="line">        # 用户数</span><br><span class="line">        self.userCount &#x3D; 0</span><br><span class="line">        self.oldDeleteId &#x3D; &quot;&quot;</span><br><span class="line">        self.oldDeleteName &#x3D; &quot;&quot;</span><br><span class="line">        self.deleteId &#x3D; &quot;&quot;</span><br><span class="line">        self.deleteName &#x3D; &quot;&quot;</span><br><span class="line">        self.setUpUI()</span><br><span class="line"></span><br><span class="line">    def setUpUI(self):</span><br><span class="line">        self.db &#x3D; QSqlDatabase.addDatabase(&quot;QSQLITE&quot;)</span><br><span class="line">        self.db.setDatabaseName(&#39;.&#x2F;db&#x2F;LibraryManagement.db&#39;)</span><br><span class="line">        self.db.open()</span><br><span class="line">        self.query &#x3D; QSqlQuery()</span><br><span class="line">        self.getResult()</span><br><span class="line"></span><br><span class="line">        # 表格设置</span><br><span class="line">        self.tableWidget &#x3D; QTableWidget()</span><br><span class="line">        self.tableWidget.setRowCount(self.userCount)</span><br><span class="line">        self.tableWidget.setColumnCount(2)</span><br><span class="line">        self.tableWidget.setHorizontalHeaderLabels([&#39;学号&#39;, &#39;姓名&#39;])</span><br><span class="line">        # 不可编辑</span><br><span class="line">        self.tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)</span><br><span class="line">        # 标题可拉伸</span><br><span class="line">        self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)</span><br><span class="line">        # 整行选中</span><br><span class="line">        self.tableWidget.setSelectionBehavior(QAbstractItemView.SelectRows)</span><br><span class="line"></span><br><span class="line">        self.layout.addWidget(self.tableWidget)</span><br><span class="line">        self.setRows()</span><br><span class="line">        self.deleteUserButton &#x3D; QPushButton(&quot;删 除 用 户&quot;)</span><br><span class="line">        hlayout &#x3D; QHBoxLayout()</span><br><span class="line">        hlayout.addWidget(self.deleteUserButton, Qt.AlignHCenter)</span><br><span class="line">        self.widget &#x3D; QWidget()</span><br><span class="line">        self.widget.setLayout(hlayout)</span><br><span class="line">        self.widget.setFixedHeight(48)</span><br><span class="line">        font &#x3D; QFont()</span><br><span class="line">        font.setPixelSize(15)</span><br><span class="line">        self.deleteUserButton.setFixedHeight(36)</span><br><span class="line">        self.deleteUserButton.setFixedWidth(180)</span><br><span class="line">        self.deleteUserButton.setFont(font)</span><br><span class="line">        self.layout.addWidget(self.widget, Qt.AlignCenter)</span><br><span class="line">        # 设置信号</span><br><span class="line">        self.deleteUserButton.clicked.connect(self.deleteUser)</span><br><span class="line">        self.tableWidget.itemClicked.connect(self.getStudentInfo)</span><br><span class="line"></span><br><span class="line">    def getResult(self):</span><br><span class="line">        sql &#x3D; &quot;SELECT StudentId,Name FROM User WHERE IsAdmin&#x3D;0&quot;</span><br><span class="line">        self.query.exec_(sql)</span><br><span class="line">        self.userCount &#x3D; 0;</span><br><span class="line">        while (self.query.next()):</span><br><span class="line">            self.userCount +&#x3D; 1;</span><br><span class="line">        sql &#x3D; &quot;SELECT StudentId,Name FROM User WHERE IsAdmin&#x3D;0&quot;</span><br><span class="line">        self.query.exec_(sql)</span><br><span class="line"></span><br><span class="line">    def setRows(self):</span><br><span class="line">        font &#x3D; QFont()</span><br><span class="line">        font.setPixelSize(14)</span><br><span class="line">        for i in range(self.userCount):</span><br><span class="line">            if (self.query.next()):</span><br><span class="line">                StudentIdItem &#x3D; QTableWidgetItem(self.query.value(0))</span><br><span class="line">                StudentNameItem &#x3D; QTableWidgetItem(self.query.value(1))</span><br><span class="line">                StudentIdItem.setFont(font)</span><br><span class="line">                StudentNameItem.setFont(font)</span><br><span class="line">                StudentIdItem.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)</span><br><span class="line">                StudentNameItem.setTextAlignment(Qt.AlignHCenter | Qt.AlignVCenter)</span><br><span class="line">                self.tableWidget.setItem(i, 0, StudentIdItem)</span><br><span class="line">                self.tableWidget.setItem(i, 1, StudentNameItem)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    def getStudentInfo(self, item):</span><br><span class="line">        row &#x3D; self.tableWidget.currentIndex().row()</span><br><span class="line">        self.tableWidget.verticalScrollBar().setSliderPosition(row)</span><br><span class="line">        self.getResult()</span><br><span class="line">        i &#x3D; 0</span><br><span class="line">        while (self.query.next() and i !&#x3D; row):</span><br><span class="line">            i &#x3D; i + 1</span><br><span class="line">        self.oldDeleteId &#x3D; self.deleteId</span><br><span class="line">        self.oldDeleteName &#x3D; self.deleteName</span><br><span class="line">        self.deleteId &#x3D; self.query.value(0)</span><br><span class="line">        self.deleteName &#x3D; self.query.value(1)</span><br><span class="line"></span><br><span class="line">    def deleteUser(self):</span><br><span class="line">        if (self.deleteId &#x3D;&#x3D; &quot;&quot; and self.deleteName &#x3D;&#x3D; &quot;&quot;):</span><br><span class="line">            print(QMessageBox.warning(self, &quot;警告&quot;, &quot;请选中要删除的用户&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">            return</span><br><span class="line">        elif (self.deleteId &#x3D;&#x3D; self.oldDeleteId and self.deleteName &#x3D;&#x3D; self.oldDeleteName):</span><br><span class="line">            print(QMessageBox.warning(self, &quot;警告&quot;, &quot;请选中要删除的用户&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">            return</span><br><span class="line">        if (QMessageBox.information(self, &quot;提醒&quot;, &quot;删除用户:%s,%s\n用户一经删除将无法恢复，是否继续?&quot; % (self.deleteId, self.deleteName),</span><br><span class="line">                                    QMessageBox.Yes | QMessageBox.No,</span><br><span class="line">                                    QMessageBox.No) &#x3D;&#x3D; QMessageBox.No):</span><br><span class="line">            return</span><br><span class="line">        # 从User表删除用户</span><br><span class="line">        sql &#x3D; &quot;DELETE FROM User WHERE StudentId&#x3D;&#39;%s&#39;&quot; % (self.deleteId)</span><br><span class="line">        self.query.exec_(sql)</span><br><span class="line">        self.db.commit()</span><br><span class="line">        # 归还所有书籍</span><br><span class="line">        sql &#x3D; &quot;SELECT * FROM User_Book  WHERE StudentId&#x3D;&#39;%s&#39; AND BorrowState&#x3D;1&quot; % self.deleteId</span><br><span class="line">        self.query.exec_(sql)</span><br><span class="line">        timenow &#x3D; time.strftime(&#39;%Y-%m-%d&#39;, time.localtime(time.time()))</span><br><span class="line">        updateQuery&#x3D;QSqlQuery()</span><br><span class="line">        while (self.query.next()):</span><br><span class="line">            bookId&#x3D;self.query.value(1)</span><br><span class="line">            sql&#x3D;&quot;UPDATE Book SET NumCanBorrow&#x3D;NumCanBorrow+1 WHERE BookId&#x3D;&#39;%s&#39;&quot;% bookId</span><br><span class="line">            updateQuery.exec_(sql)</span><br><span class="line">            self.db.commit()</span><br><span class="line">        sql&#x3D;&quot;UPDATE User_Book SET ReturnTime&#x3D;&#39;%s&#39;,BorrowState&#x3D;0 WHERE StudentId&#x3D;&#39;%s&#39; AND BorrowState&#x3D;1&quot;%(timenow,self.deleteId)</span><br><span class="line">        self.query.exec_(sql)</span><br><span class="line">        self.db.commit()</span><br><span class="line">        print(QMessageBox.information(self,&quot;提醒&quot;,&quot;删除用户成功!&quot;,QMessageBox.Yes,QMessageBox.Yes))</span><br><span class="line">        self.updateUI()</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    def updateUI(self):</span><br><span class="line">        self.getResult()</span><br><span class="line">        self.layout.removeWidget(self.widget)</span><br><span class="line">        self.layout.removeWidget(self.tableWidget)</span><br><span class="line">        sip.delete(self.widget)</span><br><span class="line">        sip.delete(self.tableWidget)</span><br><span class="line">        # 表格设置</span><br><span class="line">        self.tableWidget &#x3D; QTableWidget()</span><br><span class="line">        self.tableWidget.setRowCount(self.userCount)</span><br><span class="line">        self.tableWidget.setColumnCount(2)</span><br><span class="line">        self.tableWidget.setHorizontalHeaderLabels([&#39;学号&#39;, &#39;姓名&#39;])</span><br><span class="line">        # 不可编辑</span><br><span class="line">        self.tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)</span><br><span class="line">        # 标题可拉伸</span><br><span class="line">        self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)</span><br><span class="line">        # 整行选中</span><br><span class="line">        self.tableWidget.setSelectionBehavior(QAbstractItemView.SelectRows)</span><br><span class="line"></span><br><span class="line">        self.layout.addWidget(self.tableWidget)</span><br><span class="line">        self.setRows()</span><br><span class="line">        self.deleteUserButton &#x3D; QPushButton(&quot;删 除 用 户&quot;)</span><br><span class="line">        hlayout &#x3D; QHBoxLayout()</span><br><span class="line">        hlayout.addWidget(self.deleteUserButton, Qt.AlignHCenter)</span><br><span class="line">        self.widget &#x3D; QWidget()</span><br><span class="line">        self.widget.setLayout(hlayout)</span><br><span class="line">        self.widget.setFixedHeight(48)</span><br><span class="line">        font &#x3D; QFont()</span><br><span class="line">        font.setPixelSize(15)</span><br><span class="line">        self.deleteUserButton.setFixedHeight(36)</span><br><span class="line">        self.deleteUserButton.setFixedWidth(180)</span><br><span class="line">        self.deleteUserButton.setFont(font)</span><br><span class="line">        self.layout.addWidget(self.widget, Qt.AlignCenter)</span><br><span class="line">        # 设置信号</span><br><span class="line">        self.deleteUserButton.clicked.connect(self.deleteUser)</span><br><span class="line">        self.tableWidget.itemClicked.connect(self.getStudentInfo)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app &#x3D; QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(&quot;.&#x2F;images&#x2F;MainWindow_1.png&quot;))</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    mainMindow &#x3D; UserManage()</span><br><span class="line">    mainMindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2><span id="pdai-ma-fen-xi">代码分析</span><a href="#pdai-ma-fen-xi" class="header-anchor">#</a></h2><p>这里使用	<code>QtableWidget</code>来展示当前所有的用户的学号以及姓名<br>步骤如下：</p><ul><li>展示所有用户</li><li>管理员选中一行</li><li>点击删除用户</li><li>提醒时候确认删除</li><li>删除，同时刷新展示的数据</li></ul><h2><span id="pshi-xian-xiao-guo">实现效果</span><a href="#pshi-xian-xiao-guo" class="header-anchor">#</a></h2><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb94es1dfj307w0c2748.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb94e5jjxj307u0c20su.jpg" alt="这里写图片描述"></p><h2><span id="pzui-hou-fu-shang-lian-jie">最后附上链接</span><a href="#pzui-hou-fu-shang-lian-jie" class="header-anchor">#</a></h2><p>项目地址：<a href="https://github.com/ycdxsb/LibraryManageDesktopApp" target="_blank" rel="noopener">github仓库链接</a></p>]]></content>
      <categories>
        <category>PyQt5</category>
        <category>图书馆管理系统</category>
      </categories>
      <tags>
        <tag>PyQt5</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5搭建图书馆管理系统（6）——书籍信息查询实现</title>
    <url>/ec62120c.html</url>
    <content><![CDATA[<h2><span id="pfen-xi">分析</span><a href="#pfen-xi" class="header-anchor">#</a></h2><p>从数据库的设计可以看到，在这里我们只需要使用Book表的数据，就可以实现书籍信息的查询了</p><p>在这个功能的实现上，可以说花了我比较大的心思了，主要实现了这些功能：</p><ul><li>动态刷新，也就是说当管理员删除或者添加书籍，用户借阅归还书籍的时候动态刷新这个TableView</li><li>模糊匹配</li><li>按书名，作者，书号，出版社查询</li><li>跳转页，翻页</li></ul><a id="more"></a><h2><span id="pdai-ma-shi-xian">代码实现</span><a href="#pdai-ma-shi-xian" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import Qt</span><br><span class="line">import qdarkstyle</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BookStorageViewer(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(BookStorageViewer, self).__init__()</span><br><span class="line">        self.resize(700, 500)</span><br><span class="line">        self.setWindowTitle(&quot;欢迎使用图书馆管理系统&quot;)</span><br><span class="line">        # 查询模型</span><br><span class="line">        self.queryModel &#x3D; None</span><br><span class="line">        # 数据表</span><br><span class="line">        self.tableView &#x3D; None</span><br><span class="line">        # 当前页</span><br><span class="line">        self.currentPage &#x3D; 0</span><br><span class="line">        # 总页数</span><br><span class="line">        self.totalPage &#x3D; 0</span><br><span class="line">        # 总记录数</span><br><span class="line">        self.totalRecord &#x3D; 0</span><br><span class="line">        # 每页数据数</span><br><span class="line">        self.pageRecord &#x3D; 10</span><br><span class="line">        self.setUpUI()</span><br><span class="line"></span><br><span class="line">    def setUpUI(self):</span><br><span class="line">        self.layout &#x3D; QVBoxLayout()</span><br><span class="line">        self.Hlayout1 &#x3D; QHBoxLayout()</span><br><span class="line">        self.Hlayout2 &#x3D; QHBoxLayout()</span><br><span class="line"></span><br><span class="line">        # Hlayout1控件的初始化</span><br><span class="line">        self.searchEdit &#x3D; QLineEdit()</span><br><span class="line">        self.searchEdit.setFixedHeight(32)</span><br><span class="line">        font &#x3D; QFont()</span><br><span class="line">        font.setPixelSize(15)</span><br><span class="line">        self.searchEdit.setFont(font)</span><br><span class="line"></span><br><span class="line">        self.searchButton &#x3D; QPushButton(&quot;查询&quot;)</span><br><span class="line">        self.searchButton.setFixedHeight(32)</span><br><span class="line">        self.searchButton.setFont(font)</span><br><span class="line">        self.searchButton.setIcon(QIcon(QPixmap(&quot;.&#x2F;images&#x2F;search.png&quot;)))</span><br><span class="line"></span><br><span class="line">        self.condisionComboBox &#x3D; QComboBox()</span><br><span class="line">        searchCondision &#x3D; [&#39;按书名查询&#39;, &#39;按书号查询&#39;, &#39;按作者查询&#39;, &#39;按分类查询&#39;, &#39;按出版社查询&#39;]</span><br><span class="line">        self.condisionComboBox.setFixedHeight(32)</span><br><span class="line">        self.condisionComboBox.setFont(font)</span><br><span class="line">        self.condisionComboBox.addItems(searchCondision)</span><br><span class="line"></span><br><span class="line">        self.Hlayout1.addWidget(self.searchEdit)</span><br><span class="line">        self.Hlayout1.addWidget(self.searchButton)</span><br><span class="line">        self.Hlayout1.addWidget(self.condisionComboBox)</span><br><span class="line"></span><br><span class="line">        # Hlayout2初始化</span><br><span class="line">        self.jumpToLabel &#x3D; QLabel(&quot;跳转到第&quot;)</span><br><span class="line">        self.pageEdit &#x3D; QLineEdit()</span><br><span class="line">        self.pageEdit.setFixedWidth(30)</span><br><span class="line">        s &#x3D; &quot;&#x2F;&quot; + str(self.totalPage) + &quot;页&quot;</span><br><span class="line">        self.pageLabel &#x3D; QLabel(s)</span><br><span class="line">        self.jumpToButton &#x3D; QPushButton(&quot;跳转&quot;)</span><br><span class="line">        self.prevButton &#x3D; QPushButton(&quot;前一页&quot;)</span><br><span class="line">        self.prevButton.setFixedWidth(60)</span><br><span class="line">        self.backButton &#x3D; QPushButton(&quot;后一页&quot;)</span><br><span class="line">        self.backButton.setFixedWidth(60)</span><br><span class="line"></span><br><span class="line">        Hlayout &#x3D; QHBoxLayout()</span><br><span class="line">        Hlayout.addWidget(self.jumpToLabel)</span><br><span class="line">        Hlayout.addWidget(self.pageEdit)</span><br><span class="line">        Hlayout.addWidget(self.pageLabel)</span><br><span class="line">        Hlayout.addWidget(self.jumpToButton)</span><br><span class="line">        Hlayout.addWidget(self.prevButton)</span><br><span class="line">        Hlayout.addWidget(self.backButton)</span><br><span class="line">        widget &#x3D; QWidget()</span><br><span class="line">        widget.setLayout(Hlayout)</span><br><span class="line">        widget.setFixedWidth(300)</span><br><span class="line">        self.Hlayout2.addWidget(widget)</span><br><span class="line"></span><br><span class="line">        # tableView</span><br><span class="line">        # 序号，书名，书号，作者，分类，出版社，出版时间，库存，剩余可借</span><br><span class="line">        self.db &#x3D; QSqlDatabase.addDatabase(&quot;QSQLITE&quot;)</span><br><span class="line">        self.db.setDatabaseName(&#39;.&#x2F;db&#x2F;LibraryManagement.db&#39;)</span><br><span class="line">        self.db.open()</span><br><span class="line">        self.tableView &#x3D; QTableView()</span><br><span class="line">        self.tableView.horizontalHeader().setStretchLastSection(True)</span><br><span class="line">        self.tableView.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)</span><br><span class="line">        self.tableView.setEditTriggers(QAbstractItemView.NoEditTriggers)</span><br><span class="line">        self.queryModel &#x3D; QSqlQueryModel()</span><br><span class="line">        self.searchButtonClicked()</span><br><span class="line">        self.tableView.setModel(self.queryModel)</span><br><span class="line"></span><br><span class="line">        self.queryModel.setHeaderData(0, Qt.Horizontal, &quot;书名&quot;)</span><br><span class="line">        self.queryModel.setHeaderData(1, Qt.Horizontal, &quot;书号&quot;)</span><br><span class="line">        self.queryModel.setHeaderData(2, Qt.Horizontal, &quot;作者&quot;)</span><br><span class="line">        self.queryModel.setHeaderData(3, Qt.Horizontal, &quot;分类&quot;)</span><br><span class="line">        self.queryModel.setHeaderData(4, Qt.Horizontal, &quot;出版社&quot;)</span><br><span class="line">        self.queryModel.setHeaderData(5, Qt.Horizontal, &quot;出版时间&quot;)</span><br><span class="line">        self.queryModel.setHeaderData(6, Qt.Horizontal, &quot;库存&quot;)</span><br><span class="line">        self.queryModel.setHeaderData(7, Qt.Horizontal, &quot;剩余可借&quot;)</span><br><span class="line">        self.queryModel.setHeaderData(8, Qt.Horizontal, &quot;总借阅次数&quot;)</span><br><span class="line"></span><br><span class="line">        self.layout.addLayout(self.Hlayout1)</span><br><span class="line">        self.layout.addWidget(self.tableView)</span><br><span class="line">        self.layout.addLayout(self.Hlayout2)</span><br><span class="line">        self.setLayout(self.layout)</span><br><span class="line">        self.searchButton.clicked.connect(self.searchButtonClicked)</span><br><span class="line">        self.prevButton.clicked.connect(self.prevButtonClicked)</span><br><span class="line">        self.backButton.clicked.connect(self.backButtonClicked)</span><br><span class="line">        self.jumpToButton.clicked.connect(self.jumpToButtonClicked)</span><br><span class="line">        self.searchEdit.returnPressed.connect(self.searchButtonClicked)</span><br><span class="line"></span><br><span class="line">    def setButtonStatus(self):</span><br><span class="line">        if(self.currentPage&#x3D;&#x3D;self.totalPage):</span><br><span class="line">            self.prevButton.setEnabled(True)</span><br><span class="line">            self.backButton.setEnabled(False)</span><br><span class="line">        if(self.currentPage&#x3D;&#x3D;1):</span><br><span class="line">            self.backButton.setEnabled(True)</span><br><span class="line">            self.prevButton.setEnabled(False)</span><br><span class="line">        if(self.currentPage&lt;self.totalPage and self.currentPage&gt;1):</span><br><span class="line">            self.prevButton.setEnabled(True)</span><br><span class="line">            self.backButton.setEnabled(True)</span><br><span class="line"></span><br><span class="line">    # 得到记录数</span><br><span class="line">    def getTotalRecordCount(self):</span><br><span class="line">        self.queryModel.setQuery(&quot;SELECT * FROM Book&quot;)</span><br><span class="line">        self.totalRecord &#x3D; self.queryModel.rowCount()</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    # 得到总页数</span><br><span class="line">    def getPageCount(self):</span><br><span class="line">        self.getTotalRecordCount()</span><br><span class="line">        # 上取整</span><br><span class="line">        self.totalPage &#x3D; int((self.totalRecord + self.pageRecord - 1) &#x2F; self.pageRecord)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    # 分页记录查询</span><br><span class="line">    def recordQuery(self, index):</span><br><span class="line">        queryCondition &#x3D; &quot;&quot;</span><br><span class="line">        conditionChoice &#x3D; self.condisionComboBox.currentText()</span><br><span class="line">        if (conditionChoice &#x3D;&#x3D; &quot;按书名查询&quot;):</span><br><span class="line">            conditionChoice &#x3D; &#39;BookName&#39;</span><br><span class="line">        elif (conditionChoice &#x3D;&#x3D; &quot;按书号查询&quot;):</span><br><span class="line">            conditionChoice &#x3D; &#39;BookId&#39;</span><br><span class="line">        elif (conditionChoice &#x3D;&#x3D; &quot;按作者查询&quot;):</span><br><span class="line">            conditionChoice &#x3D; &#39;Auth&#39;</span><br><span class="line">        elif (conditionChoice &#x3D;&#x3D; &#39;按分类查询&#39;):</span><br><span class="line">            conditionChoice &#x3D; &#39;Category&#39;</span><br><span class="line">        else:</span><br><span class="line">            conditionChoice &#x3D; &#39;Publisher&#39;</span><br><span class="line"></span><br><span class="line">        if (self.searchEdit.text() &#x3D;&#x3D; &quot;&quot;):</span><br><span class="line">            queryCondition &#x3D; &quot;select * from Book&quot;</span><br><span class="line">            self.queryModel.setQuery(queryCondition)</span><br><span class="line">            self.totalRecord &#x3D; self.queryModel.rowCount()</span><br><span class="line">            self.totalPage &#x3D; int((self.totalRecord + self.pageRecord - 1) &#x2F; self.pageRecord)</span><br><span class="line">            label &#x3D; &quot;&#x2F;&quot; + str(int(self.totalPage)) + &quot;页&quot;</span><br><span class="line">            self.pageLabel.setText(label)</span><br><span class="line">            queryCondition &#x3D; (&quot;select * from Book ORDER BY %s  limit %d,%d &quot; % (conditionChoice,index, self.pageRecord))</span><br><span class="line">            self.queryModel.setQuery(queryCondition)</span><br><span class="line">            self.setButtonStatus()</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        # 得到模糊查询条件</span><br><span class="line">        temp &#x3D; self.searchEdit.text()</span><br><span class="line">        s &#x3D; &#39;%&#39;</span><br><span class="line">        for i in range(0, len(temp)):</span><br><span class="line">            s &#x3D; s + temp[i] + &quot;%&quot;</span><br><span class="line">        queryCondition &#x3D; (&quot;SELECT * FROM Book WHERE %s LIKE &#39;%s&#39; ORDER BY %s &quot; % (</span><br><span class="line">            conditionChoice, s,conditionChoice))</span><br><span class="line">        self.queryModel.setQuery(queryCondition)</span><br><span class="line">        self.totalRecord &#x3D; self.queryModel.rowCount()</span><br><span class="line">        # 当查询无记录时的操作</span><br><span class="line">        if(self.totalRecord&#x3D;&#x3D;0):</span><br><span class="line">            print(QMessageBox.information(self,&quot;提醒&quot;,&quot;查询无记录&quot;,QMessageBox.Yes,QMessageBox.Yes))</span><br><span class="line">            queryCondition &#x3D; &quot;select * from Book&quot;</span><br><span class="line">            self.queryModel.setQuery(queryCondition)</span><br><span class="line">            self.totalRecord &#x3D; self.queryModel.rowCount()</span><br><span class="line">            self.totalPage &#x3D; int((self.totalRecord + self.pageRecord - 1) &#x2F; self.pageRecord)</span><br><span class="line">            label &#x3D; &quot;&#x2F;&quot; + str(int(self.totalPage)) + &quot;页&quot;</span><br><span class="line">            self.pageLabel.setText(label)</span><br><span class="line">            queryCondition &#x3D; (&quot;select * from Book ORDER BY %s  limit %d,%d &quot; % (conditionChoice,index, self.pageRecord))</span><br><span class="line">            self.queryModel.setQuery(queryCondition)</span><br><span class="line">            self.setButtonStatus()</span><br><span class="line">            return</span><br><span class="line">        self.totalPage &#x3D; int((self.totalRecord + self.pageRecord - 1) &#x2F; self.pageRecord)</span><br><span class="line">        label &#x3D; &quot;&#x2F;&quot; + str(int(self.totalPage)) + &quot;页&quot;</span><br><span class="line">        self.pageLabel.setText(label)</span><br><span class="line">        queryCondition &#x3D; (&quot;SELECT * FROM Book WHERE %s LIKE &#39;%s&#39; ORDER BY %s LIMIT %d,%d &quot; % (</span><br><span class="line">            conditionChoice, s, conditionChoice,index, self.pageRecord))</span><br><span class="line">        self.queryModel.setQuery(queryCondition)</span><br><span class="line">        self.setButtonStatus()</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    # 点击查询</span><br><span class="line">    def searchButtonClicked(self):</span><br><span class="line">        self.currentPage &#x3D; 1</span><br><span class="line">        self.pageEdit.setText(str(self.currentPage))</span><br><span class="line">        self.getPageCount()</span><br><span class="line">        s &#x3D; &quot;&#x2F;&quot; + str(int(self.totalPage)) + &quot;页&quot;</span><br><span class="line">        self.pageLabel.setText(s)</span><br><span class="line">        index &#x3D; (self.currentPage - 1) * self.pageRecord</span><br><span class="line">        self.recordQuery(index)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    # 向前翻页</span><br><span class="line">    def prevButtonClicked(self):</span><br><span class="line">        self.currentPage -&#x3D; 1</span><br><span class="line">        if (self.currentPage &lt;&#x3D; 1):</span><br><span class="line">            self.currentPage &#x3D; 1</span><br><span class="line">        self.pageEdit.setText(str(self.currentPage))</span><br><span class="line">        index &#x3D; (self.currentPage - 1) * self.pageRecord</span><br><span class="line">        self.recordQuery(index)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    # 向后翻页</span><br><span class="line">    def backButtonClicked(self):</span><br><span class="line">        self.currentPage +&#x3D; 1</span><br><span class="line">        if (self.currentPage &gt;&#x3D; int(self.totalPage)):</span><br><span class="line">            self.currentPage &#x3D; int(self.totalPage)</span><br><span class="line">        self.pageEdit.setText(str(self.currentPage))</span><br><span class="line">        index &#x3D; (self.currentPage - 1) * self.pageRecord</span><br><span class="line">        self.recordQuery(index)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    # 点击跳转</span><br><span class="line">    def jumpToButtonClicked(self):</span><br><span class="line">        if (self.pageEdit.text().isdigit()):</span><br><span class="line">            self.currentPage &#x3D; int(self.pageEdit.text())</span><br><span class="line">            if (self.currentPage &gt; self.totalPage):</span><br><span class="line">                self.currentPage &#x3D; self.totalPage</span><br><span class="line">            if (self.currentPage &lt;&#x3D; 1):</span><br><span class="line">                self.currentPage &#x3D; 1</span><br><span class="line">        else:</span><br><span class="line">            self.currentPage &#x3D; 1</span><br><span class="line">        index &#x3D; (self.currentPage - 1) * self.pageRecord</span><br><span class="line">        self.pageEdit.setText(str(self.currentPage))</span><br><span class="line">        self.recordQuery(index)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app &#x3D; QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(&quot;.&#x2F;images&#x2F;MainWindow_1.png&quot;))</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    mainMindow &#x3D; BookStorageViewer()</span><br><span class="line">    mainMindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2><span id="pdai-ma-fen-xi">代码分析</span><a href="#pdai-ma-fen-xi" class="header-anchor">#</a></h2><ul><li>主要使用了 Qt自带的<code>QTableView</code>和<code>QSqlQueryModel</code>实现了查询和展示结果</li><li>也有得到记录数，总页数，点击查询，跳转，前一页，后一页的函数，这些都很好看懂，同时还设置了按钮的可用性</li><li>分页记录查询函数是这里面最主要的一个函数，首先看查询种类 ，分别有判断为空 ，模糊查询，查询无果的处理</li><li>在跳转前有对输入数据的检测合法与否</li></ul><blockquote><p>这里还没有实现动态刷新，因为这个功能是用其他部件信号传输实现的</p></blockquote><h2><span id="pshi-xian-xiao-guo">实现效果</span><a href="#pshi-xian-xiao-guo" class="header-anchor">#</a></h2><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb8zx44e8j30iv0f2q3y.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb8zxv2mdj30it0ergmh.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb8zyau3bj30iv0ezgme.jpg" alt="这里写图片描述"></p><h2><span id="pzui-hou-fu-shang-lian-jie">最后附上链接</span><a href="#pzui-hou-fu-shang-lian-jie" class="header-anchor">#</a></h2><p>项目地址：<a href="https://github.com/ycdxsb/LibraryManageDesktopApp" target="_blank" rel="noopener">github仓库链接</a></p>]]></content>
      <categories>
        <category>PyQt5</category>
        <category>图书馆管理系统</category>
      </categories>
      <tags>
        <tag>PyQt5</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5搭建图书馆管理系统（5）——添加/淘汰书籍对话框设计</title>
    <url>/65cd36fc.html</url>
    <content><![CDATA[<h2><span id="pfen-xi">分析：</span><a href="#pfen-xi" class="header-anchor">#</a></h2><p>在图书管管理系统主页上，我们有添加和淘汰的功能 ，通过按钮弹出对话框进行添加和淘汰书籍，这里我们就来完成一下这两个功能。</p><a id="more"></a><h2><span id="ptian-jia-tu-shu-gong-neng">添加图书功能</span><a href="#ptian-jia-tu-shu-gong-neng" class="header-anchor">#</a></h2><blockquote><p>添加图书，需要管理员添加以下信息</p></blockquote><ul><li>书名</li><li>书号</li><li>作者名</li><li>分类（分类已经规定，只需要选择对应的种类就可以了）</li><li>出版社</li><li>出版日期</li><li>添加的数量</li></ul><h3><span id="ptian-jia-tu-shu-dui-hua-kuang-dai-ma">添加图书对话框代码</span><a href="#ptian-jia-tu-shu-dui-hua-kuang-dai-ma" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">import qdarkstyle</span><br><span class="line">import time</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class addBookDialog(QDialog):</span><br><span class="line">    add_book_success_signal &#x3D; pyqtSignal()</span><br><span class="line"></span><br><span class="line">    def __init__(self, parent&#x3D;None):</span><br><span class="line">        super(addBookDialog, self).__init__(parent)</span><br><span class="line">        self.setUpUI()</span><br><span class="line">        self.setWindowModality(Qt.WindowModal)</span><br><span class="line">        self.setWindowTitle(&quot;添加书籍&quot;)</span><br><span class="line"></span><br><span class="line">    def setUpUI(self):</span><br><span class="line">        # 书名，书号，作者，分类，添加数量.出版社,出版日期</span><br><span class="line">        # 书籍分类：哲学类、社会科学类、政治类、法律类、军事类、经济类、文化类、教育类、体育类、语言文字类、艺术类、历史类、地理类、天文学类、生物学类、医学卫生类、农业类</span><br><span class="line">        BookCategory &#x3D; [&quot;哲学&quot;, &quot;社会科学&quot;, &quot;政治&quot;, &quot;法律&quot;, &quot;军事&quot;, &quot;经济&quot;, &quot;文化&quot;, &quot;教育&quot;, &quot;体育&quot;, &quot;语言文字&quot;, &quot;艺术&quot;, &quot;历史&quot;</span><br><span class="line">            , &quot;地理&quot;, &quot;天文学&quot;, &quot;生物学&quot;, &quot;医学卫生&quot;, &quot;农业&quot;]</span><br><span class="line">        self.resize(300, 400)</span><br><span class="line">        self.layout &#x3D; QFormLayout()</span><br><span class="line">        self.setLayout(self.layout)</span><br><span class="line"></span><br><span class="line">        # Label控件</span><br><span class="line">        self.titlelabel &#x3D; QLabel(&quot;  添加书籍&quot;)</span><br><span class="line">        self.bookNameLabel &#x3D; QLabel(&quot;书    名:&quot;)</span><br><span class="line">        self.bookIdLabel &#x3D; QLabel(&quot;书    号:&quot;)</span><br><span class="line">        self.authNameLabel &#x3D; QLabel(&quot;作    者:&quot;)</span><br><span class="line">        self.categoryLabel &#x3D; QLabel(&quot;分    类:&quot;)</span><br><span class="line">        self.publisherLabel &#x3D; QLabel(&quot;出 版 社:&quot;)</span><br><span class="line">        self.publishDateLabel &#x3D; QLabel(&quot;出版日期:&quot;)</span><br><span class="line">        self.addNumLabel &#x3D; QLabel(&quot;数    量:&quot;)</span><br><span class="line"></span><br><span class="line">        # button控件</span><br><span class="line">        self.addBookButton &#x3D; QPushButton(&quot;添 加&quot;)</span><br><span class="line"></span><br><span class="line">        # lineEdit控件</span><br><span class="line">        self.bookNameEdit &#x3D; QLineEdit()</span><br><span class="line">        self.bookIdEdit &#x3D; QLineEdit()</span><br><span class="line">        self.authNameEdit &#x3D; QLineEdit()</span><br><span class="line">        self.categoryComboBox &#x3D; QComboBox()</span><br><span class="line">        self.categoryComboBox.addItems(BookCategory)</span><br><span class="line">        self.publisherEdit &#x3D; QLineEdit()</span><br><span class="line">        self.publishTime &#x3D; QDateTimeEdit()</span><br><span class="line">        self.publishTime.setDisplayFormat(&quot;yyyy-MM-dd&quot;)</span><br><span class="line">        # self.publishDateEdit &#x3D; QLineEdit()</span><br><span class="line">        self.addNumEdit &#x3D; QLineEdit()</span><br><span class="line"></span><br><span class="line">        self.bookNameEdit.setMaxLength(10)</span><br><span class="line">        self.bookIdEdit.setMaxLength(6)</span><br><span class="line">        self.authNameEdit.setMaxLength(10)</span><br><span class="line">        self.publisherEdit.setMaxLength(10)</span><br><span class="line">        self.addNumEdit.setMaxLength(12)</span><br><span class="line">        self.addNumEdit.setValidator(QIntValidator())</span><br><span class="line"></span><br><span class="line">        # 添加进formlayout</span><br><span class="line">        self.layout.addRow(&quot;&quot;, self.titlelabel)</span><br><span class="line">        self.layout.addRow(self.bookNameLabel, self.bookNameEdit)</span><br><span class="line">        self.layout.addRow(self.bookIdLabel, self.bookIdEdit)</span><br><span class="line">        self.layout.addRow(self.authNameLabel, self.authNameEdit)</span><br><span class="line">        self.layout.addRow(self.categoryLabel, self.categoryComboBox)</span><br><span class="line">        self.layout.addRow(self.publisherLabel, self.publisherEdit)</span><br><span class="line">        self.layout.addRow(self.publishDateLabel, self.publishTime)</span><br><span class="line">        self.layout.addRow(self.addNumLabel, self.addNumEdit)</span><br><span class="line">        self.layout.addRow(&quot;&quot;, self.addBookButton)</span><br><span class="line"></span><br><span class="line">        # 设置字体</span><br><span class="line">        font &#x3D; QFont()</span><br><span class="line">        font.setPixelSize(20)</span><br><span class="line">        self.titlelabel.setFont(font)</span><br><span class="line">        font.setPixelSize(14)</span><br><span class="line">        self.bookNameLabel.setFont(font)</span><br><span class="line">        self.bookIdLabel.setFont(font)</span><br><span class="line">        self.authNameLabel.setFont(font)</span><br><span class="line">        self.categoryLabel.setFont(font)</span><br><span class="line">        self.publisherLabel.setFont(font)</span><br><span class="line">        self.publishDateLabel.setFont(font)</span><br><span class="line">        self.addNumLabel.setFont(font)</span><br><span class="line"></span><br><span class="line">        self.bookNameEdit.setFont(font)</span><br><span class="line">        self.bookIdEdit.setFont(font)</span><br><span class="line">        self.authNameEdit.setFont(font)</span><br><span class="line">        self.publisherEdit.setFont(font)</span><br><span class="line">        self.publishTime.setFont(font)</span><br><span class="line">        self.categoryComboBox.setFont(font)</span><br><span class="line">        self.addNumEdit.setFont(font)</span><br><span class="line"></span><br><span class="line">        # button设置</span><br><span class="line">        font.setPixelSize(16)</span><br><span class="line">        self.addBookButton.setFont(font)</span><br><span class="line">        self.addBookButton.setFixedHeight(32)</span><br><span class="line">        self.addBookButton.setFixedWidth(140)</span><br><span class="line"></span><br><span class="line">        # 设置间距</span><br><span class="line">        self.titlelabel.setMargin(8)</span><br><span class="line">        self.layout.setVerticalSpacing(10)</span><br><span class="line"></span><br><span class="line">        self.addBookButton.clicked.connect(self.addBookButtonCicked)</span><br><span class="line"></span><br><span class="line">    def addBookButtonCicked(self):</span><br><span class="line">        bookName &#x3D; self.bookNameEdit.text()</span><br><span class="line">        bookId &#x3D; self.bookIdEdit.text()</span><br><span class="line">        authName &#x3D; self.authNameEdit.text()</span><br><span class="line">        bookCategory &#x3D; self.categoryComboBox.currentText()</span><br><span class="line">        publisher &#x3D; self.publisherEdit.text()</span><br><span class="line">        publishTime &#x3D; self.publishTime.text()</span><br><span class="line">        addBookNum &#x3D; self.addNumEdit.text()</span><br><span class="line">        if (</span><br><span class="line">                bookName &#x3D;&#x3D; &quot;&quot; or bookId &#x3D;&#x3D; &quot;&quot; or authName &#x3D;&#x3D; &quot;&quot; or bookCategory &#x3D;&#x3D; &quot;&quot; or publisher &#x3D;&#x3D; &quot;&quot; or publishTime &#x3D;&#x3D; &quot;&quot; or addBookNum &#x3D;&#x3D; &quot;&quot;):</span><br><span class="line">            print(QMessageBox.warning(self, &quot;警告&quot;, &quot;有字段为空，添加失败&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">            return</span><br><span class="line">        else:</span><br><span class="line">            addBookNum &#x3D; int(addBookNum)</span><br><span class="line">            db &#x3D; QSqlDatabase.addDatabase(&quot;QSQLITE&quot;)</span><br><span class="line">            db.setDatabaseName(&#39;.&#x2F;db&#x2F;LibraryManagement.db&#39;)</span><br><span class="line">            db.open()</span><br><span class="line">            query &#x3D; QSqlQuery()</span><br><span class="line">            # 如果已存在，则update Book表的现存量，剩余可借量，不存在，则insert Book表，同时insert buyordrop表</span><br><span class="line">            sql &#x3D; &quot;SELECT * FROM Book WHERE BookId&#x3D;&#39;%s&#39;&quot; % (bookId)</span><br><span class="line">            query.exec_(sql)</span><br><span class="line">            if (query.next()):</span><br><span class="line">                sql &#x3D; &quot;UPDATE Book SET NumStorage&#x3D;NumStorage+%d,NumCanBorrow&#x3D;NumCanBorrow+%d WHERE BookId&#x3D;&#39;%s&#39;&quot; % (</span><br><span class="line">                    addBookNum, addBookNum, bookId)</span><br><span class="line">            else:</span><br><span class="line">                sql &#x3D; &quot;INSERT INTO book VALUES (&#39;%s&#39;,&#39;%s&#39;,&#39;%s&#39;,&#39;%s&#39;,&#39;%s&#39;,&#39;%s&#39;,%d,%d,0)&quot; % (</span><br><span class="line">                    bookName, bookId, authName, bookCategory, publisher, publishTime, addBookNum, addBookNum)</span><br><span class="line">            query.exec_(sql)</span><br><span class="line">            db.commit()</span><br><span class="line">            # 插入droporinsert表</span><br><span class="line">            timenow &#x3D; time.strftime(&#39;%Y-%m-%d&#39;, time.localtime(time.time()))</span><br><span class="line">            sql &#x3D; &quot;INSERT INTO buyordrop VALUES (&#39;%s&#39;,&#39;%s&#39;,1,%d)&quot; % (bookId, timenow, addBookNum)</span><br><span class="line">            query.exec_(sql)</span><br><span class="line">            db.commit()</span><br><span class="line">            print(QMessageBox.information(self, &quot;提示&quot;, &quot;添加书籍成功!&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">            self.add_book_success_signal.emit()</span><br><span class="line">            self.close()</span><br><span class="line">            self.clearEdit()</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    def clearEdit(self):</span><br><span class="line">        self.bookNameEdit.clear()</span><br><span class="line">        self.bookIdEdit.clear()</span><br><span class="line">        self.authNameEdit.clear()</span><br><span class="line">        self.addNumEdit.clear()</span><br><span class="line">        self.publisherEdit.clear()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app &#x3D; QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(&quot;.&#x2F;images&#x2F;MainWindow_1.png&quot;))</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    mainMindow &#x3D; addBookDialog()</span><br><span class="line">    mainMindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>对于分类，使用了 <code>QComboBox</code><br>对于时间，选择了<code>QDateTimeEdit</code>，并且规定了时间的格式<br>在<code>setUpUI</code>中可以看到，当点击<strong>添加图书</strong>按钮时<code>addBookButtonClicked</code>函数</p><h3><span id="paddbookbuttonclicked-han-shu-shi-xian-luo-ji">addBookButtonClicked函数实现逻辑</span><a href="#paddbookbuttonclicked-han-shu-shi-xian-luo-ji" class="header-anchor">#</a></h3><p>虽然我注释了，但是这里还是想重新写一下，逻辑如下</p><ul><li>如果存在有空值，警告</li><li>添加的书已存在，就直接加上本数</li><li>本来不存在，则开始插入数据</li></ul><h3><span id="pshi-xian-xiao-guo">实现效果:</span><a href="#pshi-xian-xiao-guo" class="header-anchor">#</a></h3><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb8v90r9pj308b0c1dfs.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb8v9u8t2j308d0c2wek.jpg" alt="这里写图片描述"></p><h2><span id="ptao-tai-tu-shu-gong-neng">淘汰图书功能</span><a href="#ptao-tai-tu-shu-gong-neng" class="header-anchor">#</a></h2><h3><span id="pfen-xi">分析</span><a href="#pfen-xi" class="header-anchor">#</a></h3><p>从实现看与添加图书差不多，但是为了方便，我只允许管理员添加书本号，然后自动匹配到书籍信息填充，管理员只需再添加一个淘汰数量就行了</p><h3><span id="pdai-ma">代码</span><a href="#pdai-ma" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">import qdarkstyle</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class dropBookDialog(QDialog):</span><br><span class="line">    drop_book_successful_signal&#x3D;pyqtSignal()</span><br><span class="line"></span><br><span class="line">    def __init__(self, parent&#x3D;None):</span><br><span class="line">        super(dropBookDialog, self).__init__(parent)</span><br><span class="line">        self.setUpUI()</span><br><span class="line">        self.setWindowModality(Qt.WindowModal)</span><br><span class="line">        self.setWindowTitle(&quot;删除书籍&quot;)</span><br><span class="line"></span><br><span class="line">    def setUpUI(self):</span><br><span class="line">        # 书名，书号，作者，分类，添加数量.出版社,出版日期</span><br><span class="line">        # 书籍分类：哲学类、社会科学类、政治类、法律类、军事类、经济类、文化类、教育类、体育类、语言文字类、艺术类、历史类、地理类、天文学类、生物学类、医学卫生类、农业类</span><br><span class="line">        BookCategory &#x3D; [&quot;哲学&quot;, &quot;社会科学&quot;, &quot;政治&quot;, &quot;法律&quot;, &quot;军事&quot;, &quot;经济&quot;, &quot;文化&quot;, &quot;教育&quot;, &quot;体育&quot;, &quot;语言文字&quot;, &quot;艺术&quot;, &quot;历史&quot;</span><br><span class="line">            , &quot;地理&quot;, &quot;天文学&quot;, &quot;生物学&quot;, &quot;医学卫生&quot;, &quot;农业&quot;]</span><br><span class="line">        self.resize(300, 400)</span><br><span class="line">        self.layout &#x3D; QFormLayout()</span><br><span class="line">        self.setLayout(self.layout)</span><br><span class="line"></span><br><span class="line">        # Label控件</span><br><span class="line">        self.titlelabel &#x3D; QLabel(&quot;  淘汰书籍&quot;)</span><br><span class="line">        self.bookNameLabel &#x3D; QLabel(&quot;书    名:&quot;)</span><br><span class="line">        self.bookIdLabel &#x3D; QLabel(&quot;书    号:&quot;)</span><br><span class="line">        self.authNameLabel &#x3D; QLabel(&quot;作    者:&quot;)</span><br><span class="line">        self.categoryLabel &#x3D; QLabel(&quot;分    类:&quot;)</span><br><span class="line">        self.publisherLabel &#x3D; QLabel(&quot;出 版 社:&quot;)</span><br><span class="line">        self.publishDateLabel &#x3D; QLabel(&quot;出版日期:&quot;)</span><br><span class="line">        self.dropNumLabel &#x3D; QLabel(&quot;数    量:&quot;)</span><br><span class="line"></span><br><span class="line">        # button控件</span><br><span class="line">        self.dropBookButton &#x3D; QPushButton(&quot;淘 汰&quot;)</span><br><span class="line"></span><br><span class="line">        # lineEdit控件</span><br><span class="line">        self.bookNameEdit &#x3D; QLineEdit()</span><br><span class="line">        self.bookIdEdit &#x3D; QLineEdit()</span><br><span class="line">        self.authNameEdit &#x3D; QLineEdit()</span><br><span class="line">        self.categoryComboBox &#x3D; QComboBox()</span><br><span class="line">        self.categoryComboBox.addItems(BookCategory)</span><br><span class="line">        self.publisherEdit &#x3D; QLineEdit()</span><br><span class="line">        self.publishTime &#x3D; QLineEdit()</span><br><span class="line">        # self.publishDateEdit &#x3D; QLineEdit()</span><br><span class="line">        self.dropNumEdit &#x3D; QLineEdit()</span><br><span class="line"></span><br><span class="line">        self.bookNameEdit.setMaxLength(10)</span><br><span class="line">        self.bookIdEdit.setMaxLength(6)</span><br><span class="line">        self.authNameEdit.setMaxLength(10)</span><br><span class="line">        self.publisherEdit.setMaxLength(10)</span><br><span class="line">        self.dropNumEdit.setMaxLength(12)</span><br><span class="line">        self.dropNumEdit.setValidator(QIntValidator())</span><br><span class="line"></span><br><span class="line">        # 添加进formlayout</span><br><span class="line">        self.layout.addRow(&quot;&quot;, self.titlelabel)</span><br><span class="line">        self.layout.addRow(self.bookNameLabel, self.bookNameEdit)</span><br><span class="line">        self.layout.addRow(self.bookIdLabel, self.bookIdEdit)</span><br><span class="line">        self.layout.addRow(self.authNameLabel, self.authNameEdit)</span><br><span class="line">        self.layout.addRow(self.categoryLabel, self.categoryComboBox)</span><br><span class="line">        self.layout.addRow(self.publisherLabel, self.publisherEdit)</span><br><span class="line">        self.layout.addRow(self.publishDateLabel, self.publishTime)</span><br><span class="line">        self.layout.addRow(self.dropNumLabel, self.dropNumEdit)</span><br><span class="line">        self.layout.addRow(&quot;&quot;, self.dropBookButton)</span><br><span class="line"></span><br><span class="line">        # 设置字体</span><br><span class="line">        font &#x3D; QFont()</span><br><span class="line">        font.setPixelSize(20)</span><br><span class="line">        self.titlelabel.setFont(font)</span><br><span class="line">        font.setPixelSize(14)</span><br><span class="line">        self.bookNameLabel.setFont(font)</span><br><span class="line">        self.bookIdLabel.setFont(font)</span><br><span class="line">        self.authNameLabel.setFont(font)</span><br><span class="line">        self.categoryLabel.setFont(font)</span><br><span class="line">        self.publisherLabel.setFont(font)</span><br><span class="line">        self.publishDateLabel.setFont(font)</span><br><span class="line">        self.dropNumLabel.setFont(font)</span><br><span class="line"></span><br><span class="line">        self.bookNameEdit.setFont(font)</span><br><span class="line">        self.bookNameEdit.setReadOnly(True)</span><br><span class="line">        self.bookNameEdit.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line">        self.bookIdEdit.setFont(font)</span><br><span class="line">        self.authNameEdit.setFont(font)</span><br><span class="line">        self.authNameEdit.setReadOnly(True)</span><br><span class="line">        self.authNameEdit.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line">        self.publisherEdit.setFont(font)</span><br><span class="line">        self.publisherEdit.setReadOnly(True)</span><br><span class="line">        self.publisherEdit.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line">        self.publishTime.setFont(font)</span><br><span class="line">        self.publishTime.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line">        self.categoryComboBox.setFont(font)</span><br><span class="line">        self.categoryComboBox.setStyleSheet(&quot;background-color:#363636&quot;)</span><br><span class="line">        self.dropNumEdit.setFont(font)</span><br><span class="line"></span><br><span class="line">        # button设置</span><br><span class="line">        font.setPixelSize(16)</span><br><span class="line">        self.dropBookButton.setFont(font)</span><br><span class="line">        self.dropBookButton.setFixedHeight(32)</span><br><span class="line">        self.dropBookButton.setFixedWidth(140)</span><br><span class="line"></span><br><span class="line">        # 设置间距</span><br><span class="line">        self.titlelabel.setMargin(8)</span><br><span class="line">        self.layout.setVerticalSpacing(10)</span><br><span class="line"></span><br><span class="line">        self.dropBookButton.clicked.connect(self.dropBookButtonClicked)</span><br><span class="line">        self.bookIdEdit.textChanged.connect(self.bookIdEditChanged)</span><br><span class="line"></span><br><span class="line">    def bookIdEditChanged(self):</span><br><span class="line">        bookId &#x3D; self.bookIdEdit.text()</span><br><span class="line">        if (bookId &#x3D;&#x3D; &quot;&quot;):</span><br><span class="line">            self.bookNameEdit.clear()</span><br><span class="line">            self.publisherEdit.clear()</span><br><span class="line">            self.authNameEdit.clear()</span><br><span class="line">            self.dropNumEdit.clear()</span><br><span class="line">            self.publishTime.clear()</span><br><span class="line">        db &#x3D; QSqlDatabase.addDatabase(&quot;QSQLITE&quot;)</span><br><span class="line">        db.setDatabaseName(&#39;.&#x2F;db&#x2F;LibraryManagement.db&#39;)</span><br><span class="line">        db.open()</span><br><span class="line">        query &#x3D; QSqlQuery()</span><br><span class="line">        sql &#x3D; &quot;SELECT * FROM Book WHERE BookId&#x3D;&#39;%s&#39;&quot; % (bookId)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        # 查询对应书号，如果存在就更新form</span><br><span class="line">        if (query.next()):</span><br><span class="line">            self.bookNameEdit.setText(query.value(0))</span><br><span class="line">            self.authNameEdit.setText(query.value(2))</span><br><span class="line">            self.categoryComboBox.setCurrentText(query.value(3))</span><br><span class="line">            self.publisherEdit.setText(query.value(4))</span><br><span class="line">            self.publishTime.setText(query.value(5))</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    def dropBookButtonClicked(self):</span><br><span class="line">        bookId &#x3D; self.bookIdEdit.text()</span><br><span class="line">        dropNum &#x3D; 0</span><br><span class="line">        if (self.dropNumEdit.text() &#x3D;&#x3D; &quot;&quot;):</span><br><span class="line">            print(QMessageBox.warning(self, &quot;警告&quot;, &quot;淘汰数目为空，请检查输入，操作失败&quot;), QMessageBox.Yes, QMessageBox.Yes)</span><br><span class="line">            return</span><br><span class="line">        dropNum &#x3D; int(self.dropNumEdit.text())</span><br><span class="line">        db &#x3D; QSqlDatabase.addDatabase(&quot;QSQLITE&quot;)</span><br><span class="line">        db.setDatabaseName(&#39;.&#x2F;db&#x2F;LibraryManagement.db&#39;)</span><br><span class="line">        db.open()</span><br><span class="line">        query &#x3D; QSqlQuery()</span><br><span class="line">        sql &#x3D; &quot;SELECT * FROM Book WHERE BookId&#x3D;&#39;%s&#39;&quot; % (bookId)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        if (query.next()):</span><br><span class="line">            if (dropNum &gt; query.value(7) or dropNum &lt; 0):</span><br><span class="line">                print(QMessageBox.warning(self, &quot;警告&quot;, &quot;最多可淘汰%d本，请检查输入&quot; % (query.value(7)), QMessageBox.Yes,</span><br><span class="line">                                          QMessageBox.Yes))</span><br><span class="line">                return</span><br><span class="line">        # 更新Book表和BuyorDrop表</span><br><span class="line">        # 如果drop书目和当前库存相同，则直接删除Book记录（这里先默认当前所有书都在库存中）</span><br><span class="line">        if (dropNum &#x3D;&#x3D; query.value(6)):</span><br><span class="line">            sql &#x3D; &quot;DELETE  FROM Book WHERE BookId&#x3D;&#39;%s&#39;&quot; % (bookId)</span><br><span class="line">        else:</span><br><span class="line">            sql &#x3D; &quot;UPDATE BOOK SET NumStorage&#x3D;NumStorage-%d,NumCanBorrow&#x3D;NumCanBorrow-%d WHERE BookId&#x3D;&#39;%s&#39;&quot; % (</span><br><span class="line">                dropNum, dropNum, bookId)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        db.commit()</span><br><span class="line"></span><br><span class="line">        timenow &#x3D; time.strftime(&#39;%Y-%m-%d&#39;, time.localtime(time.time()))</span><br><span class="line">        sql &#x3D; &quot;INSERT INTO buyordrop VALUES (&#39;%s&#39;,&#39;%s&#39;,0,%d)&quot; % (bookId, timenow, dropNum)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        db.commit()</span><br><span class="line">        print(QMessageBox.information(self, &quot;提示&quot;, &quot;淘汰书籍成功!&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">        self.drop_book_successful_signal.emit()</span><br><span class="line">        self.close()</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app &#x3D; QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(&quot;.&#x2F;images&#x2F;MainWindow_1.png&quot;))</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    mainMindow &#x3D; dropBookDialog()</span><br><span class="line">    mainMindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>可以看到里面有两个函数，<code>bookIdEditChanged</code>和<code>dropBookButtonClicked</code></p><p>其中<code>bookIdEditChanged</code>用来实现实时监测是否填充信息<br><code>dropBookButtonClicked</code>实现点击淘汰的逻辑</p><p>当监测到书号的	<code>QLineEdit</code>被更改时触发<code>bookIdEditChanged</code>，从数据库检查是否存在该书，如果有则添加</p><h3><span id="pshi-xian-xiao-guo">实现效果</span><a href="#pshi-xian-xiao-guo" class="header-anchor">#</a></h3><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb8vaosh9j308d0bza9z.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb8v96qxjj308f0c2aa1.jpg" alt="这里写图片描述"></p><h2><span id="pzui-hou-fu-shang-lian-jie">最后附上链接</span><a href="#pzui-hou-fu-shang-lian-jie" class="header-anchor">#</a></h2><p>项目地址：<a href="https://github.com/ycdxsb/LibraryManageDesktopApp" target="_blank" rel="noopener">github仓库链接</a></p>]]></content>
      <categories>
        <category>PyQt5</category>
        <category>图书馆管理系统</category>
      </categories>
      <tags>
        <tag>PyQt5</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5搭建图书馆管理系统（4）——管理员主页设计</title>
    <url>/a8b56f4b.html</url>
    <content><![CDATA[<h2><span id="pfen-xi">分析</span><a href="#pfen-xi" class="header-anchor">#</a></h2><p>在管理员主页，为了完成初步的功能，即添加书本，淘汰书本，查看库存，我们需要设计以下：</p><ul><li>一个添加书本的Dialog，通过一个button启用</li><li>一个淘汰书本的Dialog，通过一个button启用</li><li>一个查看库存的Table， 一开始打算用一个button启用的，后来觉得直接放主页也挺好的，所以并没有用button启用（虽然依然放在设计中）</li></ul><a id="more"></a><h2><span id="pdai-ma">代码</span><a href="#pdai-ma" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">import qdarkstyle</span><br><span class="line">from addBookDialog import addBookDialog</span><br><span class="line">from dropBookDialog import dropBookDialog</span><br><span class="line">from BookStorageViewer import BookStorageViewer</span><br><span class="line">from UserManage import UserManage</span><br><span class="line"></span><br><span class="line">class AdminHome(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setUpUI()</span><br><span class="line"></span><br><span class="line">    def setUpUI(self):</span><br><span class="line">        self.resize(900, 600)</span><br><span class="line">        self.setWindowTitle(&quot;欢迎使用图书馆管理系统&quot;)</span><br><span class="line">        self.layout &#x3D; QHBoxLayout()</span><br><span class="line">        self.buttonlayout &#x3D; QVBoxLayout()</span><br><span class="line">        self.setLayout(self.layout)</span><br><span class="line"></span><br><span class="line">        font &#x3D; QFont()</span><br><span class="line">        font.setPixelSize(16)</span><br><span class="line">        self.userManageButton &#x3D; QPushButton(&quot;用户管理&quot;)</span><br><span class="line">        self.addBookButton &#x3D; QPushButton(&quot;添加书籍&quot;)</span><br><span class="line">        self.dropBookButton &#x3D; QPushButton(&quot;淘汰书籍&quot;)</span><br><span class="line">        self.userManageButton.setFont(font)</span><br><span class="line">        self.addBookButton.setFont(font)</span><br><span class="line">        self.dropBookButton.setFont(font)</span><br><span class="line">        self.userManageButton.setFixedWidth(100)</span><br><span class="line">        self.userManageButton.setFixedHeight(42)</span><br><span class="line">        self.addBookButton.setFixedWidth(100)</span><br><span class="line">        self.addBookButton.setFixedHeight(42)</span><br><span class="line">        self.dropBookButton.setFixedWidth(100)</span><br><span class="line">        self.dropBookButton.setFixedHeight(42)</span><br><span class="line">        self.buttonlayout.addWidget(self.addBookButton)</span><br><span class="line">        self.buttonlayout.addWidget(self.dropBookButton)</span><br><span class="line">        self.buttonlayout.addWidget(self.userManageButton)</span><br><span class="line">        self.layout.addLayout(self.buttonlayout)</span><br><span class="line">        self.storageView &#x3D; BookStorageViewer()</span><br><span class="line">        self.layout.addWidget(self.storageView)</span><br><span class="line"></span><br><span class="line">        self.addBookButton.clicked.connect(self.addBookButtonClicked)</span><br><span class="line">        self.dropBookButton.clicked.connect(self.dropBookButtonClicked)</span><br><span class="line">        self.userManageButton.clicked.connect(self.userManage)</span><br><span class="line"></span><br><span class="line">    def addBookButtonClicked(self):</span><br><span class="line">        addDialog &#x3D; addBookDialog(self)</span><br><span class="line">        addDialog.add_book_success_signal.connect(self.storageView.searchButtonClicked)</span><br><span class="line">        addDialog.show()</span><br><span class="line">        addDialog.exec_()</span><br><span class="line"></span><br><span class="line">    def dropBookButtonClicked(self):</span><br><span class="line">        dropDialog &#x3D; dropBookDialog(self)</span><br><span class="line">        dropDialog.drop_book_successful_signal.connect(self.storageView.searchButtonClicked)</span><br><span class="line">        dropDialog.show()</span><br><span class="line">        dropDialog.exec_()</span><br><span class="line"></span><br><span class="line">    def userManage(self):</span><br><span class="line">        UserDelete&#x3D;UserManage(self)</span><br><span class="line">        UserDelete.show()</span><br><span class="line">        UserDelete.exec_()</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app &#x3D; QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(&quot;.&#x2F;images&#x2F;MainWindow_1.png&quot;))</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    mainMindow &#x3D; AdminHome()</span><br><span class="line">    mainMindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><blockquote><p>整段代码非常简短，逻辑也很清晰。<br>1、在setUpUI中有一个淘汰的button，一个添加的button<br>2、使用信号与槽机制，当点击添加按钮时，启用addBookDialog，点击淘汰按钮时，启用dropBookDialog<br>3、主页还有一个BookStorageViewer用于查看库存<br>**注意：**两个diolog和一个Table，我会在接下来的blog中给出</p></blockquote><h2><span id="pxiao-guo">效果</span><a href="#pxiao-guo" class="header-anchor">#</a></h2><p>虽然代码还不全，但也先看看最后效果吧~<br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb8r2vdvfj30p50hmq3n.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb8r260t9j30ot0hlwf8.jpg" alt="这里写图片描述"></p><h2><span id="pzui-hou-fu-shang-lian-jie">最后附上链接</span><a href="#pzui-hou-fu-shang-lian-jie" class="header-anchor">#</a></h2><p>项目地址：<a href="https://github.com/ycdxsb/LibraryManageDesktopApp" target="_blank" rel="noopener">github仓库链接</a></p>]]></content>
      <categories>
        <category>PyQt5</category>
        <category>图书馆管理系统</category>
      </categories>
      <tags>
        <tag>PyQt5</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5搭建图书馆管理系统（3）——登录页面设计</title>
    <url>/98a38c48.html</url>
    <content><![CDATA[<h2><span id="pfen-xi">分析</span><a href="#pfen-xi" class="header-anchor">#</a></h2><p>登录页面的逻辑很简单，如下：</p><ul><li>用户输入学号和密码（安全起见，加上输入检测）</li><li>如果密码错误或者用户名不存在，则给出提示</li><li>如果正确，则进行跳转</li></ul><a id="more"></a><h2><span id="pdai-ma">代码：</span><a href="#pdai-ma" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">import qdarkstyle</span><br><span class="line">import hashlib</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class SignInWidget(QWidget):</span><br><span class="line">    is_admin_signal &#x3D; pyqtSignal()</span><br><span class="line">    is_student_signal &#x3D; pyqtSignal(str)</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(SignInWidget, self).__init__()</span><br><span class="line">        self.resize(900, 600)</span><br><span class="line">        self.setWindowTitle(&quot;欢迎使用图书馆管理系统&quot;)</span><br><span class="line">        self.setUpUI()</span><br><span class="line"></span><br><span class="line">    def setUpUI(self):</span><br><span class="line">        self.Vlayout &#x3D; QVBoxLayout(self)</span><br><span class="line">        self.Hlayout1 &#x3D; QHBoxLayout()</span><br><span class="line">        self.Hlayout2 &#x3D; QHBoxLayout()</span><br><span class="line">        self.formlayout &#x3D; QFormLayout()</span><br><span class="line"></span><br><span class="line">        self.label1 &#x3D; QLabel(&quot;学号: &quot;)</span><br><span class="line">        labelFont &#x3D; QFont()</span><br><span class="line">        labelFont.setPixelSize(18)</span><br><span class="line">        lineEditFont &#x3D; QFont()</span><br><span class="line">        lineEditFont.setPixelSize(16)</span><br><span class="line">        self.label1.setFont(labelFont)</span><br><span class="line">        self.lineEdit1 &#x3D; QLineEdit()</span><br><span class="line">        self.lineEdit1.setFixedHeight(32)</span><br><span class="line">        self.lineEdit1.setFixedWidth(180)</span><br><span class="line">        self.lineEdit1.setFont(lineEditFont)</span><br><span class="line">        self.lineEdit1.setMaxLength(10)</span><br><span class="line"></span><br><span class="line">        self.formlayout.addRow(self.label1, self.lineEdit1)</span><br><span class="line"></span><br><span class="line">        self.label2 &#x3D; QLabel(&quot;密码: &quot;)</span><br><span class="line">        self.label2.setFont(labelFont)</span><br><span class="line">        self.lineEdit2 &#x3D; QLineEdit()</span><br><span class="line">        self.lineEdit2.setFixedHeight(32)</span><br><span class="line">        self.lineEdit2.setFixedWidth(180)</span><br><span class="line">        self.lineEdit2.setMaxLength(16)</span><br><span class="line"></span><br><span class="line">        # 设置验证</span><br><span class="line">        reg &#x3D; QRegExp(&quot;PB[0~9]&#123;8&#125;&quot;)</span><br><span class="line">        pValidator &#x3D; QRegExpValidator(self)</span><br><span class="line">        pValidator.setRegExp(reg)</span><br><span class="line">        self.lineEdit1.setValidator(pValidator)</span><br><span class="line"></span><br><span class="line">        reg &#x3D; QRegExp(&quot;[a-zA-z0-9]+$&quot;)</span><br><span class="line">        pValidator.setRegExp(reg)</span><br><span class="line">        self.lineEdit2.setValidator(pValidator)</span><br><span class="line"></span><br><span class="line">        passwordFont &#x3D; QFont()</span><br><span class="line">        passwordFont.setPixelSize(10)</span><br><span class="line">        self.lineEdit2.setFont(passwordFont)</span><br><span class="line"></span><br><span class="line">        self.lineEdit2.setEchoMode(QLineEdit.Password)</span><br><span class="line">        self.formlayout.addRow(self.label2, self.lineEdit2)</span><br><span class="line">        self.signIn &#x3D; QPushButton(&quot;登 录&quot;)</span><br><span class="line">        self.signIn.setFixedWidth(80)</span><br><span class="line">        self.signIn.setFixedHeight(30)</span><br><span class="line">        self.signIn.setFont(labelFont)</span><br><span class="line">        self.formlayout.addRow(&quot;&quot;, self.signIn)</span><br><span class="line"></span><br><span class="line">        self.label &#x3D; QLabel(&quot;欢迎使用图书馆管理系统&quot;)</span><br><span class="line">        fontlabel &#x3D; QFont()</span><br><span class="line">        fontlabel.setPixelSize(30)</span><br><span class="line">        self.label.setFixedWidth(390)</span><br><span class="line">        # self.label.setFixedHeight(80)</span><br><span class="line">        self.label.setFont(fontlabel)</span><br><span class="line">        self.Hlayout1.addWidget(self.label, Qt.AlignCenter)</span><br><span class="line">        self.widget1 &#x3D; QWidget()</span><br><span class="line">        self.widget1.setLayout(self.Hlayout1)</span><br><span class="line">        self.widget2 &#x3D; QWidget()</span><br><span class="line">        self.widget2.setFixedWidth(300)</span><br><span class="line">        self.widget2.setFixedHeight(150)</span><br><span class="line">        self.widget2.setLayout(self.formlayout)</span><br><span class="line">        self.Hlayout2.addWidget(self.widget2, Qt.AlignCenter)</span><br><span class="line">        self.widget &#x3D; QWidget()</span><br><span class="line">        self.widget.setLayout(self.Hlayout2)</span><br><span class="line">        self.Vlayout.addWidget(self.widget1)</span><br><span class="line">        self.Vlayout.addWidget(self.widget, Qt.AlignTop)</span><br><span class="line"></span><br><span class="line">        self.signIn.clicked.connect(self.signInCheck)</span><br><span class="line">        self.lineEdit2.returnPressed.connect(self.signInCheck)</span><br><span class="line">        self.lineEdit1.returnPressed.connect(self.signInCheck)</span><br><span class="line"></span><br><span class="line">    def signInCheck(self):</span><br><span class="line">        studentId &#x3D; self.lineEdit1.text()</span><br><span class="line">        password &#x3D; self.lineEdit2.text()</span><br><span class="line">        if (studentId &#x3D;&#x3D; &quot;&quot; or password &#x3D;&#x3D; &quot;&quot;):</span><br><span class="line">            print(QMessageBox.warning(self, &quot;警告&quot;, &quot;学号和密码不可为空!&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">            return</span><br><span class="line">        # 打开数据库连接</span><br><span class="line">        db &#x3D; QSqlDatabase.addDatabase(&quot;QSQLITE&quot;)</span><br><span class="line">        db.setDatabaseName(&#39;.&#x2F;db&#x2F;LibraryManagement.db&#39;)</span><br><span class="line">        db.open()</span><br><span class="line">        query &#x3D; QSqlQuery()</span><br><span class="line">        sql &#x3D; &quot;SELECT * FROM user WHERE StudentId&#x3D;&#39;%s&#39;&quot; % (studentId)</span><br><span class="line">        query.exec_(sql)</span><br><span class="line">        db.close()</span><br><span class="line"></span><br><span class="line">        hl &#x3D; hashlib.md5()</span><br><span class="line">        hl.update(password.encode(encoding&#x3D;&#39;utf-8&#39;))</span><br><span class="line">        if (not query.next()):</span><br><span class="line">            print(QMessageBox.information(self, &quot;提示&quot;, &quot;该账号不存在!&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">        else:</span><br><span class="line">            if (studentId &#x3D;&#x3D; query.value(0) and hl.hexdigest() &#x3D;&#x3D; query.value(2)):</span><br><span class="line">                # 如果是管理员</span><br><span class="line">                if (query.value(3)&#x3D;&#x3D;1):</span><br><span class="line">                    self.is_admin_signal.emit()</span><br><span class="line">                else:</span><br><span class="line">                    self.is_student_signal.emit(studentId)</span><br><span class="line">            else:</span><br><span class="line">                print(QMessageBox.information(self, &quot;提示&quot;, &quot;密码错误!&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app &#x3D; QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(&quot;.&#x2F;images&#x2F;MainWindow_1.png&quot;))</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    mainMindow &#x3D; SignInWidget()</span><br><span class="line">    mainMindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2><span id="pxiao-guo-ru-xia">效果如下</span><a href="#pxiao-guo-ru-xia" class="header-anchor">#</a></h2><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb8klay6vj311s0j4acf.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb8kkcn55j30p70htgm8.jpg" alt="这里写图片描述"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb8kjr1jzj30p00higm6.jpg" alt="这里写图片描述"></p><h2><span id="pzui-hou-fu-shang-lian-jie">最后附上链接</span><a href="#pzui-hou-fu-shang-lian-jie" class="header-anchor">#</a></h2><p>项目地址：<a href="https://github.com/ycdxsb/LibraryManageDesktopApp" target="_blank" rel="noopener">github仓库链接</a></p>]]></content>
      <categories>
        <category>PyQt5</category>
        <category>图书馆管理系统</category>
      </categories>
      <tags>
        <tag>PyQt5</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5搭建图书馆管理系统（2）——注册页面设计</title>
    <url>/72587310.html</url>
    <content><![CDATA[<blockquote><p>我觉得最cd的就是QtDesigner虽然适合快速开发UI，但是我总用不好，只能纯代码来实现界面了。现在大家能看到的一开始的UI设计和一点逻辑，并不包含总体应用的的逻辑体系</p></blockquote><a id="more"></a><h2><span id="pdai-ma">代码：</span><a href="#pdai-ma" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">from PyQt5.QtWidgets import *</span><br><span class="line">from PyQt5.QtGui import *</span><br><span class="line">from PyQt5.QtCore import *</span><br><span class="line">import qdarkstyle</span><br><span class="line">from PyQt5.QtSql import *</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class SignUpWidget(QWidget):</span><br><span class="line">    student_signup_signal &#x3D; pyqtSignal(str)</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.setUpUI()</span><br><span class="line"></span><br><span class="line">    def setUpUI(self):</span><br><span class="line">        self.resize(900, 600)</span><br><span class="line">        self.setWindowTitle(&quot;欢迎登陆图书馆管理系统&quot;)</span><br><span class="line">        self.signUpLabel &#x3D; QLabel(&quot;注   册&quot;)</span><br><span class="line">        self.signUpLabel.setAlignment(Qt.AlignCenter)</span><br><span class="line">        # self.signUpLabel.setFixedWidth(300)</span><br><span class="line">        self.signUpLabel.setFixedHeight(100)</span><br><span class="line">        font &#x3D; QFont()</span><br><span class="line">        font.setPixelSize(36)</span><br><span class="line">        lineEditFont &#x3D; QFont()</span><br><span class="line">        lineEditFont.setPixelSize(16)</span><br><span class="line">        self.signUpLabel.setFont(font)</span><br><span class="line"></span><br><span class="line">        self.layout &#x3D; QVBoxLayout()</span><br><span class="line">        self.layout.addWidget(self.signUpLabel, Qt.AlignHCenter)</span><br><span class="line">        self.setLayout(self.layout)</span><br><span class="line">        # 表单，包括学号，姓名，密码，确认密码</span><br><span class="line">        self.formlayout &#x3D; QFormLayout()</span><br><span class="line">        font.setPixelSize(18)</span><br><span class="line">        # Row1</span><br><span class="line">        self.studentIdLabel &#x3D; QLabel(&quot;学    号: &quot;)</span><br><span class="line">        self.studentIdLabel.setFont(font)</span><br><span class="line">        self.studentIdLineEdit &#x3D; QLineEdit()</span><br><span class="line">        self.studentIdLineEdit.setFixedWidth(180)</span><br><span class="line">        self.studentIdLineEdit.setFixedHeight(32)</span><br><span class="line">        self.studentIdLineEdit.setFont(lineEditFont)</span><br><span class="line">        self.studentIdLineEdit.setMaxLength(10)</span><br><span class="line">        self.formlayout.addRow(self.studentIdLabel, self.studentIdLineEdit)</span><br><span class="line"></span><br><span class="line">        # Row2</span><br><span class="line">        self.studentNameLabel &#x3D; QLabel(&quot;姓    名: &quot;)</span><br><span class="line">        self.studentNameLabel.setFont(font)</span><br><span class="line">        self.studentNameLineEdit &#x3D; QLineEdit()</span><br><span class="line">        self.studentNameLineEdit.setFixedHeight(32)</span><br><span class="line">        self.studentNameLineEdit.setFixedWidth(180)</span><br><span class="line">        self.studentNameLineEdit.setFont(lineEditFont)</span><br><span class="line">        self.studentNameLineEdit.setMaxLength(10)</span><br><span class="line">        self.formlayout.addRow(self.studentNameLabel, self.studentNameLineEdit)</span><br><span class="line"></span><br><span class="line">        lineEditFont.setPixelSize(10)</span><br><span class="line"></span><br><span class="line">        # Row3</span><br><span class="line">        self.passwordLabel &#x3D; QLabel(&quot;密    码: &quot;)</span><br><span class="line">        self.passwordLabel.setFont(font)</span><br><span class="line">        self.passwordLineEdit &#x3D; QLineEdit()</span><br><span class="line">        self.passwordLineEdit.setFixedWidth(180)</span><br><span class="line">        self.passwordLineEdit.setFixedHeight(32)</span><br><span class="line">        self.passwordLineEdit.setFont(lineEditFont)</span><br><span class="line">        self.passwordLineEdit.setEchoMode(QLineEdit.Password)</span><br><span class="line">        self.passwordLineEdit.setMaxLength(16)</span><br><span class="line">        self.formlayout.addRow(self.passwordLabel, self.passwordLineEdit)</span><br><span class="line"></span><br><span class="line">        # Row4</span><br><span class="line">        self.passwordConfirmLabel &#x3D; QLabel(&quot;确认密码: &quot;)</span><br><span class="line">        self.passwordConfirmLabel.setFont(font)</span><br><span class="line">        self.passwordConfirmLineEdit &#x3D; QLineEdit()</span><br><span class="line">        self.passwordConfirmLineEdit.setFixedWidth(180)</span><br><span class="line">        self.passwordConfirmLineEdit.setFixedHeight(32)</span><br><span class="line">        self.passwordConfirmLineEdit.setFont(lineEditFont)</span><br><span class="line">        self.passwordConfirmLineEdit.setEchoMode(QLineEdit.Password)</span><br><span class="line">        self.passwordConfirmLineEdit.setMaxLength(16)</span><br><span class="line">        self.formlayout.addRow(self.passwordConfirmLabel, self.passwordConfirmLineEdit)</span><br><span class="line"></span><br><span class="line">        # Row5</span><br><span class="line">        self.signUpbutton &#x3D; QPushButton(&quot;注 册&quot;)</span><br><span class="line">        self.signUpbutton.setFixedWidth(120)</span><br><span class="line">        self.signUpbutton.setFixedHeight(30)</span><br><span class="line">        self.signUpbutton.setFont(font)</span><br><span class="line">        self.formlayout.addRow(&quot;&quot;, self.signUpbutton)</span><br><span class="line">        widget &#x3D; QWidget()</span><br><span class="line">        widget.setLayout(self.formlayout)</span><br><span class="line">        widget.setFixedHeight(250)</span><br><span class="line">        widget.setFixedWidth(300)</span><br><span class="line">        self.Hlayout &#x3D; QHBoxLayout()</span><br><span class="line">        self.Hlayout.addWidget(widget, Qt.AlignCenter)</span><br><span class="line">        widget &#x3D; QWidget()</span><br><span class="line">        widget.setLayout(self.Hlayout)</span><br><span class="line">        self.layout.addWidget(widget, Qt.AlignHCenter)</span><br><span class="line"></span><br><span class="line">        # 设置验证</span><br><span class="line">        reg &#x3D; QRegExp(&quot;PB[0~9]&#123;8&#125;&quot;)</span><br><span class="line">        pValidator &#x3D; QRegExpValidator(self)</span><br><span class="line">        pValidator.setRegExp(reg)</span><br><span class="line">        self.studentIdLineEdit.setValidator(pValidator)</span><br><span class="line"></span><br><span class="line">        reg &#x3D; QRegExp(&quot;[a-zA-z0-9]+$&quot;)</span><br><span class="line">        pValidator.setRegExp(reg)</span><br><span class="line">        self.passwordLineEdit.setValidator(pValidator)</span><br><span class="line">        self.passwordConfirmLineEdit.setValidator(pValidator)</span><br><span class="line">        self.signUpbutton.clicked.connect(self.SignUp)</span><br><span class="line">        self.studentIdLineEdit.returnPressed.connect(self.SignUp)</span><br><span class="line">        self.studentNameLineEdit.returnPressed.connect(self.SignUp)</span><br><span class="line">        self.passwordLineEdit.returnPressed.connect(self.SignUp)</span><br><span class="line">        self.passwordConfirmLineEdit.returnPressed.connect(self.SignUp)</span><br><span class="line"></span><br><span class="line">    def SignUp(self):</span><br><span class="line">        studentId &#x3D; self.studentIdLineEdit.text()</span><br><span class="line">        studentName &#x3D; self.studentNameLineEdit.text()</span><br><span class="line">        password &#x3D; self.passwordLineEdit.text()</span><br><span class="line">        confirmPassword &#x3D; self.passwordConfirmLineEdit.text()</span><br><span class="line">        if (studentId &#x3D;&#x3D; &quot;&quot; or studentName &#x3D;&#x3D; &quot;&quot; or password &#x3D;&#x3D; &quot;&quot; or confirmPassword &#x3D;&#x3D; &quot;&quot;):</span><br><span class="line">            print(QMessageBox.warning(self, &quot;警告&quot;, &quot;表单不可为空，请重新输入&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">            return</span><br><span class="line">        else:  # 需要处理逻辑，1.账号已存在;2.密码不匹配;3.插入user表</span><br><span class="line">            db &#x3D; QSqlDatabase.addDatabase(&quot;QSQLITE&quot;)</span><br><span class="line">            db.setDatabaseName(&#39;.&#x2F;db&#x2F;LibraryManagement.db&#39;)</span><br><span class="line">            db.open()</span><br><span class="line">            query &#x3D; QSqlQuery()</span><br><span class="line">            if (confirmPassword !&#x3D; password):</span><br><span class="line">                print(QMessageBox.warning(self, &quot;警告&quot;, &quot;两次输入密码不一致，请重新输入&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">                return</span><br><span class="line">            elif (confirmPassword &#x3D;&#x3D; password):</span><br><span class="line">                # md5编码</span><br><span class="line">                hl &#x3D; hashlib.md5()</span><br><span class="line">                hl.update(password.encode(encoding&#x3D;&#39;utf-8&#39;))</span><br><span class="line">                md5password &#x3D; hl.hexdigest()</span><br><span class="line">                sql &#x3D; &quot;SELECT * FROM user WHERE StudentId&#x3D;&#39;%s&#39;&quot; % (studentId)</span><br><span class="line">                query.exec_(sql)</span><br><span class="line">                if (query.next()):</span><br><span class="line">                    print(QMessageBox.warning(self, &quot;警告&quot;, &quot;该账号已存在,请重新输入&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">                    return</span><br><span class="line">                else:</span><br><span class="line">                    sql &#x3D; &quot;INSERT INTO user VALUES (&#39;%s&#39;,&#39;%s&#39;,&#39;%s&#39;,0,0,0)&quot; % (</span><br><span class="line">                        studentId, studentName, md5password)</span><br><span class="line">                    db.exec_(sql)</span><br><span class="line">                    db.commit()</span><br><span class="line">                    print(QMessageBox.information(self, &quot;提醒&quot;, &quot;您已成功注册账号!&quot;, QMessageBox.Yes, QMessageBox.Yes))</span><br><span class="line">                    self.student_signup_signal.emit(studentId)</span><br><span class="line">                db.close()</span><br><span class="line">                return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app &#x3D; QApplication(sys.argv)</span><br><span class="line">    app.setWindowIcon(QIcon(&quot;.&#x2F;images&#x2F;MainWindow_1.png&quot;))</span><br><span class="line">    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())</span><br><span class="line">    mainMindow &#x3D; SignUpWidget()</span><br><span class="line">    mainMindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><ul><li>setUpUI用来初始化UI界面</li><li>signUp实现在注册过程中的逻辑以及对数据库的操作，按理说应该把数据库操作单独写一个模块的，不过我很懒…</li><li>注册成功暂时只是把数据插入了数据库，本来应该加上跳转页面之类的操作</li><li>如果觉得黑色的效果很好看的话，大家也可以调用经典的QSSstyle表qdarkstyle<br>##实现效果<br><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdb895cqldj30p40hj0t5.jpg" alt="Alt text"></li></ul><p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdb896b8o1j30p40hj0t5.jpg" alt="Alt text"></p><h2><span id="pzui-hou-fu-shang-lian-jie">最后附上链接</span><a href="#pzui-hou-fu-shang-lian-jie" class="header-anchor">#</a></h2><p>项目地址：<a href="https://github.com/ycdxsb/LibraryManageDesktopApp" target="_blank" rel="noopener">github仓库链接</a></p>]]></content>
      <categories>
        <category>PyQt5</category>
        <category>图书馆管理系统</category>
      </categories>
      <tags>
        <tag>PyQt5</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5搭建图书馆管理系统（1）——数据库</title>
    <url>/51f03b47.html</url>
    <content><![CDATA[<p>PS:由于CSDN太多广告所以弃用了，搬运到了自己的博客</p><h2><span id="pxie-zai-qian-mian">写在前面</span><a href="#pxie-zai-qian-mian" class="header-anchor">#</a></h2><p>这学期的数据库大作业要求是做一个简单的图书馆管理系统，刚好之前看过Qt，就打算用Qt来写了，博客记录一些重要的模块和思路</p><h2><span id="pyao-qiu">要求</span><a href="#pyao-qiu" class="header-anchor">#</a></h2><p>编写一个图书管理系统，要求具有以下内容：</p><ul><li>存储图书信息、采购和淘汰情况、租借情况</li><li>实现图书采购、淘汰、租借功能。</li><li>实现图书信息、采购和淘汰、库存、和租借情况查询</li><li>实现图书的采购、库存、淘汰、租借情况等统计</li></ul><p>这是要实现的基本功能，当然我觉得做好的话还可以加上读者推荐书目，我喜欢，收藏书目之类的功能</p><a id="more"></a><h2><span id="pda-zhi-si-lu">大致思路</span><a href="#pda-zhi-si-lu" class="header-anchor">#</a></h2><p>作为一个管理系统，自然要实现管理员和学生两个方面的内容</p><ul><li>首先需要登录和注册页面</li><li>对于管理员，在管理员的管理页面上，会实现图书的采购，淘汰，库存，租借情况查询及统计</li><li>对于学生，要实现图书的借阅、归还、租借情况查询</li></ul><h2><span id="pshu-ju-ku">数据库</span><a href="#pshu-ju-ku" class="header-anchor">#</a></h2><p>使用Sqlite3轻量级数据库作为系统的数据库</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE User (</span><br><span class="line">  StudentId     CHAR(10) UNIQUE NOT NULL,</span><br><span class="line">  Name          VARCHAR(20),</span><br><span class="line">  Password      CHAR(32)        NOT NULL,</span><br><span class="line">  IsAdmin       BIT DEFAULT 0,</span><br><span class="line">  TimesBorrowed INT DEFAULT 0,</span><br><span class="line">  NumBorrowed   INT DEFAULT 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE Book (</span><br><span class="line">  BookName     VARCHAR(30) NOT NULL,</span><br><span class="line">  BookId       CHAR(6)     NOT NULL,</span><br><span class="line">  Auth         VARCHAR(20) NOT NULL,</span><br><span class="line">  Category     VARCHAR(10) DEFAULT NULL,</span><br><span class="line">  Publisher    VARCHAR(30) DEFAULT NULL,</span><br><span class="line">  PublishTime  DATE,</span><br><span class="line">  NumStorage   INT         DEFAULT 0,</span><br><span class="line">  NumCanBorrow INT         DEFAULT 0,</span><br><span class="line">  NumBorrowed  INT         DEFAULT 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE User_Book (</span><br><span class="line">  StudentId   CHAR(10) UNIQUE NOT NULL,</span><br><span class="line">  BookId      CHAR(6)         NOT NULL,</span><br><span class="line">  BorrowTime  DATE,</span><br><span class="line">  ReturnTime  DATE,</span><br><span class="line">  BorrowState BIT DEFAULT 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE BuyOrDrop (</span><br><span class="line">  BookId    CHAR(6) NOT NULL,</span><br><span class="line">  Time      DATE,</span><br><span class="line">  BuyOrDrop BIT DEFAULT 0,</span><br><span class="line">  Number    INT DEFAULT 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO User VALUES (&#39;0000000000&#39;, &#39;管理员&#39;, &#39;f9687b82c237c8868a92ffa548c0a16a&#39;, 1, 0, 0);</span><br></pre></td></tr></table></figure><blockquote><p>所有管理员使用同一账户 ，password使用md5加密</p></blockquote><h3><span id="puser-biao">User表</span><a href="#puser-biao" class="header-anchor">#</a></h3><ul><li>StudentId：学号</li><li>Name：姓名</li><li>Password：密码</li><li>IsAdmin：是否为管理员</li><li>TimesBorrowed：借阅次数</li><li>NumBorrowed：已借书数量<br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb7q1ougaj30zc02l74i.jpg" alt="Alt text"></li></ul><h3><span id="pbook-biao">Book表</span><a href="#pbook-biao" class="header-anchor">#</a></h3><ul><li>BookName：书名</li><li>BookId：书号</li><li>Auth：作者</li><li>CateGory：分类</li><li>Publisher：出版社</li><li>PublishTime：出版时间</li><li>NumStorage：库存量</li><li>NumCanBorrowed：可借量</li><li>NumBorrowed：被借阅次数</li></ul><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb7ri0ls0j313901zdg9.jpg" alt="Alt text"></p><h3><span id="puser-book-biao">User_Book表</span><a href="#puser-book-biao" class="header-anchor">#</a></h3><p>分别为学号，书号，借阅时间，归还时间，借阅状态</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb7rnz07cj30o902o74g.jpg" alt="Alt text"></p><h3><span id="pbuyordrop-biao">BuyOrDrop表</span><a href="#pbuyordrop-biao" class="header-anchor">#</a></h3><p>分别为书号，添加或淘汰时间，添加还是淘汰，数量<br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdb7q2jlagj30hn03jt8r.jpg" alt="Alt text"></p><h2><span id="pzui-hou-fu-shang-lian-jie">最后附上链接</span><a href="#pzui-hou-fu-shang-lian-jie" class="header-anchor">#</a></h2><p>项目地址：<a href="https://github.com/ycdxsb/LibraryManageDesktopApp" target="_blank" rel="noopener">github仓库链接</a></p>]]></content>
      <categories>
        <category>PyQt5</category>
        <category>图书馆管理系统</category>
      </categories>
      <tags>
        <tag>PyQt5</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
</search>
